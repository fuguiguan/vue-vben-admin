{
  "version": 3,
  "sources": ["../../.pnpm/codemirror@5.65.16/node_modules/codemirror/mode/mathematica/mathematica.js"],
  "sourcesContent": ["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n// Mathematica mode copyright (c) 2015 by Calin Barbat\n// Based on code by Patrick Scheibe (halirutan)\n// See: https://github.com/halirutan/Mathematica-Source-Highlighting/tree/master/src/lang-mma.js\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode('mathematica', function(_config, _parserConfig) {\n\n  // used pattern building blocks\n  var Identifier = '[a-zA-Z\\\\$][a-zA-Z0-9\\\\$]*';\n  var pBase      = \"(?:\\\\d+)\";\n  var pFloat     = \"(?:\\\\.\\\\d+|\\\\d+\\\\.\\\\d*|\\\\d+)\";\n  var pFloatBase = \"(?:\\\\.\\\\w+|\\\\w+\\\\.\\\\w*|\\\\w+)\";\n  var pPrecision = \"(?:`(?:`?\"+pFloat+\")?)\";\n\n  // regular expressions\n  var reBaseForm        = new RegExp('(?:'+pBase+'(?:\\\\^\\\\^'+pFloatBase+pPrecision+'?(?:\\\\*\\\\^[+-]?\\\\d+)?))');\n  var reFloatForm       = new RegExp('(?:' + pFloat + pPrecision + '?(?:\\\\*\\\\^[+-]?\\\\d+)?)');\n  var reIdInContext     = new RegExp('(?:`?)(?:' + Identifier + ')(?:`(?:' + Identifier + '))*(?:`?)');\n\n  function tokenBase(stream, state) {\n    var ch;\n\n    // get next character\n    ch = stream.next();\n\n    // string\n    if (ch === '\"') {\n      state.tokenize = tokenString;\n      return state.tokenize(stream, state);\n    }\n\n    // comment\n    if (ch === '(') {\n      if (stream.eat('*')) {\n        state.commentLevel++;\n        state.tokenize = tokenComment;\n        return state.tokenize(stream, state);\n      }\n    }\n\n    // go back one character\n    stream.backUp(1);\n\n    // look for numbers\n    // Numbers in a baseform\n    if (stream.match(reBaseForm, true, false)) {\n      return 'number';\n    }\n\n    // Mathematica numbers. Floats (1.2, .2, 1.) can have optionally a precision (`float) or an accuracy definition\n    // (``float). Note: while 1.2` is possible 1.2`` is not. At the end an exponent (float*^+12) can follow.\n    if (stream.match(reFloatForm, true, false)) {\n      return 'number';\n    }\n\n    /* In[23] and Out[34] */\n    if (stream.match(/(?:In|Out)\\[[0-9]*\\]/, true, false)) {\n      return 'atom';\n    }\n\n    // usage\n    if (stream.match(/([a-zA-Z\\$][a-zA-Z0-9\\$]*(?:`[a-zA-Z0-9\\$]+)*::usage)/, true, false)) {\n      return 'meta';\n    }\n\n    // message\n    if (stream.match(/([a-zA-Z\\$][a-zA-Z0-9\\$]*(?:`[a-zA-Z0-9\\$]+)*::[a-zA-Z\\$][a-zA-Z0-9\\$]*):?/, true, false)) {\n      return 'string-2';\n    }\n\n    // this makes a look-ahead match for something like variable:{_Integer}\n    // the match is then forwarded to the mma-patterns tokenizer.\n    if (stream.match(/([a-zA-Z\\$][a-zA-Z0-9\\$]*\\s*:)(?:(?:[a-zA-Z\\$][a-zA-Z0-9\\$]*)|(?:[^:=>~@\\^\\&\\*\\)\\[\\]'\\?,\\|])).*/, true, false)) {\n      return 'variable-2';\n    }\n\n    // catch variables which are used together with Blank (_), BlankSequence (__) or BlankNullSequence (___)\n    // Cannot start with a number, but can have numbers at any other position. Examples\n    // blub__Integer, a1_, b34_Integer32\n    if (stream.match(/[a-zA-Z\\$][a-zA-Z0-9\\$]*_+[a-zA-Z\\$][a-zA-Z0-9\\$]*/, true, false)) {\n      return 'variable-2';\n    }\n    if (stream.match(/[a-zA-Z\\$][a-zA-Z0-9\\$]*_+/, true, false)) {\n      return 'variable-2';\n    }\n    if (stream.match(/_+[a-zA-Z\\$][a-zA-Z0-9\\$]*/, true, false)) {\n      return 'variable-2';\n    }\n\n    // Named characters in Mathematica, like \\[Gamma].\n    if (stream.match(/\\\\\\[[a-zA-Z\\$][a-zA-Z0-9\\$]*\\]/, true, false)) {\n      return 'variable-3';\n    }\n\n    // Match all braces separately\n    if (stream.match(/(?:\\[|\\]|{|}|\\(|\\))/, true, false)) {\n      return 'bracket';\n    }\n\n    // Catch Slots (#, ##, #3, ##9 and the V10 named slots #name). I have never seen someone using more than one digit after #, so we match\n    // only one.\n    if (stream.match(/(?:#[a-zA-Z\\$][a-zA-Z0-9\\$]*|#+[0-9]?)/, true, false)) {\n      return 'variable-2';\n    }\n\n    // Literals like variables, keywords, functions\n    if (stream.match(reIdInContext, true, false)) {\n      return 'keyword';\n    }\n\n    // operators. Note that operators like @@ or /; are matched separately for each symbol.\n    if (stream.match(/(?:\\\\|\\+|\\-|\\*|\\/|,|;|\\.|:|@|~|=|>|<|&|\\||_|`|'|\\^|\\?|!|%)/, true, false)) {\n      return 'operator';\n    }\n\n    // everything else is an error\n    stream.next(); // advance the stream.\n    return 'error';\n  }\n\n  function tokenString(stream, state) {\n    var next, end = false, escaped = false;\n    while ((next = stream.next()) != null) {\n      if (next === '\"' && !escaped) {\n        end = true;\n        break;\n      }\n      escaped = !escaped && next === '\\\\';\n    }\n    if (end && !escaped) {\n      state.tokenize = tokenBase;\n    }\n    return 'string';\n  };\n\n  function tokenComment(stream, state) {\n    var prev, next;\n    while(state.commentLevel > 0 && (next = stream.next()) != null) {\n      if (prev === '(' && next === '*') state.commentLevel++;\n      if (prev === '*' && next === ')') state.commentLevel--;\n      prev = next;\n    }\n    if (state.commentLevel <= 0) {\n      state.tokenize = tokenBase;\n    }\n    return 'comment';\n  }\n\n  return {\n    startState: function() {return {tokenize: tokenBase, commentLevel: 0};},\n    token: function(stream, state) {\n      if (stream.eatSpace()) return null;\n      return state.tokenize(stream, state);\n    },\n    blockCommentStart: \"(*\",\n    blockCommentEnd: \"*)\"\n  };\n});\n\nCodeMirror.defineMIME('text/x-mathematica', {\n  name: 'mathematica'\n});\n\n});\n"],
  "mappings": "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",
  "names": ["CodeMirror"]
}
