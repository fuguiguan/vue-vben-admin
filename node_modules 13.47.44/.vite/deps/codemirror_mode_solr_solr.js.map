{
  "version": 3,
  "sources": ["../../.pnpm/codemirror@5.65.16/node_modules/codemirror/mode/solr/solr.js"],
  "sourcesContent": ["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"solr\", function() {\n  \"use strict\";\n\n  var isStringChar = /[^\\s\\|\\!\\+\\-\\*\\?\\~\\^\\&\\:\\(\\)\\[\\]\\{\\}\\\"\\\\]/;\n  var isOperatorChar = /[\\|\\!\\+\\-\\*\\?\\~\\^\\&]/;\n  var isOperatorString = /^(OR|AND|NOT|TO)$/i;\n\n  function isNumber(word) {\n    return parseFloat(word).toString() === word;\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) break;\n        escaped = !escaped && next == \"\\\\\";\n      }\n\n      if (!escaped) state.tokenize = tokenBase;\n      return \"string\";\n    };\n  }\n\n  function tokenOperator(operator) {\n    return function(stream, state) {\n      var style = \"operator\";\n      if (operator == \"+\")\n        style += \" positive\";\n      else if (operator == \"-\")\n        style += \" negative\";\n      else if (operator == \"|\")\n        stream.eat(/\\|/);\n      else if (operator == \"&\")\n        stream.eat(/\\&/);\n      else if (operator == \"^\")\n        style += \" boost\";\n\n      state.tokenize = tokenBase;\n      return style;\n    };\n  }\n\n  function tokenWord(ch) {\n    return function(stream, state) {\n      var word = ch;\n      while ((ch = stream.peek()) && ch.match(isStringChar) != null) {\n        word += stream.next();\n      }\n\n      state.tokenize = tokenBase;\n      if (isOperatorString.test(word))\n        return \"operator\";\n      else if (isNumber(word))\n        return \"number\";\n      else if (stream.peek() == \":\")\n        return \"field\";\n      else\n        return \"string\";\n    };\n  }\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == '\"')\n      state.tokenize = tokenString(ch);\n    else if (isOperatorChar.test(ch))\n      state.tokenize = tokenOperator(ch);\n    else if (isStringChar.test(ch))\n      state.tokenize = tokenWord(ch);\n\n    return (state.tokenize != tokenBase) ? state.tokenize(stream, state) : null;\n  }\n\n  return {\n    startState: function() {\n      return {\n        tokenize: tokenBase\n      };\n    },\n\n    token: function(stream, state) {\n      if (stream.eatSpace()) return null;\n      return state.tokenize(stream, state);\n    }\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-solr\", \"solr\");\n\n});\n"],
  "mappings": ";;;;;;;;AAAA;AAAA;AAGA,KAAC,SAAS,KAAK;AACb,UAAI,OAAO,WAAW,YAAY,OAAO,UAAU;AACjD,YAAI,oBAA+B;AAAA,eAC5B,OAAO,UAAU,cAAc,OAAO;AAC7C,eAAO,CAAC,sBAAsB,GAAG,GAAG;AAAA;AAEpC,YAAI,UAAU;AAAA,IAClB,GAAG,SAASA,aAAY;AACxB;AAEA,MAAAA,YAAW,WAAW,QAAQ,WAAW;AACvC;AAEA,YAAI,eAAe;AACnB,YAAI,iBAAiB;AACrB,YAAI,mBAAmB;AAEvB,iBAAS,SAAS,MAAM;AACtB,iBAAO,WAAW,IAAI,EAAE,SAAS,MAAM;AAAA,QACzC;AAEA,iBAAS,YAAY,OAAO;AAC1B,iBAAO,SAAS,QAAQ,OAAO;AAC7B,gBAAI,UAAU,OAAO;AACrB,oBAAQ,OAAO,OAAO,KAAK,MAAM,MAAM;AACrC,kBAAI,QAAQ,SAAS,CAAC;AAAS;AAC/B,wBAAU,CAAC,WAAW,QAAQ;AAAA,YAChC;AAEA,gBAAI,CAAC;AAAS,oBAAM,WAAW;AAC/B,mBAAO;AAAA,UACT;AAAA,QACF;AAEA,iBAAS,cAAc,UAAU;AAC/B,iBAAO,SAAS,QAAQ,OAAO;AAC7B,gBAAI,QAAQ;AACZ,gBAAI,YAAY;AACd,uBAAS;AAAA,qBACF,YAAY;AACnB,uBAAS;AAAA,qBACF,YAAY;AACnB,qBAAO,IAAI,IAAI;AAAA,qBACR,YAAY;AACnB,qBAAO,IAAI,IAAI;AAAA,qBACR,YAAY;AACnB,uBAAS;AAEX,kBAAM,WAAW;AACjB,mBAAO;AAAA,UACT;AAAA,QACF;AAEA,iBAAS,UAAU,IAAI;AACrB,iBAAO,SAAS,QAAQ,OAAO;AAC7B,gBAAI,OAAO;AACX,oBAAQ,KAAK,OAAO,KAAK,MAAM,GAAG,MAAM,YAAY,KAAK,MAAM;AAC7D,sBAAQ,OAAO,KAAK;AAAA,YACtB;AAEA,kBAAM,WAAW;AACjB,gBAAI,iBAAiB,KAAK,IAAI;AAC5B,qBAAO;AAAA,qBACA,SAAS,IAAI;AACpB,qBAAO;AAAA,qBACA,OAAO,KAAK,KAAK;AACxB,qBAAO;AAAA;AAEP,qBAAO;AAAA,UACX;AAAA,QACF;AAEA,iBAAS,UAAU,QAAQ,OAAO;AAChC,cAAI,KAAK,OAAO,KAAK;AACrB,cAAI,MAAM;AACR,kBAAM,WAAW,YAAY,EAAE;AAAA,mBACxB,eAAe,KAAK,EAAE;AAC7B,kBAAM,WAAW,cAAc,EAAE;AAAA,mBAC1B,aAAa,KAAK,EAAE;AAC3B,kBAAM,WAAW,UAAU,EAAE;AAE/B,iBAAQ,MAAM,YAAY,YAAa,MAAM,SAAS,QAAQ,KAAK,IAAI;AAAA,QACzE;AAEA,eAAO;AAAA,UACL,YAAY,WAAW;AACrB,mBAAO;AAAA,cACL,UAAU;AAAA,YACZ;AAAA,UACF;AAAA,UAEA,OAAO,SAAS,QAAQ,OAAO;AAC7B,gBAAI,OAAO,SAAS;AAAG,qBAAO;AAC9B,mBAAO,MAAM,SAAS,QAAQ,KAAK;AAAA,UACrC;AAAA,QACF;AAAA,MACF,CAAC;AAED,MAAAA,YAAW,WAAW,eAAe,MAAM;AAAA,IAE3C,CAAC;AAAA;AAAA;",
  "names": ["CodeMirror"]
}
