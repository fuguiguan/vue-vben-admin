import {
  require_codemirror
} from "./chunk-GI5J7NWS.js";
import {
  __commonJS
} from "./chunk-WGAPYIUP.js";

// node_modules/.pnpm/codemirror@5.65.16/node_modules/codemirror/mode/brainfuck/brainfuck.js
var require_brainfuck = __commonJS({
  "node_modules/.pnpm/codemirror@5.65.16/node_modules/codemirror/mode/brainfuck/brainfuck.js"(exports, module) {
    (function(mod) {
      if (typeof exports == "object" && typeof module == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      var reserve = "><+-.,[]".split("");
      CodeMirror2.defineMode("brainfuck", function() {
        return {
          startState: function() {
            return {
              commentLine: false,
              left: 0,
              right: 0,
              commentLoop: false
            };
          },
          token: function(stream, state) {
            if (stream.eatSpace())
              return null;
            if (stream.sol()) {
              state.commentLine = false;
            }
            var ch = stream.next().toString();
            if (reserve.indexOf(ch) !== -1) {
              if (state.commentLine === true) {
                if (stream.eol()) {
                  state.commentLine = false;
                }
                return "comment";
              }
              if (ch === "]" || ch === "[") {
                if (ch === "[") {
                  state.left++;
                } else {
                  state.right++;
                }
                return "bracket";
              } else if (ch === "+" || ch === "-") {
                return "keyword";
              } else if (ch === "<" || ch === ">") {
                return "atom";
              } else if (ch === "." || ch === ",") {
                return "def";
              }
            } else {
              state.commentLine = true;
              if (stream.eol()) {
                state.commentLine = false;
              }
              return "comment";
            }
            if (stream.eol()) {
              state.commentLine = false;
            }
          }
        };
      });
      CodeMirror2.defineMIME("text/x-brainfuck", "brainfuck");
    });
  }
});
export default require_brainfuck();
//# sourceMappingURL=codemirror_mode_brainfuck_brainfuck.js.map
