{
  "version": 3,
  "sources": ["../../.pnpm/codemirror@5.65.16/node_modules/codemirror/mode/properties/properties.js"],
  "sourcesContent": ["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"properties\", function() {\n  return {\n    token: function(stream, state) {\n      var sol = stream.sol() || state.afterSection;\n      var eol = stream.eol();\n\n      state.afterSection = false;\n\n      if (sol) {\n        if (state.nextMultiline) {\n          state.inMultiline = true;\n          state.nextMultiline = false;\n        } else {\n          state.position = \"def\";\n        }\n      }\n\n      if (eol && ! state.nextMultiline) {\n        state.inMultiline = false;\n        state.position = \"def\";\n      }\n\n      if (sol) {\n        while(stream.eatSpace()) {}\n      }\n\n      var ch = stream.next();\n\n      if (sol && (ch === \"#\" || ch === \"!\" || ch === \";\")) {\n        state.position = \"comment\";\n        stream.skipToEnd();\n        return \"comment\";\n      } else if (sol && ch === \"[\") {\n        state.afterSection = true;\n        stream.skipTo(\"]\"); stream.eat(\"]\");\n        return \"header\";\n      } else if (ch === \"=\" || ch === \":\") {\n        state.position = \"quote\";\n        return null;\n      } else if (ch === \"\\\\\" && state.position === \"quote\") {\n        if (stream.eol()) {  // end of line?\n          // Multiline value\n          state.nextMultiline = true;\n        }\n      }\n\n      return state.position;\n    },\n\n    startState: function() {\n      return {\n        position : \"def\",       // Current position, \"def\", \"quote\" or \"comment\"\n        nextMultiline : false,  // Is the next line multiline value\n        inMultiline : false,    // Is the current line a multiline value\n        afterSection : false    // Did we just open a section\n      };\n    }\n\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-properties\", \"properties\");\nCodeMirror.defineMIME(\"text/x-ini\", \"properties\");\n\n});\n"],
  "mappings": ";;;;;;;;AAAA;AAAA;AAGA,KAAC,SAAS,KAAK;AACb,UAAI,OAAO,WAAW,YAAY,OAAO,UAAU;AACjD,YAAI,oBAA+B;AAAA,eAC5B,OAAO,UAAU,cAAc,OAAO;AAC7C,eAAO,CAAC,sBAAsB,GAAG,GAAG;AAAA;AAEpC,YAAI,UAAU;AAAA,IAClB,GAAG,SAASA,aAAY;AACxB;AAEA,MAAAA,YAAW,WAAW,cAAc,WAAW;AAC7C,eAAO;AAAA,UACL,OAAO,SAAS,QAAQ,OAAO;AAC7B,gBAAI,MAAM,OAAO,IAAI,KAAK,MAAM;AAChC,gBAAI,MAAM,OAAO,IAAI;AAErB,kBAAM,eAAe;AAErB,gBAAI,KAAK;AACP,kBAAI,MAAM,eAAe;AACvB,sBAAM,cAAc;AACpB,sBAAM,gBAAgB;AAAA,cACxB,OAAO;AACL,sBAAM,WAAW;AAAA,cACnB;AAAA,YACF;AAEA,gBAAI,OAAO,CAAE,MAAM,eAAe;AAChC,oBAAM,cAAc;AACpB,oBAAM,WAAW;AAAA,YACnB;AAEA,gBAAI,KAAK;AACP,qBAAM,OAAO,SAAS,GAAG;AAAA,cAAC;AAAA,YAC5B;AAEA,gBAAI,KAAK,OAAO,KAAK;AAErB,gBAAI,QAAQ,OAAO,OAAO,OAAO,OAAO,OAAO,MAAM;AACnD,oBAAM,WAAW;AACjB,qBAAO,UAAU;AACjB,qBAAO;AAAA,YACT,WAAW,OAAO,OAAO,KAAK;AAC5B,oBAAM,eAAe;AACrB,qBAAO,OAAO,GAAG;AAAG,qBAAO,IAAI,GAAG;AAClC,qBAAO;AAAA,YACT,WAAW,OAAO,OAAO,OAAO,KAAK;AACnC,oBAAM,WAAW;AACjB,qBAAO;AAAA,YACT,WAAW,OAAO,QAAQ,MAAM,aAAa,SAAS;AACpD,kBAAI,OAAO,IAAI,GAAG;AAEhB,sBAAM,gBAAgB;AAAA,cACxB;AAAA,YACF;AAEA,mBAAO,MAAM;AAAA,UACf;AAAA,UAEA,YAAY,WAAW;AACrB,mBAAO;AAAA,cACL,UAAW;AAAA;AAAA,cACX,eAAgB;AAAA;AAAA,cAChB,aAAc;AAAA;AAAA,cACd,cAAe;AAAA;AAAA,YACjB;AAAA,UACF;AAAA,QAEF;AAAA,MACF,CAAC;AAED,MAAAA,YAAW,WAAW,qBAAqB,YAAY;AACvD,MAAAA,YAAW,WAAW,cAAc,YAAY;AAAA,IAEhD,CAAC;AAAA;AAAA;",
  "names": ["CodeMirror"]
}
