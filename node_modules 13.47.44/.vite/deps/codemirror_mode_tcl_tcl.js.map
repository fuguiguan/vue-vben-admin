{
  "version": 3,
  "sources": ["../../.pnpm/codemirror@5.65.16/node_modules/codemirror/mode/tcl/tcl.js"],
  "sourcesContent": ["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n//tcl mode by Ford_Lawnmower :: Based on Velocity mode by Steve O'Hara\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"tcl\", function() {\n  function parseWords(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n  var keywords = parseWords(\"Tcl safe after append array auto_execok auto_import auto_load \" +\n        \"auto_mkindex auto_mkindex_old auto_qualify auto_reset bgerror \" +\n        \"binary break catch cd close concat continue dde eof encoding error \" +\n        \"eval exec exit expr fblocked fconfigure fcopy file fileevent filename \" +\n        \"filename flush for foreach format gets glob global history http if \" +\n        \"incr info interp join lappend lindex linsert list llength load lrange \" +\n        \"lreplace lsearch lset lsort memory msgcat namespace open package parray \" +\n        \"pid pkg::create pkg_mkIndex proc puts pwd re_syntax read regex regexp \" +\n        \"registry regsub rename resource return scan seek set socket source split \" +\n        \"string subst switch tcl_endOfWord tcl_findLibrary tcl_startOfNextWord \" +\n        \"tcl_wordBreakAfter tcl_startOfPreviousWord tcl_wordBreakBefore tcltest \" +\n        \"tclvars tell time trace unknown unset update uplevel upvar variable \" +\n    \"vwait\");\n    var functions = parseWords(\"if elseif else and not or eq ne in ni for foreach while switch\");\n    var isOperatorChar = /[+\\-*&%=<>!?^\\/\\|]/;\n    function chain(stream, state, f) {\n      state.tokenize = f;\n      return f(stream, state);\n    }\n    function tokenBase(stream, state) {\n      var beforeParams = state.beforeParams;\n      state.beforeParams = false;\n      var ch = stream.next();\n      if ((ch == '\"' || ch == \"'\") && state.inParams) {\n        return chain(stream, state, tokenString(ch));\n      } else if (/[\\[\\]{}\\(\\),;\\.]/.test(ch)) {\n        if (ch == \"(\" && beforeParams) state.inParams = true;\n        else if (ch == \")\") state.inParams = false;\n          return null;\n      } else if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\w\\.]/);\n        return \"number\";\n      } else if (ch == \"#\") {\n        if (stream.eat(\"*\"))\n          return chain(stream, state, tokenComment);\n        if (ch == \"#\" && stream.match(/ *\\[ *\\[/))\n          return chain(stream, state, tokenUnparsed);\n        stream.skipToEnd();\n        return \"comment\";\n      } else if (ch == '\"') {\n        stream.skipTo(/\"/);\n        return \"comment\";\n      } else if (ch == \"$\") {\n        stream.eatWhile(/[$_a-z0-9A-Z\\.{:]/);\n        stream.eatWhile(/}/);\n        state.beforeParams = true;\n        return \"builtin\";\n      } else if (isOperatorChar.test(ch)) {\n        stream.eatWhile(isOperatorChar);\n        return \"comment\";\n      } else {\n        stream.eatWhile(/[\\w\\$_{}\\xa1-\\uffff]/);\n        var word = stream.current().toLowerCase();\n        if (keywords && keywords.propertyIsEnumerable(word))\n          return \"keyword\";\n        if (functions && functions.propertyIsEnumerable(word)) {\n          state.beforeParams = true;\n          return \"keyword\";\n        }\n        return null;\n      }\n    }\n    function tokenString(quote) {\n      return function(stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {\n          end = true;\n          break;\n        }\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end) state.tokenize = tokenBase;\n        return \"string\";\n      };\n    }\n    function tokenComment(stream, state) {\n      var maybeEnd = false, ch;\n      while (ch = stream.next()) {\n        if (ch == \"#\" && maybeEnd) {\n          state.tokenize = tokenBase;\n          break;\n        }\n        maybeEnd = (ch == \"*\");\n      }\n      return \"comment\";\n    }\n    function tokenUnparsed(stream, state) {\n      var maybeEnd = 0, ch;\n      while (ch = stream.next()) {\n        if (ch == \"#\" && maybeEnd == 2) {\n          state.tokenize = tokenBase;\n          break;\n        }\n        if (ch == \"]\")\n          maybeEnd++;\n        else if (ch != \" \")\n          maybeEnd = 0;\n      }\n      return \"meta\";\n    }\n    return {\n      startState: function() {\n        return {\n          tokenize: tokenBase,\n          beforeParams: false,\n          inParams: false\n        };\n      },\n      token: function(stream, state) {\n        if (stream.eatSpace()) return null;\n        return state.tokenize(stream, state);\n      },\n      lineComment: \"#\"\n    };\n});\nCodeMirror.defineMIME(\"text/x-tcl\", \"tcl\");\n\n});\n"],
  "mappings": "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",
  "names": ["CodeMirror"]
}
