{
  "version": 3,
  "sources": ["../../.pnpm/codemirror@5.65.16/node_modules/codemirror/mode/ebnf/ebnf.js"],
  "sourcesContent": ["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"ebnf\", function (config) {\n    var commentType = {slash: 0, parenthesis: 1};\n    var stateType = {comment: 0, _string: 1, characterClass: 2};\n    var bracesMode = null;\n\n    if (config.bracesMode)\n      bracesMode = CodeMirror.getMode(config, config.bracesMode);\n\n    return {\n      startState: function () {\n        return {\n          stringType: null,\n          commentType: null,\n          braced: 0,\n          lhs: true,\n          localState: null,\n          stack: [],\n          inDefinition: false\n        };\n      },\n      token: function (stream, state) {\n        if (!stream) return;\n\n        //check for state changes\n        if (state.stack.length === 0) {\n          //strings\n          if ((stream.peek() == '\"') || (stream.peek() == \"'\")) {\n            state.stringType = stream.peek();\n            stream.next(); // Skip quote\n            state.stack.unshift(stateType._string);\n          } else if (stream.match('/*')) { //comments starting with /*\n            state.stack.unshift(stateType.comment);\n            state.commentType = commentType.slash;\n          } else if (stream.match('(*')) { //comments starting with (*\n            state.stack.unshift(stateType.comment);\n            state.commentType = commentType.parenthesis;\n          }\n        }\n\n        //return state\n        //stack has\n        switch (state.stack[0]) {\n        case stateType._string:\n          while (state.stack[0] === stateType._string && !stream.eol()) {\n            if (stream.peek() === state.stringType) {\n              stream.next(); // Skip quote\n              state.stack.shift(); // Clear flag\n            } else if (stream.peek() === \"\\\\\") {\n              stream.next();\n              stream.next();\n            } else {\n              stream.match(/^.[^\\\\\\\"\\']*/);\n            }\n          }\n          return state.lhs ? \"property string\" : \"string\"; // Token style\n\n        case stateType.comment:\n          while (state.stack[0] === stateType.comment && !stream.eol()) {\n            if (state.commentType === commentType.slash && stream.match('*/')) {\n              state.stack.shift(); // Clear flag\n              state.commentType = null;\n            } else if (state.commentType === commentType.parenthesis && stream.match('*)')) {\n              state.stack.shift(); // Clear flag\n              state.commentType = null;\n            } else {\n              stream.match(/^.[^\\*]*/);\n            }\n          }\n          return \"comment\";\n\n        case stateType.characterClass:\n          while (state.stack[0] === stateType.characterClass && !stream.eol()) {\n            if (!(stream.match(/^[^\\]\\\\]+/) || stream.match('.'))) {\n              state.stack.shift();\n            }\n          }\n          return \"operator\";\n        }\n\n        var peek = stream.peek();\n\n        if (bracesMode !== null && (state.braced || peek === \"{\")) {\n          if (state.localState === null)\n            state.localState = CodeMirror.startState(bracesMode);\n\n          var token = bracesMode.token(stream, state.localState),\n          text = stream.current();\n\n          if (!token) {\n            for (var i = 0; i < text.length; i++) {\n              if (text[i] === \"{\") {\n                if (state.braced === 0) {\n                  token = \"matchingbracket\";\n                }\n                state.braced++;\n              } else if (text[i] === \"}\") {\n                state.braced--;\n                if (state.braced === 0) {\n                  token = \"matchingbracket\";\n                }\n              }\n            }\n          }\n          return token;\n        }\n\n        //no stack\n        switch (peek) {\n        case \"[\":\n          stream.next();\n          state.stack.unshift(stateType.characterClass);\n          return \"bracket\";\n        case \":\":\n        case \"|\":\n        case \";\":\n          stream.next();\n          return \"operator\";\n        case \"%\":\n          if (stream.match(\"%%\")) {\n            return \"header\";\n          } else if (stream.match(/[%][A-Za-z]+/)) {\n            return \"keyword\";\n          } else if (stream.match(/[%][}]/)) {\n            return \"matchingbracket\";\n          }\n          break;\n        case \"/\":\n          if (stream.match(/[\\/][A-Za-z]+/)) {\n          return \"keyword\";\n        }\n        case \"\\\\\":\n          if (stream.match(/[\\][a-z]+/)) {\n            return \"string-2\";\n          }\n        case \".\":\n          if (stream.match(\".\")) {\n            return \"atom\";\n          }\n        case \"*\":\n        case \"-\":\n        case \"+\":\n        case \"^\":\n          if (stream.match(peek)) {\n            return \"atom\";\n          }\n        case \"$\":\n          if (stream.match(\"$$\")) {\n            return \"builtin\";\n          } else if (stream.match(/[$][0-9]+/)) {\n            return \"variable-3\";\n          }\n        case \"<\":\n          if (stream.match(/<<[a-zA-Z_]+>>/)) {\n            return \"builtin\";\n          }\n        }\n\n        if (stream.match('//')) {\n          stream.skipToEnd();\n          return \"comment\";\n        } else if (stream.match('return')) {\n          return \"operator\";\n        } else if (stream.match(/^[a-zA-Z_][a-zA-Z0-9_]*/)) {\n          if (stream.match(/(?=[\\(.])/)) {\n            return \"variable\";\n          } else if (stream.match(/(?=[\\s\\n]*[:=])/)) {\n            return \"def\";\n          }\n          return \"variable-2\";\n        } else if ([\"[\", \"]\", \"(\", \")\"].indexOf(stream.peek()) != -1) {\n          stream.next();\n          return \"bracket\";\n        } else if (!stream.eatSpace()) {\n          stream.next();\n        }\n        return null;\n      }\n    };\n  });\n\n  CodeMirror.defineMIME(\"text/x-ebnf\", \"ebnf\");\n});\n"],
  "mappings": "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",
  "names": ["CodeMirror"]
}
