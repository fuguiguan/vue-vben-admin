{
  "version": 3,
  "sources": ["../../.pnpm/codemirror@5.65.16/node_modules/codemirror/mode/asciiarmor/asciiarmor.js"],
  "sourcesContent": ["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  function errorIfNotEmpty(stream) {\n    var nonWS = stream.match(/^\\s*\\S/);\n    stream.skipToEnd();\n    return nonWS ? \"error\" : null;\n  }\n\n  CodeMirror.defineMode(\"asciiarmor\", function() {\n    return {\n      token: function(stream, state) {\n        var m;\n        if (state.state == \"top\") {\n          if (stream.sol() && (m = stream.match(/^-----BEGIN (.*)?-----\\s*$/))) {\n            state.state = \"headers\";\n            state.type = m[1];\n            return \"tag\";\n          }\n          return errorIfNotEmpty(stream);\n        } else if (state.state == \"headers\") {\n          if (stream.sol() && stream.match(/^\\w+:/)) {\n            state.state = \"header\";\n            return \"atom\";\n          } else {\n            var result = errorIfNotEmpty(stream);\n            if (result) state.state = \"body\";\n            return result;\n          }\n        } else if (state.state == \"header\") {\n          stream.skipToEnd();\n          state.state = \"headers\";\n          return \"string\";\n        } else if (state.state == \"body\") {\n          if (stream.sol() && (m = stream.match(/^-----END (.*)?-----\\s*$/))) {\n            if (m[1] != state.type) return \"error\";\n            state.state = \"end\";\n            return \"tag\";\n          } else {\n            if (stream.eatWhile(/[A-Za-z0-9+\\/=]/)) {\n              return null;\n            } else {\n              stream.next();\n              return \"error\";\n            }\n          }\n        } else if (state.state == \"end\") {\n          return errorIfNotEmpty(stream);\n        }\n      },\n      blankLine: function(state) {\n        if (state.state == \"headers\") state.state = \"body\";\n      },\n      startState: function() {\n        return {state: \"top\", type: null};\n      }\n    };\n  });\n\n  CodeMirror.defineMIME(\"application/pgp\", \"asciiarmor\");\n  CodeMirror.defineMIME(\"application/pgp-encrypted\", \"asciiarmor\");\n  CodeMirror.defineMIME(\"application/pgp-keys\", \"asciiarmor\");\n  CodeMirror.defineMIME(\"application/pgp-signature\", \"asciiarmor\");\n});\n"],
  "mappings": ";;;;;;;;AAAA;AAAA;AAGA,KAAC,SAAS,KAAK;AACb,UAAI,OAAO,WAAW,YAAY,OAAO,UAAU;AACjD,YAAI,oBAA+B;AAAA,eAC5B,OAAO,UAAU,cAAc,OAAO;AAC7C,eAAO,CAAC,sBAAsB,GAAG,GAAG;AAAA;AAEpC,YAAI,UAAU;AAAA,IAClB,GAAG,SAASA,aAAY;AACtB;AAEA,eAAS,gBAAgB,QAAQ;AAC/B,YAAI,QAAQ,OAAO,MAAM,QAAQ;AACjC,eAAO,UAAU;AACjB,eAAO,QAAQ,UAAU;AAAA,MAC3B;AAEA,MAAAA,YAAW,WAAW,cAAc,WAAW;AAC7C,eAAO;AAAA,UACL,OAAO,SAAS,QAAQ,OAAO;AAC7B,gBAAI;AACJ,gBAAI,MAAM,SAAS,OAAO;AACxB,kBAAI,OAAO,IAAI,MAAM,IAAI,OAAO,MAAM,4BAA4B,IAAI;AACpE,sBAAM,QAAQ;AACd,sBAAM,OAAO,EAAE,CAAC;AAChB,uBAAO;AAAA,cACT;AACA,qBAAO,gBAAgB,MAAM;AAAA,YAC/B,WAAW,MAAM,SAAS,WAAW;AACnC,kBAAI,OAAO,IAAI,KAAK,OAAO,MAAM,OAAO,GAAG;AACzC,sBAAM,QAAQ;AACd,uBAAO;AAAA,cACT,OAAO;AACL,oBAAI,SAAS,gBAAgB,MAAM;AACnC,oBAAI;AAAQ,wBAAM,QAAQ;AAC1B,uBAAO;AAAA,cACT;AAAA,YACF,WAAW,MAAM,SAAS,UAAU;AAClC,qBAAO,UAAU;AACjB,oBAAM,QAAQ;AACd,qBAAO;AAAA,YACT,WAAW,MAAM,SAAS,QAAQ;AAChC,kBAAI,OAAO,IAAI,MAAM,IAAI,OAAO,MAAM,0BAA0B,IAAI;AAClE,oBAAI,EAAE,CAAC,KAAK,MAAM;AAAM,yBAAO;AAC/B,sBAAM,QAAQ;AACd,uBAAO;AAAA,cACT,OAAO;AACL,oBAAI,OAAO,SAAS,iBAAiB,GAAG;AACtC,yBAAO;AAAA,gBACT,OAAO;AACL,yBAAO,KAAK;AACZ,yBAAO;AAAA,gBACT;AAAA,cACF;AAAA,YACF,WAAW,MAAM,SAAS,OAAO;AAC/B,qBAAO,gBAAgB,MAAM;AAAA,YAC/B;AAAA,UACF;AAAA,UACA,WAAW,SAAS,OAAO;AACzB,gBAAI,MAAM,SAAS;AAAW,oBAAM,QAAQ;AAAA,UAC9C;AAAA,UACA,YAAY,WAAW;AACrB,mBAAO,EAAC,OAAO,OAAO,MAAM,KAAI;AAAA,UAClC;AAAA,QACF;AAAA,MACF,CAAC;AAED,MAAAA,YAAW,WAAW,mBAAmB,YAAY;AACrD,MAAAA,YAAW,WAAW,6BAA6B,YAAY;AAC/D,MAAAA,YAAW,WAAW,wBAAwB,YAAY;AAC1D,MAAAA,YAAW,WAAW,6BAA6B,YAAY;AAAA,IACjE,CAAC;AAAA;AAAA;",
  "names": ["CodeMirror"]
}
