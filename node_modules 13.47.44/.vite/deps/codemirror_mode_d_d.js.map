{
  "version": 3,
  "sources": ["../../.pnpm/codemirror@5.65.16/node_modules/codemirror/mode/d/d.js"],
  "sourcesContent": ["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"d\", function(config, parserConfig) {\n  var indentUnit = config.indentUnit,\n      statementIndentUnit = parserConfig.statementIndentUnit || indentUnit,\n      keywords = parserConfig.keywords || {},\n      builtin = parserConfig.builtin || {},\n      blockKeywords = parserConfig.blockKeywords || {},\n      atoms = parserConfig.atoms || {},\n      hooks = parserConfig.hooks || {},\n      multiLineStrings = parserConfig.multiLineStrings;\n  var isOperatorChar = /[+\\-*&%=<>!?|\\/]/;\n\n  var curPunc;\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (hooks[ch]) {\n      var result = hooks[ch](stream, state);\n      if (result !== false) return result;\n    }\n    if (ch == '\"' || ch == \"'\" || ch == \"`\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    }\n    if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n      curPunc = ch;\n      return null;\n    }\n    if (/\\d/.test(ch)) {\n      stream.eatWhile(/[\\w\\.]/);\n      return \"number\";\n    }\n    if (ch == \"/\") {\n      if (stream.eat(\"+\")) {\n        state.tokenize = tokenNestedComment;\n        return tokenNestedComment(stream, state);\n      }\n      if (stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      }\n      if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n    }\n    if (isOperatorChar.test(ch)) {\n      stream.eatWhile(isOperatorChar);\n      return \"operator\";\n    }\n    stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n    var cur = stream.current();\n    if (keywords.propertyIsEnumerable(cur)) {\n      if (blockKeywords.propertyIsEnumerable(cur)) curPunc = \"newstatement\";\n      return \"keyword\";\n    }\n    if (builtin.propertyIsEnumerable(cur)) {\n      if (blockKeywords.propertyIsEnumerable(cur)) curPunc = \"newstatement\";\n      return \"builtin\";\n    }\n    if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n    return \"variable\";\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {end = true; break;}\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end || !(escaped || multiLineStrings))\n        state.tokenize = null;\n      return \"string\";\n    };\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = null;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n\n  function tokenNestedComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = null;\n        break;\n      }\n      maybeEnd = (ch == \"+\");\n    }\n    return \"comment\";\n  }\n\n  function Context(indented, column, type, align, prev) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.align = align;\n    this.prev = prev;\n  }\n  function pushContext(state, col, type) {\n    var indent = state.indented;\n    if (state.context && state.context.type == \"statement\")\n      indent = state.context.indented;\n    return state.context = new Context(indent, col, type, null, state.context);\n  }\n  function popContext(state) {\n    var t = state.context.type;\n    if (t == \")\" || t == \"]\" || t == \"}\")\n      state.indented = state.context.indented;\n    return state.context = state.context.prev;\n  }\n\n  // Interface\n\n  return {\n    startState: function(basecolumn) {\n      return {\n        tokenize: null,\n        context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", false),\n        indented: 0,\n        startOfLine: true\n      };\n    },\n\n    token: function(stream, state) {\n      var ctx = state.context;\n      if (stream.sol()) {\n        if (ctx.align == null) ctx.align = false;\n        state.indented = stream.indentation();\n        state.startOfLine = true;\n      }\n      if (stream.eatSpace()) return null;\n      curPunc = null;\n      var style = (state.tokenize || tokenBase)(stream, state);\n      if (style == \"comment\" || style == \"meta\") return style;\n      if (ctx.align == null) ctx.align = true;\n\n      if ((curPunc == \";\" || curPunc == \":\" || curPunc == \",\") && ctx.type == \"statement\") popContext(state);\n      else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\n      else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\n      else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\n      else if (curPunc == \"}\") {\n        while (ctx.type == \"statement\") ctx = popContext(state);\n        if (ctx.type == \"}\") ctx = popContext(state);\n        while (ctx.type == \"statement\") ctx = popContext(state);\n      }\n      else if (curPunc == ctx.type) popContext(state);\n      else if (((ctx.type == \"}\" || ctx.type == \"top\") && curPunc != ';') || (ctx.type == \"statement\" && curPunc == \"newstatement\"))\n        pushContext(state, stream.column(), \"statement\");\n      state.startOfLine = false;\n      return style;\n    },\n\n    indent: function(state, textAfter) {\n      if (state.tokenize != tokenBase && state.tokenize != null) return CodeMirror.Pass;\n      var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);\n      if (ctx.type == \"statement\" && firstChar == \"}\") ctx = ctx.prev;\n      var closing = firstChar == ctx.type;\n      if (ctx.type == \"statement\") return ctx.indented + (firstChar == \"{\" ? 0 : statementIndentUnit);\n      else if (ctx.align) return ctx.column + (closing ? 0 : 1);\n      else return ctx.indented + (closing ? 0 : indentUnit);\n    },\n\n    electricChars: \"{}\",\n    blockCommentStart: \"/*\",\n    blockCommentEnd: \"*/\",\n    blockCommentContinue: \" * \",\n    lineComment: \"//\",\n    fold: \"brace\"\n  };\n});\n\n  function words(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n\n  var blockKeywords = \"body catch class do else enum for foreach foreach_reverse if in interface mixin \" +\n                      \"out scope struct switch try union unittest version while with\";\n\n  CodeMirror.defineMIME(\"text/x-d\", {\n    name: \"d\",\n    keywords: words(\"abstract alias align asm assert auto break case cast cdouble cent cfloat const continue \" +\n                    \"debug default delegate delete deprecated export extern final finally function goto immutable \" +\n                    \"import inout invariant is lazy macro module new nothrow override package pragma private \" +\n                    \"protected public pure ref return shared short static super synchronized template this \" +\n                    \"throw typedef typeid typeof volatile __FILE__ __LINE__ __gshared __traits __vector __parameters \" +\n                    blockKeywords),\n    blockKeywords: words(blockKeywords),\n    builtin: words(\"bool byte char creal dchar double float idouble ifloat int ireal long real short ubyte \" +\n                   \"ucent uint ulong ushort wchar wstring void size_t sizediff_t\"),\n    atoms: words(\"exit failure success true false null\"),\n    hooks: {\n      \"@\": function(stream, _state) {\n        stream.eatWhile(/[\\w\\$_]/);\n        return \"meta\";\n      }\n    }\n  });\n\n});\n"],
  "mappings": ";;;;;;;;AAAA;AAAA;AAGA,KAAC,SAAS,KAAK;AACb,UAAI,OAAO,WAAW,YAAY,OAAO,UAAU;AACjD,YAAI,oBAA+B;AAAA,eAC5B,OAAO,UAAU,cAAc,OAAO;AAC7C,eAAO,CAAC,sBAAsB,GAAG,GAAG;AAAA;AAEpC,YAAI,UAAU;AAAA,IAClB,GAAG,SAASA,aAAY;AACxB;AAEA,MAAAA,YAAW,WAAW,KAAK,SAAS,QAAQ,cAAc;AACxD,YAAI,aAAa,OAAO,YACpB,sBAAsB,aAAa,uBAAuB,YAC1D,WAAW,aAAa,YAAY,CAAC,GACrC,UAAU,aAAa,WAAW,CAAC,GACnCC,iBAAgB,aAAa,iBAAiB,CAAC,GAC/C,QAAQ,aAAa,SAAS,CAAC,GAC/B,QAAQ,aAAa,SAAS,CAAC,GAC/B,mBAAmB,aAAa;AACpC,YAAI,iBAAiB;AAErB,YAAI;AAEJ,iBAAS,UAAU,QAAQ,OAAO;AAChC,cAAI,KAAK,OAAO,KAAK;AACrB,cAAI,MAAM,EAAE,GAAG;AACb,gBAAI,SAAS,MAAM,EAAE,EAAE,QAAQ,KAAK;AACpC,gBAAI,WAAW;AAAO,qBAAO;AAAA,UAC/B;AACA,cAAI,MAAM,OAAO,MAAM,OAAO,MAAM,KAAK;AACvC,kBAAM,WAAW,YAAY,EAAE;AAC/B,mBAAO,MAAM,SAAS,QAAQ,KAAK;AAAA,UACrC;AACA,cAAI,qBAAqB,KAAK,EAAE,GAAG;AACjC,sBAAU;AACV,mBAAO;AAAA,UACT;AACA,cAAI,KAAK,KAAK,EAAE,GAAG;AACjB,mBAAO,SAAS,QAAQ;AACxB,mBAAO;AAAA,UACT;AACA,cAAI,MAAM,KAAK;AACb,gBAAI,OAAO,IAAI,GAAG,GAAG;AACnB,oBAAM,WAAW;AACjB,qBAAO,mBAAmB,QAAQ,KAAK;AAAA,YACzC;AACA,gBAAI,OAAO,IAAI,GAAG,GAAG;AACnB,oBAAM,WAAW;AACjB,qBAAO,aAAa,QAAQ,KAAK;AAAA,YACnC;AACA,gBAAI,OAAO,IAAI,GAAG,GAAG;AACnB,qBAAO,UAAU;AACjB,qBAAO;AAAA,YACT;AAAA,UACF;AACA,cAAI,eAAe,KAAK,EAAE,GAAG;AAC3B,mBAAO,SAAS,cAAc;AAC9B,mBAAO;AAAA,UACT;AACA,iBAAO,SAAS,oBAAoB;AACpC,cAAI,MAAM,OAAO,QAAQ;AACzB,cAAI,SAAS,qBAAqB,GAAG,GAAG;AACtC,gBAAIA,eAAc,qBAAqB,GAAG;AAAG,wBAAU;AACvD,mBAAO;AAAA,UACT;AACA,cAAI,QAAQ,qBAAqB,GAAG,GAAG;AACrC,gBAAIA,eAAc,qBAAqB,GAAG;AAAG,wBAAU;AACvD,mBAAO;AAAA,UACT;AACA,cAAI,MAAM,qBAAqB,GAAG;AAAG,mBAAO;AAC5C,iBAAO;AAAA,QACT;AAEA,iBAAS,YAAY,OAAO;AAC1B,iBAAO,SAAS,QAAQ,OAAO;AAC7B,gBAAI,UAAU,OAAO,MAAM,MAAM;AACjC,oBAAQ,OAAO,OAAO,KAAK,MAAM,MAAM;AACrC,kBAAI,QAAQ,SAAS,CAAC,SAAS;AAAC,sBAAM;AAAM;AAAA,cAAM;AAClD,wBAAU,CAAC,WAAW,QAAQ;AAAA,YAChC;AACA,gBAAI,OAAO,EAAE,WAAW;AACtB,oBAAM,WAAW;AACnB,mBAAO;AAAA,UACT;AAAA,QACF;AAEA,iBAAS,aAAa,QAAQ,OAAO;AACnC,cAAI,WAAW,OAAO;AACtB,iBAAO,KAAK,OAAO,KAAK,GAAG;AACzB,gBAAI,MAAM,OAAO,UAAU;AACzB,oBAAM,WAAW;AACjB;AAAA,YACF;AACA,uBAAY,MAAM;AAAA,UACpB;AACA,iBAAO;AAAA,QACT;AAEA,iBAAS,mBAAmB,QAAQ,OAAO;AACzC,cAAI,WAAW,OAAO;AACtB,iBAAO,KAAK,OAAO,KAAK,GAAG;AACzB,gBAAI,MAAM,OAAO,UAAU;AACzB,oBAAM,WAAW;AACjB;AAAA,YACF;AACA,uBAAY,MAAM;AAAA,UACpB;AACA,iBAAO;AAAA,QACT;AAEA,iBAAS,QAAQ,UAAU,QAAQ,MAAM,OAAO,MAAM;AACpD,eAAK,WAAW;AAChB,eAAK,SAAS;AACd,eAAK,OAAO;AACZ,eAAK,QAAQ;AACb,eAAK,OAAO;AAAA,QACd;AACA,iBAAS,YAAY,OAAO,KAAK,MAAM;AACrC,cAAI,SAAS,MAAM;AACnB,cAAI,MAAM,WAAW,MAAM,QAAQ,QAAQ;AACzC,qBAAS,MAAM,QAAQ;AACzB,iBAAO,MAAM,UAAU,IAAI,QAAQ,QAAQ,KAAK,MAAM,MAAM,MAAM,OAAO;AAAA,QAC3E;AACA,iBAAS,WAAW,OAAO;AACzB,cAAI,IAAI,MAAM,QAAQ;AACtB,cAAI,KAAK,OAAO,KAAK,OAAO,KAAK;AAC/B,kBAAM,WAAW,MAAM,QAAQ;AACjC,iBAAO,MAAM,UAAU,MAAM,QAAQ;AAAA,QACvC;AAIA,eAAO;AAAA,UACL,YAAY,SAAS,YAAY;AAC/B,mBAAO;AAAA,cACL,UAAU;AAAA,cACV,SAAS,IAAI,SAAS,cAAc,KAAK,YAAY,GAAG,OAAO,KAAK;AAAA,cACpE,UAAU;AAAA,cACV,aAAa;AAAA,YACf;AAAA,UACF;AAAA,UAEA,OAAO,SAAS,QAAQ,OAAO;AAC7B,gBAAI,MAAM,MAAM;AAChB,gBAAI,OAAO,IAAI,GAAG;AAChB,kBAAI,IAAI,SAAS;AAAM,oBAAI,QAAQ;AACnC,oBAAM,WAAW,OAAO,YAAY;AACpC,oBAAM,cAAc;AAAA,YACtB;AACA,gBAAI,OAAO,SAAS;AAAG,qBAAO;AAC9B,sBAAU;AACV,gBAAI,SAAS,MAAM,YAAY,WAAW,QAAQ,KAAK;AACvD,gBAAI,SAAS,aAAa,SAAS;AAAQ,qBAAO;AAClD,gBAAI,IAAI,SAAS;AAAM,kBAAI,QAAQ;AAEnC,iBAAK,WAAW,OAAO,WAAW,OAAO,WAAW,QAAQ,IAAI,QAAQ;AAAa,yBAAW,KAAK;AAAA,qBAC5F,WAAW;AAAK,0BAAY,OAAO,OAAO,OAAO,GAAG,GAAG;AAAA,qBACvD,WAAW;AAAK,0BAAY,OAAO,OAAO,OAAO,GAAG,GAAG;AAAA,qBACvD,WAAW;AAAK,0BAAY,OAAO,OAAO,OAAO,GAAG,GAAG;AAAA,qBACvD,WAAW,KAAK;AACvB,qBAAO,IAAI,QAAQ;AAAa,sBAAM,WAAW,KAAK;AACtD,kBAAI,IAAI,QAAQ;AAAK,sBAAM,WAAW,KAAK;AAC3C,qBAAO,IAAI,QAAQ;AAAa,sBAAM,WAAW,KAAK;AAAA,YACxD,WACS,WAAW,IAAI;AAAM,yBAAW,KAAK;AAAA,sBACnC,IAAI,QAAQ,OAAO,IAAI,QAAQ,UAAU,WAAW,OAAS,IAAI,QAAQ,eAAe,WAAW;AAC5G,0BAAY,OAAO,OAAO,OAAO,GAAG,WAAW;AACjD,kBAAM,cAAc;AACpB,mBAAO;AAAA,UACT;AAAA,UAEA,QAAQ,SAAS,OAAO,WAAW;AACjC,gBAAI,MAAM,YAAY,aAAa,MAAM,YAAY;AAAM,qBAAOD,YAAW;AAC7E,gBAAI,MAAM,MAAM,SAAS,YAAY,aAAa,UAAU,OAAO,CAAC;AACpE,gBAAI,IAAI,QAAQ,eAAe,aAAa;AAAK,oBAAM,IAAI;AAC3D,gBAAI,UAAU,aAAa,IAAI;AAC/B,gBAAI,IAAI,QAAQ;AAAa,qBAAO,IAAI,YAAY,aAAa,MAAM,IAAI;AAAA,qBAClE,IAAI;AAAO,qBAAO,IAAI,UAAU,UAAU,IAAI;AAAA;AAClD,qBAAO,IAAI,YAAY,UAAU,IAAI;AAAA,UAC5C;AAAA,UAEA,eAAe;AAAA,UACf,mBAAmB;AAAA,UACnB,iBAAiB;AAAA,UACjB,sBAAsB;AAAA,UACtB,aAAa;AAAA,UACb,MAAM;AAAA,QACR;AAAA,MACF,CAAC;AAEC,eAAS,MAAM,KAAK;AAClB,YAAI,MAAM,CAAC,GAAGE,SAAQ,IAAI,MAAM,GAAG;AACnC,iBAAS,IAAI,GAAG,IAAIA,OAAM,QAAQ,EAAE;AAAG,cAAIA,OAAM,CAAC,CAAC,IAAI;AACvD,eAAO;AAAA,MACT;AAEA,UAAI,gBAAgB;AAGpB,MAAAF,YAAW,WAAW,YAAY;AAAA,QAChC,MAAM;AAAA,QACN,UAAU,MAAM,wcAKA,aAAa;AAAA,QAC7B,eAAe,MAAM,aAAa;AAAA,QAClC,SAAS,MAAM,qJAC8D;AAAA,QAC7E,OAAO,MAAM,sCAAsC;AAAA,QACnD,OAAO;AAAA,UACL,KAAK,SAAS,QAAQ,QAAQ;AAC5B,mBAAO,SAAS,SAAS;AACzB,mBAAO;AAAA,UACT;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IAEH,CAAC;AAAA;AAAA;",
  "names": ["CodeMirror", "blockKeywords", "words"]
}
