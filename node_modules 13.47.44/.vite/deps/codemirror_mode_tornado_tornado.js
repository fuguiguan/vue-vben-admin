import {
  require_overlay
} from "./chunk-LBFNHCCJ.js";
import {
  require_htmlmixed
} from "./chunk-ELS4F7HZ.js";
import "./chunk-OJPT6LJ2.js";
import "./chunk-5KXNPQ7O.js";
import "./chunk-R6EW7IRG.js";
import {
  require_codemirror
} from "./chunk-GI5J7NWS.js";
import {
  __commonJS
} from "./chunk-WGAPYIUP.js";

// node_modules/.pnpm/codemirror@5.65.16/node_modules/codemirror/mode/tornado/tornado.js
var require_tornado = __commonJS({
  "node_modules/.pnpm/codemirror@5.65.16/node_modules/codemirror/mode/tornado/tornado.js"(exports, module) {
    (function(mod) {
      if (typeof exports == "object" && typeof module == "object")
        mod(
          require_codemirror(),
          require_htmlmixed(),
          require_overlay()
        );
      else if (typeof define == "function" && define.amd)
        define([
          "../../lib/codemirror",
          "../htmlmixed/htmlmixed",
          "../../addon/mode/overlay"
        ], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("tornado:inner", function() {
        var keywords = [
          "and",
          "as",
          "assert",
          "autoescape",
          "block",
          "break",
          "class",
          "comment",
          "context",
          "continue",
          "datetime",
          "def",
          "del",
          "elif",
          "else",
          "end",
          "escape",
          "except",
          "exec",
          "extends",
          "false",
          "finally",
          "for",
          "from",
          "global",
          "if",
          "import",
          "in",
          "include",
          "is",
          "json_encode",
          "lambda",
          "length",
          "linkify",
          "load",
          "module",
          "none",
          "not",
          "or",
          "pass",
          "print",
          "put",
          "raise",
          "raw",
          "return",
          "self",
          "set",
          "squeeze",
          "super",
          "true",
          "try",
          "url_escape",
          "while",
          "with",
          "without",
          "xhtml_escape",
          "yield"
        ];
        keywords = new RegExp("^((" + keywords.join(")|(") + "))\\b");
        function tokenBase(stream, state) {
          stream.eatWhile(/[^\{]/);
          var ch = stream.next();
          if (ch == "{") {
            if (ch = stream.eat(/\{|%|#/)) {
              state.tokenize = inTag(ch);
              return "tag";
            }
          }
        }
        function inTag(close) {
          if (close == "{") {
            close = "}";
          }
          return function(stream, state) {
            var ch = stream.next();
            if (ch == close && stream.eat("}")) {
              state.tokenize = tokenBase;
              return "tag";
            }
            if (stream.match(keywords)) {
              return "keyword";
            }
            return close == "#" ? "comment" : "string";
          };
        }
        return {
          startState: function() {
            return { tokenize: tokenBase };
          },
          token: function(stream, state) {
            return state.tokenize(stream, state);
          }
        };
      });
      CodeMirror2.defineMode("tornado", function(config) {
        var htmlBase = CodeMirror2.getMode(config, "text/html");
        var tornadoInner = CodeMirror2.getMode(config, "tornado:inner");
        return CodeMirror2.overlayMode(htmlBase, tornadoInner);
      });
      CodeMirror2.defineMIME("text/x-tornado", "tornado");
    });
  }
});
export default require_tornado();
//# sourceMappingURL=codemirror_mode_tornado_tornado.js.map
