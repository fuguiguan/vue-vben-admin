{
  "version": 3,
  "sources": ["../../.pnpm/codemirror@5.65.16/node_modules/codemirror/mode/pegjs/pegjs.js"],
  "sourcesContent": ["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../javascript/javascript\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../javascript/javascript\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"pegjs\", function (config) {\n  var jsMode = CodeMirror.getMode(config, \"javascript\");\n\n  function identifier(stream) {\n    return stream.match(/^[a-zA-Z_][a-zA-Z0-9_]*/);\n  }\n\n  return {\n    startState: function () {\n      return {\n        inString: false,\n        stringType: null,\n        inComment: false,\n        inCharacterClass: false,\n        braced: 0,\n        lhs: true,\n        localState: null\n      };\n    },\n    token: function (stream, state) {\n      //check for state changes\n      if (!state.inString && !state.inComment && ((stream.peek() == '\"') || (stream.peek() == \"'\"))) {\n        state.stringType = stream.peek();\n        stream.next(); // Skip quote\n        state.inString = true; // Update state\n      }\n      if (!state.inString && !state.inComment && stream.match('/*')) {\n        state.inComment = true;\n      }\n\n      if (state.inString) {\n        while (state.inString && !stream.eol()) {\n          if (stream.peek() === state.stringType) {\n            stream.next(); // Skip quote\n            state.inString = false; // Clear flag\n          } else if (stream.peek() === '\\\\') {\n            stream.next();\n            stream.next();\n          } else {\n            stream.match(/^.[^\\\\\\\"\\']*/);\n          }\n        }\n        return state.lhs ? \"property string\" : \"string\"; // Token style\n      } else if (state.inComment) {\n        while (state.inComment && !stream.eol()) {\n          if (stream.match('*/')) {\n            state.inComment = false; // Clear flag\n          } else {\n            stream.match(/^.[^\\*]*/);\n          }\n        }\n        return \"comment\";\n      } else if (state.inCharacterClass) {\n          while (state.inCharacterClass && !stream.eol()) {\n            if (!(stream.match(/^[^\\]\\\\]+/) || stream.match(/^\\\\./))) {\n              state.inCharacterClass = false;\n            }\n          }\n      } else if (stream.peek() === '[') {\n        stream.next();\n        state.inCharacterClass = true;\n        return 'bracket';\n      } else if (stream.match('//')) {\n        stream.skipToEnd();\n        return \"comment\";\n      } else if (state.braced || stream.peek() === '{') {\n        if (state.localState === null) {\n          state.localState = CodeMirror.startState(jsMode);\n        }\n        var token = jsMode.token(stream, state.localState);\n        var text = stream.current();\n        if (!token) {\n          for (var i = 0; i < text.length; i++) {\n            if (text[i] === '{') {\n              state.braced++;\n            } else if (text[i] === '}') {\n              state.braced--;\n            }\n          };\n        }\n        return token;\n      } else if (identifier(stream)) {\n        if (stream.peek() === ':') {\n          return 'variable';\n        }\n        return 'variable-2';\n      } else if (['[', ']', '(', ')'].indexOf(stream.peek()) != -1) {\n        stream.next();\n        return 'bracket';\n      } else if (!stream.eatSpace()) {\n        stream.next();\n      }\n      return null;\n    }\n  };\n}, \"javascript\");\n\n});\n"],
  "mappings": ";;;;;;;;;;;AAAA;AAAA;AAGA,KAAC,SAAS,KAAK;AACb,UAAI,OAAO,WAAW,YAAY,OAAO,UAAU;AACjD,YAAI,sBAAiC,oBAAmC;AAAA,eACjE,OAAO,UAAU,cAAc,OAAO;AAC7C,eAAO,CAAC,wBAAwB,0BAA0B,GAAG,GAAG;AAAA;AAEhE,YAAI,UAAU;AAAA,IAClB,GAAG,SAASA,aAAY;AACxB;AAEA,MAAAA,YAAW,WAAW,SAAS,SAAU,QAAQ;AAC/C,YAAI,SAASA,YAAW,QAAQ,QAAQ,YAAY;AAEpD,iBAAS,WAAW,QAAQ;AAC1B,iBAAO,OAAO,MAAM,yBAAyB;AAAA,QAC/C;AAEA,eAAO;AAAA,UACL,YAAY,WAAY;AACtB,mBAAO;AAAA,cACL,UAAU;AAAA,cACV,YAAY;AAAA,cACZ,WAAW;AAAA,cACX,kBAAkB;AAAA,cAClB,QAAQ;AAAA,cACR,KAAK;AAAA,cACL,YAAY;AAAA,YACd;AAAA,UACF;AAAA,UACA,OAAO,SAAU,QAAQ,OAAO;AAE9B,gBAAI,CAAC,MAAM,YAAY,CAAC,MAAM,cAAe,OAAO,KAAK,KAAK,OAAS,OAAO,KAAK,KAAK,MAAO;AAC7F,oBAAM,aAAa,OAAO,KAAK;AAC/B,qBAAO,KAAK;AACZ,oBAAM,WAAW;AAAA,YACnB;AACA,gBAAI,CAAC,MAAM,YAAY,CAAC,MAAM,aAAa,OAAO,MAAM,IAAI,GAAG;AAC7D,oBAAM,YAAY;AAAA,YACpB;AAEA,gBAAI,MAAM,UAAU;AAClB,qBAAO,MAAM,YAAY,CAAC,OAAO,IAAI,GAAG;AACtC,oBAAI,OAAO,KAAK,MAAM,MAAM,YAAY;AACtC,yBAAO,KAAK;AACZ,wBAAM,WAAW;AAAA,gBACnB,WAAW,OAAO,KAAK,MAAM,MAAM;AACjC,yBAAO,KAAK;AACZ,yBAAO,KAAK;AAAA,gBACd,OAAO;AACL,yBAAO,MAAM,cAAc;AAAA,gBAC7B;AAAA,cACF;AACA,qBAAO,MAAM,MAAM,oBAAoB;AAAA,YACzC,WAAW,MAAM,WAAW;AAC1B,qBAAO,MAAM,aAAa,CAAC,OAAO,IAAI,GAAG;AACvC,oBAAI,OAAO,MAAM,IAAI,GAAG;AACtB,wBAAM,YAAY;AAAA,gBACpB,OAAO;AACL,yBAAO,MAAM,UAAU;AAAA,gBACzB;AAAA,cACF;AACA,qBAAO;AAAA,YACT,WAAW,MAAM,kBAAkB;AAC/B,qBAAO,MAAM,oBAAoB,CAAC,OAAO,IAAI,GAAG;AAC9C,oBAAI,EAAE,OAAO,MAAM,WAAW,KAAK,OAAO,MAAM,MAAM,IAAI;AACxD,wBAAM,mBAAmB;AAAA,gBAC3B;AAAA,cACF;AAAA,YACJ,WAAW,OAAO,KAAK,MAAM,KAAK;AAChC,qBAAO,KAAK;AACZ,oBAAM,mBAAmB;AACzB,qBAAO;AAAA,YACT,WAAW,OAAO,MAAM,IAAI,GAAG;AAC7B,qBAAO,UAAU;AACjB,qBAAO;AAAA,YACT,WAAW,MAAM,UAAU,OAAO,KAAK,MAAM,KAAK;AAChD,kBAAI,MAAM,eAAe,MAAM;AAC7B,sBAAM,aAAaA,YAAW,WAAW,MAAM;AAAA,cACjD;AACA,kBAAI,QAAQ,OAAO,MAAM,QAAQ,MAAM,UAAU;AACjD,kBAAI,OAAO,OAAO,QAAQ;AAC1B,kBAAI,CAAC,OAAO;AACV,yBAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AACpC,sBAAI,KAAK,CAAC,MAAM,KAAK;AACnB,0BAAM;AAAA,kBACR,WAAW,KAAK,CAAC,MAAM,KAAK;AAC1B,0BAAM;AAAA,kBACR;AAAA,gBACF;AAAC;AAAA,cACH;AACA,qBAAO;AAAA,YACT,WAAW,WAAW,MAAM,GAAG;AAC7B,kBAAI,OAAO,KAAK,MAAM,KAAK;AACzB,uBAAO;AAAA,cACT;AACA,qBAAO;AAAA,YACT,WAAW,CAAC,KAAK,KAAK,KAAK,GAAG,EAAE,QAAQ,OAAO,KAAK,CAAC,KAAK,IAAI;AAC5D,qBAAO,KAAK;AACZ,qBAAO;AAAA,YACT,WAAW,CAAC,OAAO,SAAS,GAAG;AAC7B,qBAAO,KAAK;AAAA,YACd;AACA,mBAAO;AAAA,UACT;AAAA,QACF;AAAA,MACF,GAAG,YAAY;AAAA,IAEf,CAAC;AAAA;AAAA;",
  "names": ["CodeMirror"]
}
