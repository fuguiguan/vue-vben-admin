{
  "version": 3,
  "sources": ["../../.pnpm/codemirror@5.65.16/node_modules/codemirror/mode/brainfuck/brainfuck.js"],
  "sourcesContent": ["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n// Brainfuck mode created by Michael Kaminsky https://github.com/mkaminsky11\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    mod(require(\"../../lib/codemirror\"))\n  else if (typeof define == \"function\" && define.amd)\n    define([\"../../lib/codemirror\"], mod)\n  else\n    mod(CodeMirror)\n})(function(CodeMirror) {\n  \"use strict\"\n  var reserve = \"><+-.,[]\".split(\"\");\n  /*\n  comments can be either:\n  placed behind lines\n\n        +++    this is a comment\n\n  where reserved characters cannot be used\n  or in a loop\n  [\n    this is ok to use [ ] and stuff\n  ]\n  or preceded by #\n  */\n  CodeMirror.defineMode(\"brainfuck\", function() {\n    return {\n      startState: function() {\n        return {\n          commentLine: false,\n          left: 0,\n          right: 0,\n          commentLoop: false\n        }\n      },\n      token: function(stream, state) {\n        if (stream.eatSpace()) return null\n        if(stream.sol()){\n          state.commentLine = false;\n        }\n        var ch = stream.next().toString();\n        if(reserve.indexOf(ch) !== -1){\n          if(state.commentLine === true){\n            if(stream.eol()){\n              state.commentLine = false;\n            }\n            return \"comment\";\n          }\n          if(ch === \"]\" || ch === \"[\"){\n            if(ch === \"[\"){\n              state.left++;\n            }\n            else{\n              state.right++;\n            }\n            return \"bracket\";\n          }\n          else if(ch === \"+\" || ch === \"-\"){\n            return \"keyword\";\n          }\n          else if(ch === \"<\" || ch === \">\"){\n            return \"atom\";\n          }\n          else if(ch === \".\" || ch === \",\"){\n            return \"def\";\n          }\n        }\n        else{\n          state.commentLine = true;\n          if(stream.eol()){\n            state.commentLine = false;\n          }\n          return \"comment\";\n        }\n        if(stream.eol()){\n          state.commentLine = false;\n        }\n      }\n    };\n  });\nCodeMirror.defineMIME(\"text/x-brainfuck\",\"brainfuck\")\n});\n"],
  "mappings": ";;;;;;;;AAAA;AAAA;AAKA,KAAC,SAAS,KAAK;AACb,UAAI,OAAO,WAAW,YAAY,OAAO,UAAU;AACjD,YAAI,oBAA+B;AAAA,eAC5B,OAAO,UAAU,cAAc,OAAO;AAC7C,eAAO,CAAC,sBAAsB,GAAG,GAAG;AAAA;AAEpC,YAAI,UAAU;AAAA,IAClB,GAAG,SAASA,aAAY;AACtB;AACA,UAAI,UAAU,WAAW,MAAM,EAAE;AAcjC,MAAAA,YAAW,WAAW,aAAa,WAAW;AAC5C,eAAO;AAAA,UACL,YAAY,WAAW;AACrB,mBAAO;AAAA,cACL,aAAa;AAAA,cACb,MAAM;AAAA,cACN,OAAO;AAAA,cACP,aAAa;AAAA,YACf;AAAA,UACF;AAAA,UACA,OAAO,SAAS,QAAQ,OAAO;AAC7B,gBAAI,OAAO,SAAS;AAAG,qBAAO;AAC9B,gBAAG,OAAO,IAAI,GAAE;AACd,oBAAM,cAAc;AAAA,YACtB;AACA,gBAAI,KAAK,OAAO,KAAK,EAAE,SAAS;AAChC,gBAAG,QAAQ,QAAQ,EAAE,MAAM,IAAG;AAC5B,kBAAG,MAAM,gBAAgB,MAAK;AAC5B,oBAAG,OAAO,IAAI,GAAE;AACd,wBAAM,cAAc;AAAA,gBACtB;AACA,uBAAO;AAAA,cACT;AACA,kBAAG,OAAO,OAAO,OAAO,KAAI;AAC1B,oBAAG,OAAO,KAAI;AACZ,wBAAM;AAAA,gBACR,OACI;AACF,wBAAM;AAAA,gBACR;AACA,uBAAO;AAAA,cACT,WACQ,OAAO,OAAO,OAAO,KAAI;AAC/B,uBAAO;AAAA,cACT,WACQ,OAAO,OAAO,OAAO,KAAI;AAC/B,uBAAO;AAAA,cACT,WACQ,OAAO,OAAO,OAAO,KAAI;AAC/B,uBAAO;AAAA,cACT;AAAA,YACF,OACI;AACF,oBAAM,cAAc;AACpB,kBAAG,OAAO,IAAI,GAAE;AACd,sBAAM,cAAc;AAAA,cACtB;AACA,qBAAO;AAAA,YACT;AACA,gBAAG,OAAO,IAAI,GAAE;AACd,oBAAM,cAAc;AAAA,YACtB;AAAA,UACF;AAAA,QACF;AAAA,MACF,CAAC;AACH,MAAAA,YAAW,WAAW,oBAAmB,WAAW;AAAA,IACpD,CAAC;AAAA;AAAA;",
  "names": ["CodeMirror"]
}
