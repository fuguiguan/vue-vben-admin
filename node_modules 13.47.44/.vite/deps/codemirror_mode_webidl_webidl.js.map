{
  "version": 3,
  "sources": ["../../.pnpm/codemirror@5.65.16/node_modules/codemirror/mode/webidl/webidl.js"],
  "sourcesContent": ["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nfunction wordRegexp(words) {\n  return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n};\n\nvar builtinArray = [\n  \"Clamp\",\n  \"Constructor\",\n  \"EnforceRange\",\n  \"Exposed\",\n  \"ImplicitThis\",\n  \"Global\", \"PrimaryGlobal\",\n  \"LegacyArrayClass\",\n  \"LegacyUnenumerableNamedProperties\",\n  \"LenientThis\",\n  \"NamedConstructor\",\n  \"NewObject\",\n  \"NoInterfaceObject\",\n  \"OverrideBuiltins\",\n  \"PutForwards\",\n  \"Replaceable\",\n  \"SameObject\",\n  \"TreatNonObjectAsNull\",\n  \"TreatNullAs\",\n    \"EmptyString\",\n  \"Unforgeable\",\n  \"Unscopeable\"\n];\nvar builtins = wordRegexp(builtinArray);\n\nvar typeArray = [\n  \"unsigned\", \"short\", \"long\",                  // UnsignedIntegerType\n  \"unrestricted\", \"float\", \"double\",            // UnrestrictedFloatType\n  \"boolean\", \"byte\", \"octet\",                   // Rest of PrimitiveType\n  \"Promise\",                                    // PromiseType\n  \"ArrayBuffer\", \"DataView\", \"Int8Array\", \"Int16Array\", \"Int32Array\",\n  \"Uint8Array\", \"Uint16Array\", \"Uint32Array\", \"Uint8ClampedArray\",\n  \"Float32Array\", \"Float64Array\",               // BufferRelatedType\n  \"ByteString\", \"DOMString\", \"USVString\", \"sequence\", \"object\", \"RegExp\",\n  \"Error\", \"DOMException\", \"FrozenArray\",       // Rest of NonAnyType\n  \"any\",                                        // Rest of SingleType\n  \"void\"                                        // Rest of ReturnType\n];\nvar types = wordRegexp(typeArray);\n\nvar keywordArray = [\n  \"attribute\", \"callback\", \"const\", \"deleter\", \"dictionary\", \"enum\", \"getter\",\n  \"implements\", \"inherit\", \"interface\", \"iterable\", \"legacycaller\", \"maplike\",\n  \"partial\", \"required\", \"serializer\", \"setlike\", \"setter\", \"static\",\n  \"stringifier\", \"typedef\",                     // ArgumentNameKeyword except\n                                                // \"unrestricted\"\n  \"optional\", \"readonly\", \"or\"\n];\nvar keywords = wordRegexp(keywordArray);\n\nvar atomArray = [\n  \"true\", \"false\",                              // BooleanLiteral\n  \"Infinity\", \"NaN\",                            // FloatLiteral\n  \"null\"                                        // Rest of ConstValue\n];\nvar atoms = wordRegexp(atomArray);\n\nCodeMirror.registerHelper(\"hintWords\", \"webidl\",\n    builtinArray.concat(typeArray).concat(keywordArray).concat(atomArray));\n\nvar startDefArray = [\"callback\", \"dictionary\", \"enum\", \"interface\"];\nvar startDefs = wordRegexp(startDefArray);\n\nvar endDefArray = [\"typedef\"];\nvar endDefs = wordRegexp(endDefArray);\n\nvar singleOperators = /^[:<=>?]/;\nvar integers = /^-?([1-9][0-9]*|0[Xx][0-9A-Fa-f]+|0[0-7]*)/;\nvar floats = /^-?(([0-9]+\\.[0-9]*|[0-9]*\\.[0-9]+)([Ee][+-]?[0-9]+)?|[0-9]+[Ee][+-]?[0-9]+)/;\nvar identifiers = /^_?[A-Za-z][0-9A-Z_a-z-]*/;\nvar identifiersEnd = /^_?[A-Za-z][0-9A-Z_a-z-]*(?=\\s*;)/;\nvar strings = /^\"[^\"]*\"/;\nvar multilineComments = /^\\/\\*.*?\\*\\//;\nvar multilineCommentsStart = /^\\/\\*.*/;\nvar multilineCommentsEnd = /^.*?\\*\\//;\n\nfunction readToken(stream, state) {\n  // whitespace\n  if (stream.eatSpace()) return null;\n\n  // comment\n  if (state.inComment) {\n    if (stream.match(multilineCommentsEnd)) {\n      state.inComment = false;\n      return \"comment\";\n    }\n    stream.skipToEnd();\n    return \"comment\";\n  }\n  if (stream.match(\"//\")) {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n  if (stream.match(multilineComments)) return \"comment\";\n  if (stream.match(multilineCommentsStart)) {\n    state.inComment = true;\n    return \"comment\";\n  }\n\n  // integer and float\n  if (stream.match(/^-?[0-9\\.]/, false)) {\n    if (stream.match(integers) || stream.match(floats)) return \"number\";\n  }\n\n  // string\n  if (stream.match(strings)) return \"string\";\n\n  // identifier\n  if (state.startDef && stream.match(identifiers)) return \"def\";\n\n  if (state.endDef && stream.match(identifiersEnd)) {\n    state.endDef = false;\n    return \"def\";\n  }\n\n  if (stream.match(keywords)) return \"keyword\";\n\n  if (stream.match(types)) {\n    var lastToken = state.lastToken;\n    var nextToken = (stream.match(/^\\s*(.+?)\\b/, false) || [])[1];\n\n    if (lastToken === \":\" || lastToken === \"implements\" ||\n        nextToken === \"implements\" || nextToken === \"=\") {\n      // Used as identifier\n      return \"builtin\";\n    } else {\n      // Used as type\n      return \"variable-3\";\n    }\n  }\n\n  if (stream.match(builtins)) return \"builtin\";\n  if (stream.match(atoms)) return \"atom\";\n  if (stream.match(identifiers)) return \"variable\";\n\n  // other\n  if (stream.match(singleOperators)) return \"operator\";\n\n  // unrecognized\n  stream.next();\n  return null;\n};\n\nCodeMirror.defineMode(\"webidl\", function() {\n  return {\n    startState: function() {\n      return {\n        // Is in multiline comment\n        inComment: false,\n        // Last non-whitespace, matched token\n        lastToken: \"\",\n        // Next token is a definition\n        startDef: false,\n        // Last token of the statement is a definition\n        endDef: false\n      };\n    },\n    token: function(stream, state) {\n      var style = readToken(stream, state);\n\n      if (style) {\n        var cur = stream.current();\n        state.lastToken = cur;\n        if (style === \"keyword\") {\n          state.startDef = startDefs.test(cur);\n          state.endDef = state.endDef || endDefs.test(cur);\n        } else {\n          state.startDef = false;\n        }\n      }\n\n      return style;\n    }\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-webidl\", \"webidl\");\n});\n"],
  "mappings": "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",
  "names": ["CodeMirror"]
}
