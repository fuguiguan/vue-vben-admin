{
  "version": 3,
  "sources": ["../../.pnpm/codemirror@5.65.16/node_modules/codemirror/mode/sieve/sieve.js"],
  "sourcesContent": ["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"sieve\", function(config) {\n  function words(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n\n  var keywords = words(\"if elsif else stop require\");\n  var atoms = words(\"true false not\");\n  var indentUnit = config.indentUnit;\n\n  function tokenBase(stream, state) {\n\n    var ch = stream.next();\n    if (ch == \"/\" && stream.eat(\"*\")) {\n      state.tokenize = tokenCComment;\n      return tokenCComment(stream, state);\n    }\n\n    if (ch === '#') {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n\n    if (ch == \"\\\"\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    }\n\n    if (ch == \"(\") {\n      state._indent.push(\"(\");\n      // add virtual angel wings so that editor behaves...\n      // ...more sane in case of broken brackets\n      state._indent.push(\"{\");\n      return null;\n    }\n\n    if (ch === \"{\") {\n      state._indent.push(\"{\");\n      return null;\n    }\n\n    if (ch == \")\")  {\n      state._indent.pop();\n      state._indent.pop();\n    }\n\n    if (ch === \"}\") {\n      state._indent.pop();\n      return null;\n    }\n\n    if (ch == \",\")\n      return null;\n\n    if (ch == \";\")\n      return null;\n\n\n    if (/[{}\\(\\),;]/.test(ch))\n      return null;\n\n    // 1*DIGIT \"K\" / \"M\" / \"G\"\n    if (/\\d/.test(ch)) {\n      stream.eatWhile(/[\\d]/);\n      stream.eat(/[KkMmGg]/);\n      return \"number\";\n    }\n\n    // \":\" (ALPHA / \"_\") *(ALPHA / DIGIT / \"_\")\n    if (ch == \":\") {\n      stream.eatWhile(/[a-zA-Z_]/);\n      stream.eatWhile(/[a-zA-Z0-9_]/);\n\n      return \"operator\";\n    }\n\n    stream.eatWhile(/\\w/);\n    var cur = stream.current();\n\n    // \"text:\" *(SP / HTAB) (hash-comment / CRLF)\n    // *(multiline-literal / multiline-dotstart)\n    // \".\" CRLF\n    if ((cur == \"text\") && stream.eat(\":\"))\n    {\n      state.tokenize = tokenMultiLineString;\n      return \"string\";\n    }\n\n    if (keywords.propertyIsEnumerable(cur))\n      return \"keyword\";\n\n    if (atoms.propertyIsEnumerable(cur))\n      return \"atom\";\n\n    return null;\n  }\n\n  function tokenMultiLineString(stream, state)\n  {\n    state._multiLineString = true;\n    // the first line is special it may contain a comment\n    if (!stream.sol()) {\n      stream.eatSpace();\n\n      if (stream.peek() == \"#\") {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n\n      stream.skipToEnd();\n      return \"string\";\n    }\n\n    if ((stream.next() == \".\")  && (stream.eol()))\n    {\n      state._multiLineString = false;\n      state.tokenize = tokenBase;\n    }\n\n    return \"string\";\n  }\n\n  function tokenCComment(stream, state) {\n    var maybeEnd = false, ch;\n    while ((ch = stream.next()) != null) {\n      if (maybeEnd && ch == \"/\") {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, ch;\n      while ((ch = stream.next()) != null) {\n        if (ch == quote && !escaped)\n          break;\n        escaped = !escaped && ch == \"\\\\\";\n      }\n      if (!escaped) state.tokenize = tokenBase;\n      return \"string\";\n    };\n  }\n\n  return {\n    startState: function(base) {\n      return {tokenize: tokenBase,\n              baseIndent: base || 0,\n              _indent: []};\n    },\n\n    token: function(stream, state) {\n      if (stream.eatSpace())\n        return null;\n\n      return (state.tokenize || tokenBase)(stream, state);\n    },\n\n    indent: function(state, _textAfter) {\n      var length = state._indent.length;\n      if (_textAfter && (_textAfter[0] == \"}\"))\n        length--;\n\n      if (length <0)\n        length = 0;\n\n      return length * indentUnit;\n    },\n\n    electricChars: \"}\"\n  };\n});\n\nCodeMirror.defineMIME(\"application/sieve\", \"sieve\");\n\n});\n"],
  "mappings": "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",
  "names": ["CodeMirror", "words"]
}
