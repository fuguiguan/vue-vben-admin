{
  "version": 3,
  "sources": ["../../.pnpm/codemirror@5.65.16/node_modules/codemirror/mode/cypher/cypher.js"],
  "sourcesContent": ["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n// By the Neo4j Team and contributors.\n// https://github.com/neo4j-contrib/CodeMirror\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n  var wordRegexp = function(words) {\n    return new RegExp(\"^(?:\" + words.join(\"|\") + \")$\", \"i\");\n  };\n\n  CodeMirror.defineMode(\"cypher\", function(config) {\n    var tokenBase = function(stream/*, state*/) {\n      curPunc = null\n      var ch = stream.next();\n      if (ch ==='\"') {\n        stream.match(/^[^\"]*\"/);\n        return \"string\";\n      }\n      if (ch === \"'\") {\n        stream.match(/^[^']*'/);\n        return \"string\";\n      }\n      if (/[{}\\(\\),\\.;\\[\\]]/.test(ch)) {\n        curPunc = ch;\n        return \"node\";\n      } else if (ch === \"/\" && stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      } else if (operatorChars.test(ch)) {\n        stream.eatWhile(operatorChars);\n        return null;\n      } else {\n        stream.eatWhile(/[_\\w\\d]/);\n        if (stream.eat(\":\")) {\n          stream.eatWhile(/[\\w\\d_\\-]/);\n          return \"atom\";\n        }\n        var word = stream.current();\n        if (funcs.test(word)) return \"builtin\";\n        if (preds.test(word)) return \"def\";\n        if (keywords.test(word) || systemKeywords.test(word)) return \"keyword\";\n        return \"variable\";\n      }\n    };\n    var pushContext = function(state, type, col) {\n      return state.context = {\n        prev: state.context,\n        indent: state.indent,\n        col: col,\n        type: type\n      };\n    };\n    var popContext = function(state) {\n      state.indent = state.context.indent;\n      return state.context = state.context.prev;\n    };\n    var indentUnit = config.indentUnit;\n    var curPunc;\n    var funcs = wordRegexp([\"abs\", \"acos\", \"allShortestPaths\", \"asin\", \"atan\", \"atan2\", \"avg\", \"ceil\", \"coalesce\", \"collect\", \"cos\", \"cot\", \"count\", \"degrees\", \"e\", \"endnode\", \"exp\", \"extract\", \"filter\", \"floor\", \"haversin\", \"head\", \"id\", \"keys\", \"labels\", \"last\", \"left\", \"length\", \"log\", \"log10\", \"lower\", \"ltrim\", \"max\", \"min\", \"node\", \"nodes\", \"percentileCont\", \"percentileDisc\", \"pi\", \"radians\", \"rand\", \"range\", \"reduce\", \"rel\", \"relationship\", \"relationships\", \"replace\", \"reverse\", \"right\", \"round\", \"rtrim\", \"shortestPath\", \"sign\", \"sin\", \"size\", \"split\", \"sqrt\", \"startnode\", \"stdev\", \"stdevp\", \"str\", \"substring\", \"sum\", \"tail\", \"tan\", \"timestamp\", \"toFloat\", \"toInt\", \"toString\", \"trim\", \"type\", \"upper\"]);\n    var preds = wordRegexp([\"all\", \"and\", \"any\", \"contains\", \"exists\", \"has\", \"in\", \"none\", \"not\", \"or\", \"single\", \"xor\"]);\n    var keywords = wordRegexp([\"as\", \"asc\", \"ascending\", \"assert\", \"by\", \"case\", \"commit\", \"constraint\", \"create\", \"csv\", \"cypher\", \"delete\", \"desc\", \"descending\", \"detach\", \"distinct\", \"drop\", \"else\", \"end\", \"ends\", \"explain\", \"false\", \"fieldterminator\", \"foreach\", \"from\", \"headers\", \"in\", \"index\", \"is\", \"join\", \"limit\", \"load\", \"match\", \"merge\", \"null\", \"on\", \"optional\", \"order\", \"periodic\", \"profile\", \"remove\", \"return\", \"scan\", \"set\", \"skip\", \"start\", \"starts\", \"then\", \"true\", \"union\", \"unique\", \"unwind\", \"using\", \"when\", \"where\", \"with\", \"call\", \"yield\"]);\n    var systemKeywords = wordRegexp([\"access\", \"active\", \"assign\", \"all\", \"alter\", \"as\", \"catalog\", \"change\", \"copy\", \"create\", \"constraint\", \"constraints\", \"current\", \"database\", \"databases\", \"dbms\", \"default\", \"deny\", \"drop\", \"element\", \"elements\", \"exists\", \"from\", \"grant\", \"graph\", \"graphs\", \"if\", \"index\", \"indexes\", \"label\", \"labels\", \"management\", \"match\", \"name\", \"names\", \"new\", \"node\", \"nodes\", \"not\", \"of\", \"on\", \"or\", \"password\", \"populated\", \"privileges\", \"property\", \"read\", \"relationship\", \"relationships\", \"remove\", \"replace\", \"required\", \"revoke\", \"role\", \"roles\", \"set\", \"show\", \"start\", \"status\", \"stop\", \"suspended\", \"to\", \"traverse\", \"type\", \"types\", \"user\", \"users\", \"with\", \"write\"]);\n    var operatorChars = /[*+\\-<>=&|~%^]/;\n\n    return {\n      startState: function(/*base*/) {\n        return {\n          tokenize: tokenBase,\n          context: null,\n          indent: 0,\n          col: 0\n        };\n      },\n      token: function(stream, state) {\n        if (stream.sol()) {\n          if (state.context && (state.context.align == null)) {\n            state.context.align = false;\n          }\n          state.indent = stream.indentation();\n        }\n        if (stream.eatSpace()) {\n          return null;\n        }\n        var style = state.tokenize(stream, state);\n        if (style !== \"comment\" && state.context && (state.context.align == null) && state.context.type !== \"pattern\") {\n          state.context.align = true;\n        }\n        if (curPunc === \"(\") {\n          pushContext(state, \")\", stream.column());\n        } else if (curPunc === \"[\") {\n          pushContext(state, \"]\", stream.column());\n        } else if (curPunc === \"{\") {\n          pushContext(state, \"}\", stream.column());\n        } else if (/[\\]\\}\\)]/.test(curPunc)) {\n          while (state.context && state.context.type === \"pattern\") {\n            popContext(state);\n          }\n          if (state.context && curPunc === state.context.type) {\n            popContext(state);\n          }\n        } else if (curPunc === \".\" && state.context && state.context.type === \"pattern\") {\n          popContext(state);\n        } else if (/atom|string|variable/.test(style) && state.context) {\n          if (/[\\}\\]]/.test(state.context.type)) {\n            pushContext(state, \"pattern\", stream.column());\n          } else if (state.context.type === \"pattern\" && !state.context.align) {\n            state.context.align = true;\n            state.context.col = stream.column();\n          }\n        }\n        return style;\n      },\n      indent: function(state, textAfter) {\n        var firstChar = textAfter && textAfter.charAt(0);\n        var context = state.context;\n        if (/[\\]\\}]/.test(firstChar)) {\n          while (context && context.type === \"pattern\") {\n            context = context.prev;\n          }\n        }\n        var closing = context && firstChar === context.type;\n        if (!context) return 0;\n        if (context.type === \"keywords\") return CodeMirror.commands.newlineAndIndent;\n        if (context.align) return context.col + (closing ? 0 : 1);\n        return context.indent + (closing ? 0 : indentUnit);\n      }\n    };\n  });\n\n  CodeMirror.modeExtensions[\"cypher\"] = {\n    autoFormatLineBreaks: function(text) {\n      var i, lines, reProcessedPortion;\n      var lines = text.split(\"\\n\");\n      var reProcessedPortion = /\\s+\\b(return|where|order by|match|with|skip|limit|create|delete|set)\\b\\s/g;\n      for (var i = 0; i < lines.length; i++)\n        lines[i] = lines[i].replace(reProcessedPortion, \" \\n$1 \").trim();\n      return lines.join(\"\\n\");\n    }\n  };\n\n  CodeMirror.defineMIME(\"application/x-cypher-query\", \"cypher\");\n\n});\n"],
  "mappings": "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",
  "names": ["CodeMirror"]
}
