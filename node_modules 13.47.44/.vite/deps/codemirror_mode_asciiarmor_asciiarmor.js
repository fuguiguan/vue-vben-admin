import {
  require_codemirror
} from "./chunk-GI5J7NWS.js";
import {
  __commonJS
} from "./chunk-WGAPYIUP.js";

// node_modules/.pnpm/codemirror@5.65.16/node_modules/codemirror/mode/asciiarmor/asciiarmor.js
var require_asciiarmor = __commonJS({
  "node_modules/.pnpm/codemirror@5.65.16/node_modules/codemirror/mode/asciiarmor/asciiarmor.js"(exports, module) {
    (function(mod) {
      if (typeof exports == "object" && typeof module == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      function errorIfNotEmpty(stream) {
        var nonWS = stream.match(/^\s*\S/);
        stream.skipToEnd();
        return nonWS ? "error" : null;
      }
      CodeMirror2.defineMode("asciiarmor", function() {
        return {
          token: function(stream, state) {
            var m;
            if (state.state == "top") {
              if (stream.sol() && (m = stream.match(/^-----BEGIN (.*)?-----\s*$/))) {
                state.state = "headers";
                state.type = m[1];
                return "tag";
              }
              return errorIfNotEmpty(stream);
            } else if (state.state == "headers") {
              if (stream.sol() && stream.match(/^\w+:/)) {
                state.state = "header";
                return "atom";
              } else {
                var result = errorIfNotEmpty(stream);
                if (result)
                  state.state = "body";
                return result;
              }
            } else if (state.state == "header") {
              stream.skipToEnd();
              state.state = "headers";
              return "string";
            } else if (state.state == "body") {
              if (stream.sol() && (m = stream.match(/^-----END (.*)?-----\s*$/))) {
                if (m[1] != state.type)
                  return "error";
                state.state = "end";
                return "tag";
              } else {
                if (stream.eatWhile(/[A-Za-z0-9+\/=]/)) {
                  return null;
                } else {
                  stream.next();
                  return "error";
                }
              }
            } else if (state.state == "end") {
              return errorIfNotEmpty(stream);
            }
          },
          blankLine: function(state) {
            if (state.state == "headers")
              state.state = "body";
          },
          startState: function() {
            return { state: "top", type: null };
          }
        };
      });
      CodeMirror2.defineMIME("application/pgp", "asciiarmor");
      CodeMirror2.defineMIME("application/pgp-encrypted", "asciiarmor");
      CodeMirror2.defineMIME("application/pgp-keys", "asciiarmor");
      CodeMirror2.defineMIME("application/pgp-signature", "asciiarmor");
    });
  }
});
export default require_asciiarmor();
//# sourceMappingURL=codemirror_mode_asciiarmor_asciiarmor.js.map
