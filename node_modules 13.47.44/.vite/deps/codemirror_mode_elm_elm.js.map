{
  "version": 3,
  "sources": ["../../.pnpm/codemirror@5.65.16/node_modules/codemirror/mode/elm/elm.js"],
  "sourcesContent": ["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"elm\", function() {\n\n    function switchState(source, setState, f)\n    {\n      setState(f);\n      return f(source, setState);\n    }\n\n    var lowerRE = /[a-z]/;\n    var upperRE = /[A-Z]/;\n    var innerRE = /[a-zA-Z0-9_]/;\n\n    var digitRE = /[0-9]/;\n    var hexRE = /[0-9A-Fa-f]/;\n    var symbolRE = /[-&*+.\\\\/<>=?^|:]/;\n    var specialRE = /[(),[\\]{}]/;\n    var spacesRE = /[ \\v\\f]/; // newlines are handled in tokenizer\n\n    function normal()\n    {\n      return function(source, setState)\n      {\n        if (source.eatWhile(spacesRE))\n        {\n          return null;\n        }\n\n        var char = source.next();\n\n        if (specialRE.test(char))\n        {\n          return (char === '{' && source.eat('-'))\n            ? switchState(source, setState, chompMultiComment(1))\n            : (char === '[' && source.match('glsl|'))\n                ? switchState(source, setState, chompGlsl)\n                : 'builtin';\n        }\n\n        if (char === '\\'')\n        {\n          return switchState(source, setState, chompChar);\n        }\n\n        if (char === '\"')\n        {\n          return source.eat('\"')\n            ? source.eat('\"')\n                ? switchState(source, setState, chompMultiString)\n                : 'string'\n            : switchState(source, setState, chompSingleString);\n        }\n\n        if (upperRE.test(char))\n        {\n          source.eatWhile(innerRE);\n          return 'variable-2';\n        }\n\n        if (lowerRE.test(char))\n        {\n          var isDef = source.pos === 1;\n          source.eatWhile(innerRE);\n          return isDef ? \"def\" : \"variable\";\n        }\n\n        if (digitRE.test(char))\n        {\n          if (char === '0')\n          {\n            if (source.eat(/[xX]/))\n            {\n              source.eatWhile(hexRE); // should require at least 1\n              return \"number\";\n            }\n          }\n          else\n          {\n            source.eatWhile(digitRE);\n          }\n          if (source.eat('.'))\n          {\n            source.eatWhile(digitRE); // should require at least 1\n          }\n          if (source.eat(/[eE]/))\n          {\n            source.eat(/[-+]/);\n            source.eatWhile(digitRE); // should require at least 1\n          }\n          return \"number\";\n        }\n\n        if (symbolRE.test(char))\n        {\n          if (char === '-' && source.eat('-'))\n          {\n            source.skipToEnd();\n            return \"comment\";\n          }\n          source.eatWhile(symbolRE);\n          return \"keyword\";\n        }\n\n        if (char === '_')\n        {\n          return \"keyword\";\n        }\n\n        return \"error\";\n      }\n    }\n\n    function chompMultiComment(nest)\n    {\n      if (nest == 0)\n      {\n        return normal();\n      }\n      return function(source, setState)\n      {\n        while (!source.eol())\n        {\n          var char = source.next();\n          if (char == '{' && source.eat('-'))\n          {\n            ++nest;\n          }\n          else if (char == '-' && source.eat('}'))\n          {\n            --nest;\n            if (nest === 0)\n            {\n              setState(normal());\n              return 'comment';\n            }\n          }\n        }\n        setState(chompMultiComment(nest));\n        return 'comment';\n      }\n    }\n\n    function chompMultiString(source, setState)\n    {\n      while (!source.eol())\n      {\n        var char = source.next();\n        if (char === '\"' && source.eat('\"') && source.eat('\"'))\n        {\n          setState(normal());\n          return 'string';\n        }\n      }\n      return 'string';\n    }\n\n    function chompSingleString(source, setState)\n    {\n      while (source.skipTo('\\\\\"')) { source.next(); source.next(); }\n      if (source.skipTo('\"'))\n      {\n        source.next();\n        setState(normal());\n        return 'string';\n      }\n      source.skipToEnd();\n      setState(normal());\n      return 'error';\n    }\n\n    function chompChar(source, setState)\n    {\n      while (source.skipTo(\"\\\\'\")) { source.next(); source.next(); }\n      if (source.skipTo(\"'\"))\n      {\n        source.next();\n        setState(normal());\n        return 'string';\n      }\n      source.skipToEnd();\n      setState(normal());\n      return 'error';\n    }\n\n    function chompGlsl(source, setState)\n    {\n      while (!source.eol())\n      {\n        var char = source.next();\n        if (char === '|' && source.eat(']'))\n        {\n          setState(normal());\n          return 'string';\n        }\n      }\n      return 'string';\n    }\n\n    var wellKnownWords = {\n      case: 1,\n      of: 1,\n      as: 1,\n      if: 1,\n      then: 1,\n      else: 1,\n      let: 1,\n      in: 1,\n      type: 1,\n      alias: 1,\n      module: 1,\n      where: 1,\n      import: 1,\n      exposing: 1,\n      port: 1\n    };\n\n    return {\n      startState: function ()  { return { f: normal() }; },\n      copyState:  function (s) { return { f: s.f }; },\n\n      lineComment: '--',\n\n      token: function(stream, state) {\n        var type = state.f(stream, function(s) { state.f = s; });\n        var word = stream.current();\n        return (wellKnownWords.hasOwnProperty(word)) ? 'keyword' : type;\n      }\n    };\n\n  });\n\n  CodeMirror.defineMIME(\"text/x-elm\", \"elm\");\n});\n"],
  "mappings": "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",
  "names": ["CodeMirror"]
}
