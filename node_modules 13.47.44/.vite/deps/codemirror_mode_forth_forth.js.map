{
  "version": 3,
  "sources": ["../../.pnpm/codemirror@5.65.16/node_modules/codemirror/mode/forth/forth.js"],
  "sourcesContent": ["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n// Author: Aliaksei Chapyzhenka\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  function toWordList(words) {\n    var ret = [];\n    words.split(' ').forEach(function(e){\n      ret.push({name: e});\n    });\n    return ret;\n  }\n\n  var coreWordList = toWordList(\n'INVERT AND OR XOR\\\n 2* 2/ LSHIFT RSHIFT\\\n 0= = 0< < > U< MIN MAX\\\n 2DROP 2DUP 2OVER 2SWAP ?DUP DEPTH DROP DUP OVER ROT SWAP\\\n >R R> R@\\\n + - 1+ 1- ABS NEGATE\\\n S>D * M* UM*\\\n FM/MOD SM/REM UM/MOD */ */MOD / /MOD MOD\\\n HERE , @ ! CELL+ CELLS C, C@ C! CHARS 2@ 2!\\\n ALIGN ALIGNED +! ALLOT\\\n CHAR [CHAR] [ ] BL\\\n FIND EXECUTE IMMEDIATE COUNT LITERAL STATE\\\n ; DOES> >BODY\\\n EVALUATE\\\n SOURCE >IN\\\n <# # #S #> HOLD SIGN BASE >NUMBER HEX DECIMAL\\\n FILL MOVE\\\n . CR EMIT SPACE SPACES TYPE U. .R U.R\\\n ACCEPT\\\n TRUE FALSE\\\n <> U> 0<> 0>\\\n NIP TUCK ROLL PICK\\\n 2>R 2R@ 2R>\\\n WITHIN UNUSED MARKER\\\n I J\\\n TO\\\n COMPILE, [COMPILE]\\\n SAVE-INPUT RESTORE-INPUT\\\n PAD ERASE\\\n 2LITERAL DNEGATE\\\n D- D+ D0< D0= D2* D2/ D< D= DMAX DMIN D>S DABS\\\n M+ M*/ D. D.R 2ROT DU<\\\n CATCH THROW\\\n FREE RESIZE ALLOCATE\\\n CS-PICK CS-ROLL\\\n GET-CURRENT SET-CURRENT FORTH-WORDLIST GET-ORDER SET-ORDER\\\n PREVIOUS SEARCH-WORDLIST WORDLIST FIND ALSO ONLY FORTH DEFINITIONS ORDER\\\n -TRAILING /STRING SEARCH COMPARE CMOVE CMOVE> BLANK SLITERAL');\n\n  var immediateWordList = toWordList('IF ELSE THEN BEGIN WHILE REPEAT UNTIL RECURSE [IF] [ELSE] [THEN] ?DO DO LOOP +LOOP UNLOOP LEAVE EXIT AGAIN CASE OF ENDOF ENDCASE');\n\n  CodeMirror.defineMode('forth', function() {\n    function searchWordList (wordList, word) {\n      var i;\n      for (i = wordList.length - 1; i >= 0; i--) {\n        if (wordList[i].name === word.toUpperCase()) {\n          return wordList[i];\n        }\n      }\n      return undefined;\n    }\n  return {\n    startState: function() {\n      return {\n        state: '',\n        base: 10,\n        coreWordList: coreWordList,\n        immediateWordList: immediateWordList,\n        wordList: []\n      };\n    },\n    token: function (stream, stt) {\n      var mat;\n      if (stream.eatSpace()) {\n        return null;\n      }\n      if (stt.state === '') { // interpretation\n        if (stream.match(/^(\\]|:NONAME)(\\s|$)/i)) {\n          stt.state = ' compilation';\n          return 'builtin compilation';\n        }\n        mat = stream.match(/^(\\:)\\s+(\\S+)(\\s|$)+/);\n        if (mat) {\n          stt.wordList.push({name: mat[2].toUpperCase()});\n          stt.state = ' compilation';\n          return 'def' + stt.state;\n        }\n        mat = stream.match(/^(VARIABLE|2VARIABLE|CONSTANT|2CONSTANT|CREATE|POSTPONE|VALUE|WORD)\\s+(\\S+)(\\s|$)+/i);\n        if (mat) {\n          stt.wordList.push({name: mat[2].toUpperCase()});\n          return 'def' + stt.state;\n        }\n        mat = stream.match(/^(\\'|\\[\\'\\])\\s+(\\S+)(\\s|$)+/);\n        if (mat) {\n          return 'builtin' + stt.state;\n        }\n        } else { // compilation\n        // ; [\n        if (stream.match(/^(\\;|\\[)(\\s)/)) {\n          stt.state = '';\n          stream.backUp(1);\n          return 'builtin compilation';\n        }\n        if (stream.match(/^(\\;|\\[)($)/)) {\n          stt.state = '';\n          return 'builtin compilation';\n        }\n        if (stream.match(/^(POSTPONE)\\s+\\S+(\\s|$)+/)) {\n          return 'builtin';\n        }\n      }\n\n      // dynamic wordlist\n      mat = stream.match(/^(\\S+)(\\s+|$)/);\n      if (mat) {\n        if (searchWordList(stt.wordList, mat[1]) !== undefined) {\n          return 'variable' + stt.state;\n        }\n\n        // comments\n        if (mat[1] === '\\\\') {\n          stream.skipToEnd();\n            return 'comment' + stt.state;\n          }\n\n          // core words\n          if (searchWordList(stt.coreWordList, mat[1]) !== undefined) {\n            return 'builtin' + stt.state;\n          }\n          if (searchWordList(stt.immediateWordList, mat[1]) !== undefined) {\n            return 'keyword' + stt.state;\n          }\n\n          if (mat[1] === '(') {\n            stream.eatWhile(function (s) { return s !== ')'; });\n            stream.eat(')');\n            return 'comment' + stt.state;\n          }\n\n          // // strings\n          if (mat[1] === '.(') {\n            stream.eatWhile(function (s) { return s !== ')'; });\n            stream.eat(')');\n            return 'string' + stt.state;\n          }\n          if (mat[1] === 'S\"' || mat[1] === '.\"' || mat[1] === 'C\"') {\n            stream.eatWhile(function (s) { return s !== '\"'; });\n            stream.eat('\"');\n            return 'string' + stt.state;\n          }\n\n          // numbers\n          if (mat[1] - 0xfffffffff) {\n            return 'number' + stt.state;\n          }\n          // if (mat[1].match(/^[-+]?[0-9]+\\.[0-9]*/)) {\n          //     return 'number' + stt.state;\n          // }\n\n          return 'atom' + stt.state;\n        }\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-forth\", \"forth\");\n});\n"],
  "mappings": "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",
  "names": ["CodeMirror"]
}
