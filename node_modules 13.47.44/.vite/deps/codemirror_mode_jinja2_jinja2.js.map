{
  "version": 3,
  "sources": ["../../.pnpm/codemirror@5.65.16/node_modules/codemirror/mode/jinja2/jinja2.js"],
  "sourcesContent": ["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"jinja2\", function() {\n    var keywords = [\"and\", \"as\", \"block\", \"endblock\", \"by\", \"cycle\", \"debug\", \"else\", \"elif\",\n      \"extends\", \"filter\", \"endfilter\", \"firstof\", \"do\", \"for\",\n      \"endfor\", \"if\", \"endif\", \"ifchanged\", \"endifchanged\",\n      \"ifequal\", \"endifequal\", \"ifnotequal\", \"set\", \"raw\", \"endraw\",\n      \"endifnotequal\", \"in\", \"include\", \"load\", \"not\", \"now\", \"or\",\n      \"parsed\", \"regroup\", \"reversed\", \"spaceless\", \"call\", \"endcall\", \"macro\",\n      \"endmacro\", \"endspaceless\", \"ssi\", \"templatetag\", \"openblock\",\n      \"closeblock\", \"openvariable\", \"closevariable\", \"without\", \"context\",\n      \"openbrace\", \"closebrace\", \"opencomment\",\n      \"closecomment\", \"widthratio\", \"url\", \"with\", \"endwith\",\n      \"get_current_language\", \"trans\", \"endtrans\", \"noop\", \"blocktrans\",\n      \"endblocktrans\", \"get_available_languages\",\n      \"get_current_language_bidi\", \"pluralize\", \"autoescape\", \"endautoescape\"],\n    operator = /^[+\\-*&%=<>!?|~^]/,\n    sign = /^[:\\[\\(\\{]/,\n    atom = [\"true\", \"false\"],\n    number = /^(\\d[+\\-\\*\\/])?\\d+(\\.\\d+)?/;\n\n    keywords = new RegExp(\"((\" + keywords.join(\")|(\") + \"))\\\\b\");\n    atom = new RegExp(\"((\" + atom.join(\")|(\") + \"))\\\\b\");\n\n    function tokenBase (stream, state) {\n      var ch = stream.peek();\n\n      //Comment\n      if (state.incomment) {\n        if(!stream.skipTo(\"#}\")) {\n          stream.skipToEnd();\n        } else {\n          stream.eatWhile(/\\#|}/);\n          state.incomment = false;\n        }\n        return \"comment\";\n      //Tag\n      } else if (state.intag) {\n        //After operator\n        if(state.operator) {\n          state.operator = false;\n          if(stream.match(atom)) {\n            return \"atom\";\n          }\n          if(stream.match(number)) {\n            return \"number\";\n          }\n        }\n        //After sign\n        if(state.sign) {\n          state.sign = false;\n          if(stream.match(atom)) {\n            return \"atom\";\n          }\n          if(stream.match(number)) {\n            return \"number\";\n          }\n        }\n\n        if(state.instring) {\n          if(ch == state.instring) {\n            state.instring = false;\n          }\n          stream.next();\n          return \"string\";\n        } else if(ch == \"'\" || ch == '\"') {\n          state.instring = ch;\n          stream.next();\n          return \"string\";\n        }\n        else if (state.inbraces > 0 && ch ==\")\") {\n          stream.next()\n          state.inbraces--;\n        }\n        else if (ch == \"(\") {\n          stream.next()\n          state.inbraces++;\n        }\n        else if (state.inbrackets > 0 && ch ==\"]\") {\n          stream.next()\n          state.inbrackets--;\n        }\n        else if (ch == \"[\") {\n          stream.next()\n          state.inbrackets++;\n        }\n        else if (!state.lineTag && (stream.match(state.intag + \"}\") || stream.eat(\"-\") && stream.match(state.intag + \"}\"))) {\n          state.intag = false;\n          return \"tag\";\n        } else if(stream.match(operator)) {\n          state.operator = true;\n          return \"operator\";\n        } else if(stream.match(sign)) {\n          state.sign = true;\n        } else {\n          if (stream.column() == 1 && state.lineTag && stream.match(keywords)) {\n            //allow nospace after tag before the keyword\n            return \"keyword\";\n          }\n          if(stream.eat(\" \") || stream.sol()) {\n            if(stream.match(keywords)) {\n              return \"keyword\";\n            }\n            if(stream.match(atom)) {\n              return \"atom\";\n            }\n            if(stream.match(number)) {\n              return \"number\";\n            }\n            if(stream.sol()) {\n              stream.next();\n            }\n          } else {\n            stream.next();\n          }\n\n        }\n        return \"variable\";\n      } else if (stream.eat(\"{\")) {\n        if (stream.eat(\"#\")) {\n          state.incomment = true;\n          if(!stream.skipTo(\"#}\")) {\n            stream.skipToEnd();\n          } else {\n            stream.eatWhile(/\\#|}/);\n            state.incomment = false;\n          }\n          return \"comment\";\n        //Open tag\n        } else if (ch = stream.eat(/\\{|%/)) {\n          //Cache close tag\n          state.intag = ch;\n          state.inbraces = 0;\n          state.inbrackets = 0;\n          if(ch == \"{\") {\n            state.intag = \"}\";\n          }\n          stream.eat(\"-\");\n          return \"tag\";\n        }\n      //Line statements\n      } else if (stream.eat('#')) {\n        if (stream.peek() == '#') {\n          stream.skipToEnd();\n          return \"comment\"\n        }\n        else if (!stream.eol()) {\n          state.intag = true;\n          state.lineTag = true;\n          state.inbraces = 0;\n          state.inbrackets = 0;\n          return \"tag\";\n        }\n      }\n      stream.next();\n    };\n\n    return {\n      startState: function () {\n        return {\n          tokenize: tokenBase,\n          inbrackets:0,\n          inbraces:0\n        };\n      },\n      token: function(stream, state) {\n        var style = state.tokenize(stream, state);\n        if (stream.eol() && state.lineTag && !state.instring && state.inbraces == 0 && state.inbrackets == 0) {\n          //Close line statement at the EOL\n          state.intag = false\n          state.lineTag = false\n        }\n        return style;\n      },\n      blockCommentStart: \"{#\",\n      blockCommentEnd: \"#}\",\n      lineComment: \"##\",\n    };\n  });\n\n  CodeMirror.defineMIME(\"text/jinja2\", \"jinja2\");\n});\n"],
  "mappings": "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",
  "names": ["CodeMirror"]
}
