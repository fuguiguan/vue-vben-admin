{
  "version": 3,
  "sources": ["../../.pnpm/codemirror@5.65.16/node_modules/codemirror/mode/julia/julia.js"],
  "sourcesContent": ["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"julia\", function(config, parserConf) {\n  function wordRegexp(words, end, pre) {\n    if (typeof pre === \"undefined\") { pre = \"\"; }\n    if (typeof end === \"undefined\") { end = \"\\\\b\"; }\n    return new RegExp(\"^\" + pre + \"((\" + words.join(\")|(\") + \"))\" + end);\n  }\n\n  var octChar = \"\\\\\\\\[0-7]{1,3}\";\n  var hexChar = \"\\\\\\\\x[A-Fa-f0-9]{1,2}\";\n  var sChar = \"\\\\\\\\[abefnrtv0%?'\\\"\\\\\\\\]\";\n  var uChar = \"([^\\\\u0027\\\\u005C\\\\uD800-\\\\uDFFF]|[\\\\uD800-\\\\uDFFF][\\\\uDC00-\\\\uDFFF])\";\n\n  var asciiOperatorsList = [\n    \"[<>]:\", \"[<>=]=\", \"<<=?\", \">>>?=?\", \"=>\", \"--?>\", \"<--[->]?\", \"\\\\/\\\\/\",\n    \"\\\\.{2,3}\", \"[\\\\.\\\\\\\\%*+\\\\-<>!\\\\/^|&]=?\", \"\\\\?\", \"\\\\$\", \"~\", \":\"\n  ];\n  var operators = parserConf.operators || wordRegexp([\n    \"[<>]:\", \"[<>=]=\", \"[!=]==\", \"<<=?\", \">>>?=?\", \"=>?\", \"--?>\", \"<--[->]?\", \"\\\\/\\\\/\",\n    \"[\\\\\\\\%*+\\\\-<>!\\\\/^|&\\\\u00F7\\\\u22BB]=?\", \"\\\\?\", \"\\\\$\", \"~\", \":\",\n    \"\\\\u00D7\", \"\\\\u2208\", \"\\\\u2209\", \"\\\\u220B\", \"\\\\u220C\", \"\\\\u2218\",\n    \"\\\\u221A\", \"\\\\u221B\", \"\\\\u2229\", \"\\\\u222A\", \"\\\\u2260\", \"\\\\u2264\",\n    \"\\\\u2265\", \"\\\\u2286\", \"\\\\u2288\", \"\\\\u228A\", \"\\\\u22C5\",\n    \"\\\\b(in|isa)\\\\b(?!\\.?\\\\()\"\n  ], \"\");\n  var delimiters = parserConf.delimiters || /^[;,()[\\]{}]/;\n  var identifiers = parserConf.identifiers ||\n        /^[_A-Za-z\\u00A1-\\u2217\\u2219-\\uFFFF][\\w\\u00A1-\\u2217\\u2219-\\uFFFF]*!*/;\n\n  var chars = wordRegexp([octChar, hexChar, sChar, uChar], \"'\");\n\n  var openersList = [\"begin\", \"function\", \"type\", \"struct\", \"immutable\", \"let\",\n        \"macro\", \"for\", \"while\", \"quote\", \"if\", \"else\", \"elseif\", \"try\",\n        \"finally\", \"catch\", \"do\"];\n\n  var closersList = [\"end\", \"else\", \"elseif\", \"catch\", \"finally\"];\n\n  var keywordsList = [\"if\", \"else\", \"elseif\", \"while\", \"for\", \"begin\", \"let\",\n        \"end\", \"do\", \"try\", \"catch\", \"finally\", \"return\", \"break\", \"continue\",\n        \"global\", \"local\", \"const\", \"export\", \"import\", \"importall\", \"using\",\n        \"function\", \"where\", \"macro\", \"module\", \"baremodule\", \"struct\", \"type\",\n        \"mutable\", \"immutable\", \"quote\", \"typealias\", \"abstract\", \"primitive\",\n        \"bitstype\"];\n\n  var builtinsList = [\"true\", \"false\", \"nothing\", \"NaN\", \"Inf\"];\n\n  CodeMirror.registerHelper(\"hintWords\", \"julia\", keywordsList.concat(builtinsList));\n\n  var openers = wordRegexp(openersList);\n  var closers = wordRegexp(closersList);\n  var keywords = wordRegexp(keywordsList);\n  var builtins = wordRegexp(builtinsList);\n\n  var macro = /^@[_A-Za-z\\u00A1-\\uFFFF][\\w\\u00A1-\\uFFFF]*!*/;\n  var symbol = /^:[_A-Za-z\\u00A1-\\uFFFF][\\w\\u00A1-\\uFFFF]*!*/;\n  var stringPrefixes = /^(`|([_A-Za-z\\u00A1-\\uFFFF]*\"(\"\")?))/;\n\n  var macroOperators = wordRegexp(asciiOperatorsList, \"\", \"@\");\n  var symbolOperators = wordRegexp(asciiOperatorsList, \"\", \":\");\n\n  function inArray(state) {\n    return (state.nestedArrays > 0);\n  }\n\n  function inGenerator(state) {\n    return (state.nestedGenerators > 0);\n  }\n\n  function currentScope(state, n) {\n    if (typeof(n) === \"undefined\") { n = 0; }\n    if (state.scopes.length <= n) {\n      return null;\n    }\n    return state.scopes[state.scopes.length - (n + 1)];\n  }\n\n  // tokenizers\n  function tokenBase(stream, state) {\n    // Handle multiline comments\n    if (stream.match('#=', false)) {\n      state.tokenize = tokenComment;\n      return state.tokenize(stream, state);\n    }\n\n    // Handle scope changes\n    var leavingExpr = state.leavingExpr;\n    if (stream.sol()) {\n      leavingExpr = false;\n    }\n    state.leavingExpr = false;\n\n    if (leavingExpr) {\n      if (stream.match(/^'+/)) {\n        return \"operator\";\n      }\n    }\n\n    if (stream.match(/\\.{4,}/)) {\n      return \"error\";\n    } else if (stream.match(/\\.{1,3}/)) {\n      return \"operator\";\n    }\n\n    if (stream.eatSpace()) {\n      return null;\n    }\n\n    var ch = stream.peek();\n\n    // Handle single line comments\n    if (ch === '#') {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n\n    if (ch === '[') {\n      state.scopes.push('[');\n      state.nestedArrays++;\n    }\n\n    if (ch === '(') {\n      state.scopes.push('(');\n      state.nestedGenerators++;\n    }\n\n    if (inArray(state) && ch === ']') {\n      while (state.scopes.length && currentScope(state) !== \"[\") { state.scopes.pop(); }\n      state.scopes.pop();\n      state.nestedArrays--;\n      state.leavingExpr = true;\n    }\n\n    if (inGenerator(state) && ch === ')') {\n      while (state.scopes.length && currentScope(state) !== \"(\") { state.scopes.pop(); }\n      state.scopes.pop();\n      state.nestedGenerators--;\n      state.leavingExpr = true;\n    }\n\n    if (inArray(state)) {\n      if (state.lastToken == \"end\" && stream.match(':')) {\n        return \"operator\";\n      }\n      if (stream.match('end')) {\n        return \"number\";\n      }\n    }\n\n    var match;\n    if (match = stream.match(openers, false)) {\n      state.scopes.push(match[0]);\n    }\n\n    if (stream.match(closers, false)) {\n      state.scopes.pop();\n    }\n\n    // Handle type annotations\n    if (stream.match(/^::(?![:\\$])/)) {\n      state.tokenize = tokenAnnotation;\n      return state.tokenize(stream, state);\n    }\n\n    // Handle symbols\n    if (!leavingExpr && (stream.match(symbol) || stream.match(symbolOperators))) {\n      return \"builtin\";\n    }\n\n    // Handle parametric types\n    //if (stream.match(/^{[^}]*}(?=\\()/)) {\n    //  return \"builtin\";\n    //}\n\n    // Handle operators and Delimiters\n    if (stream.match(operators)) {\n      return \"operator\";\n    }\n\n    // Handle Number Literals\n    if (stream.match(/^\\.?\\d/, false)) {\n      var imMatcher = RegExp(/^im\\b/);\n      var numberLiteral = false;\n      if (stream.match(/^0x\\.[0-9a-f_]+p[\\+\\-]?[_\\d]+/i)) { numberLiteral = true; }\n      // Integers\n      if (stream.match(/^0x[0-9a-f_]+/i)) { numberLiteral = true; } // Hex\n      if (stream.match(/^0b[01_]+/i)) { numberLiteral = true; } // Binary\n      if (stream.match(/^0o[0-7_]+/i)) { numberLiteral = true; } // Octal\n      // Floats\n      if (stream.match(/^(?:(?:\\d[_\\d]*)?\\.(?!\\.)(?:\\d[_\\d]*)?|\\d[_\\d]*\\.(?!\\.)(?:\\d[_\\d]*))?([Eef][\\+\\-]?[_\\d]+)?/i)) { numberLiteral = true; }\n      if (stream.match(/^\\d[_\\d]*(e[\\+\\-]?\\d+)?/i)) { numberLiteral = true; } // Decimal\n      if (numberLiteral) {\n          // Integer literals may be \"long\"\n          stream.match(imMatcher);\n          state.leavingExpr = true;\n          return \"number\";\n      }\n    }\n\n    // Handle Chars\n    if (stream.match('\\'')) {\n      state.tokenize = tokenChar;\n      return state.tokenize(stream, state);\n    }\n\n    // Handle Strings\n    if (stream.match(stringPrefixes)) {\n      state.tokenize = tokenStringFactory(stream.current());\n      return state.tokenize(stream, state);\n    }\n\n    if (stream.match(macro) || stream.match(macroOperators)) {\n      return \"meta\";\n    }\n\n    if (stream.match(delimiters)) {\n      return null;\n    }\n\n    if (stream.match(keywords)) {\n      return \"keyword\";\n    }\n\n    if (stream.match(builtins)) {\n      return \"builtin\";\n    }\n\n    var isDefinition = state.isDefinition || state.lastToken == \"function\" ||\n                       state.lastToken == \"macro\" || state.lastToken == \"type\" ||\n                       state.lastToken == \"struct\" || state.lastToken == \"immutable\";\n\n    if (stream.match(identifiers)) {\n      if (isDefinition) {\n        if (stream.peek() === '.') {\n          state.isDefinition = true;\n          return \"variable\";\n        }\n        state.isDefinition = false;\n        return \"def\";\n      }\n      state.leavingExpr = true;\n      return \"variable\";\n    }\n\n    // Handle non-detected items\n    stream.next();\n    return \"error\";\n  }\n\n  function tokenAnnotation(stream, state) {\n    stream.match(/.*?(?=[,;{}()=\\s]|$)/);\n    if (stream.match('{')) {\n      state.nestedParameters++;\n    } else if (stream.match('}') && state.nestedParameters > 0) {\n      state.nestedParameters--;\n    }\n    if (state.nestedParameters > 0) {\n      stream.match(/.*?(?={|})/) || stream.next();\n    } else if (state.nestedParameters == 0) {\n      state.tokenize = tokenBase;\n    }\n    return \"builtin\";\n  }\n\n  function tokenComment(stream, state) {\n    if (stream.match('#=')) {\n      state.nestedComments++;\n    }\n    if (!stream.match(/.*?(?=(#=|=#))/)) {\n      stream.skipToEnd();\n    }\n    if (stream.match('=#')) {\n      state.nestedComments--;\n      if (state.nestedComments == 0)\n        state.tokenize = tokenBase;\n    }\n    return \"comment\";\n  }\n\n  function tokenChar(stream, state) {\n    var isChar = false, match;\n    if (stream.match(chars)) {\n      isChar = true;\n    } else if (match = stream.match(/\\\\u([a-f0-9]{1,4})(?=')/i)) {\n      var value = parseInt(match[1], 16);\n      if (value <= 55295 || value >= 57344) { // (U+0,U+D7FF), (U+E000,U+FFFF)\n        isChar = true;\n        stream.next();\n      }\n    } else if (match = stream.match(/\\\\U([A-Fa-f0-9]{5,8})(?=')/)) {\n      var value = parseInt(match[1], 16);\n      if (value <= 1114111) { // U+10FFFF\n        isChar = true;\n        stream.next();\n      }\n    }\n    if (isChar) {\n      state.leavingExpr = true;\n      state.tokenize = tokenBase;\n      return \"string\";\n    }\n    if (!stream.match(/^[^']+(?=')/)) { stream.skipToEnd(); }\n    if (stream.match('\\'')) { state.tokenize = tokenBase; }\n    return \"error\";\n  }\n\n  function tokenStringFactory(delimiter) {\n    if (delimiter.substr(-3) === '\"\"\"') {\n      delimiter = '\"\"\"';\n    } else if (delimiter.substr(-1) === '\"') {\n      delimiter = '\"';\n    }\n    function tokenString(stream, state) {\n      if (stream.eat('\\\\')) {\n        stream.next();\n      } else if (stream.match(delimiter)) {\n        state.tokenize = tokenBase;\n        state.leavingExpr = true;\n        return \"string\";\n      } else {\n        stream.eat(/[`\"]/);\n      }\n      stream.eatWhile(/[^\\\\`\"]/);\n      return \"string\";\n    }\n    return tokenString;\n  }\n\n  var external = {\n    startState: function() {\n      return {\n        tokenize: tokenBase,\n        scopes: [],\n        lastToken: null,\n        leavingExpr: false,\n        isDefinition: false,\n        nestedArrays: 0,\n        nestedComments: 0,\n        nestedGenerators: 0,\n        nestedParameters: 0,\n        firstParenPos: -1\n      };\n    },\n\n    token: function(stream, state) {\n      var style = state.tokenize(stream, state);\n      var current = stream.current();\n\n      if (current && style) {\n        state.lastToken = current;\n      }\n\n      return style;\n    },\n\n    indent: function(state, textAfter) {\n      var delta = 0;\n      if ( textAfter === ']' || textAfter === ')' || /^end\\b/.test(textAfter) ||\n           /^else/.test(textAfter) || /^catch\\b/.test(textAfter) || /^elseif\\b/.test(textAfter) ||\n           /^finally/.test(textAfter) ) {\n        delta = -1;\n      }\n      return (state.scopes.length + delta) * config.indentUnit;\n    },\n\n    electricInput: /\\b(end|else|catch|finally)\\b/,\n    blockCommentStart: \"#=\",\n    blockCommentEnd: \"=#\",\n    lineComment: \"#\",\n    closeBrackets: \"()[]{}\\\"\\\"\",\n    fold: \"indent\"\n  };\n  return external;\n});\n\n\nCodeMirror.defineMIME(\"text/x-julia\", \"julia\");\n\n});\n"],
  "mappings": ";;;;;;;;AAAA;AAAA;AAGA,KAAC,SAAS,KAAK;AACb,UAAI,OAAO,WAAW,YAAY,OAAO,UAAU;AACjD,YAAI,oBAA+B;AAAA,eAC5B,OAAO,UAAU,cAAc,OAAO;AAC7C,eAAO,CAAC,sBAAsB,GAAG,GAAG;AAAA;AAEpC,YAAI,UAAU;AAAA,IAClB,GAAG,SAASA,aAAY;AACxB;AAEA,MAAAA,YAAW,WAAW,SAAS,SAAS,QAAQ,YAAY;AAC1D,iBAAS,WAAW,OAAO,KAAK,KAAK;AACnC,cAAI,OAAO,QAAQ,aAAa;AAAE,kBAAM;AAAA,UAAI;AAC5C,cAAI,OAAO,QAAQ,aAAa;AAAE,kBAAM;AAAA,UAAO;AAC/C,iBAAO,IAAI,OAAO,MAAM,MAAM,OAAO,MAAM,KAAK,KAAK,IAAI,OAAO,GAAG;AAAA,QACrE;AAEA,YAAI,UAAU;AACd,YAAI,UAAU;AACd,YAAI,QAAQ;AACZ,YAAI,QAAQ;AAEZ,YAAI,qBAAqB;AAAA,UACvB;AAAA,UAAS;AAAA,UAAU;AAAA,UAAQ;AAAA,UAAU;AAAA,UAAM;AAAA,UAAQ;AAAA,UAAY;AAAA,UAC/D;AAAA,UAAY;AAAA,UAA8B;AAAA,UAAO;AAAA,UAAO;AAAA,UAAK;AAAA,QAC/D;AACA,YAAI,YAAY,WAAW,aAAa,WAAW;AAAA,UACjD;AAAA,UAAS;AAAA,UAAU;AAAA,UAAU;AAAA,UAAQ;AAAA,UAAU;AAAA,UAAO;AAAA,UAAQ;AAAA,UAAY;AAAA,UAC1E;AAAA,UAAyC;AAAA,UAAO;AAAA,UAAO;AAAA,UAAK;AAAA,UAC5D;AAAA,UAAW;AAAA,UAAW;AAAA,UAAW;AAAA,UAAW;AAAA,UAAW;AAAA,UACvD;AAAA,UAAW;AAAA,UAAW;AAAA,UAAW;AAAA,UAAW;AAAA,UAAW;AAAA,UACvD;AAAA,UAAW;AAAA,UAAW;AAAA,UAAW;AAAA,UAAW;AAAA,UAC5C;AAAA,QACF,GAAG,EAAE;AACL,YAAI,aAAa,WAAW,cAAc;AAC1C,YAAI,cAAc,WAAW,eACvB;AAEN,YAAI,QAAQ,WAAW,CAAC,SAAS,SAAS,OAAO,KAAK,GAAG,GAAG;AAE5D,YAAI,cAAc;AAAA,UAAC;AAAA,UAAS;AAAA,UAAY;AAAA,UAAQ;AAAA,UAAU;AAAA,UAAa;AAAA,UACjE;AAAA,UAAS;AAAA,UAAO;AAAA,UAAS;AAAA,UAAS;AAAA,UAAM;AAAA,UAAQ;AAAA,UAAU;AAAA,UAC1D;AAAA,UAAW;AAAA,UAAS;AAAA,QAAI;AAE9B,YAAI,cAAc,CAAC,OAAO,QAAQ,UAAU,SAAS,SAAS;AAE9D,YAAI,eAAe;AAAA,UAAC;AAAA,UAAM;AAAA,UAAQ;AAAA,UAAU;AAAA,UAAS;AAAA,UAAO;AAAA,UAAS;AAAA,UAC/D;AAAA,UAAO;AAAA,UAAM;AAAA,UAAO;AAAA,UAAS;AAAA,UAAW;AAAA,UAAU;AAAA,UAAS;AAAA,UAC3D;AAAA,UAAU;AAAA,UAAS;AAAA,UAAS;AAAA,UAAU;AAAA,UAAU;AAAA,UAAa;AAAA,UAC7D;AAAA,UAAY;AAAA,UAAS;AAAA,UAAS;AAAA,UAAU;AAAA,UAAc;AAAA,UAAU;AAAA,UAChE;AAAA,UAAW;AAAA,UAAa;AAAA,UAAS;AAAA,UAAa;AAAA,UAAY;AAAA,UAC1D;AAAA,QAAU;AAEhB,YAAI,eAAe,CAAC,QAAQ,SAAS,WAAW,OAAO,KAAK;AAE5D,QAAAA,YAAW,eAAe,aAAa,SAAS,aAAa,OAAO,YAAY,CAAC;AAEjF,YAAI,UAAU,WAAW,WAAW;AACpC,YAAI,UAAU,WAAW,WAAW;AACpC,YAAI,WAAW,WAAW,YAAY;AACtC,YAAI,WAAW,WAAW,YAAY;AAEtC,YAAI,QAAQ;AACZ,YAAI,SAAS;AACb,YAAI,iBAAiB;AAErB,YAAI,iBAAiB,WAAW,oBAAoB,IAAI,GAAG;AAC3D,YAAI,kBAAkB,WAAW,oBAAoB,IAAI,GAAG;AAE5D,iBAAS,QAAQ,OAAO;AACtB,iBAAQ,MAAM,eAAe;AAAA,QAC/B;AAEA,iBAAS,YAAY,OAAO;AAC1B,iBAAQ,MAAM,mBAAmB;AAAA,QACnC;AAEA,iBAAS,aAAa,OAAO,GAAG;AAC9B,cAAI,OAAO,MAAO,aAAa;AAAE,gBAAI;AAAA,UAAG;AACxC,cAAI,MAAM,OAAO,UAAU,GAAG;AAC5B,mBAAO;AAAA,UACT;AACA,iBAAO,MAAM,OAAO,MAAM,OAAO,UAAU,IAAI,EAAE;AAAA,QACnD;AAGA,iBAAS,UAAU,QAAQ,OAAO;AAEhC,cAAI,OAAO,MAAM,MAAM,KAAK,GAAG;AAC7B,kBAAM,WAAW;AACjB,mBAAO,MAAM,SAAS,QAAQ,KAAK;AAAA,UACrC;AAGA,cAAI,cAAc,MAAM;AACxB,cAAI,OAAO,IAAI,GAAG;AAChB,0BAAc;AAAA,UAChB;AACA,gBAAM,cAAc;AAEpB,cAAI,aAAa;AACf,gBAAI,OAAO,MAAM,KAAK,GAAG;AACvB,qBAAO;AAAA,YACT;AAAA,UACF;AAEA,cAAI,OAAO,MAAM,QAAQ,GAAG;AAC1B,mBAAO;AAAA,UACT,WAAW,OAAO,MAAM,SAAS,GAAG;AAClC,mBAAO;AAAA,UACT;AAEA,cAAI,OAAO,SAAS,GAAG;AACrB,mBAAO;AAAA,UACT;AAEA,cAAI,KAAK,OAAO,KAAK;AAGrB,cAAI,OAAO,KAAK;AACd,mBAAO,UAAU;AACjB,mBAAO;AAAA,UACT;AAEA,cAAI,OAAO,KAAK;AACd,kBAAM,OAAO,KAAK,GAAG;AACrB,kBAAM;AAAA,UACR;AAEA,cAAI,OAAO,KAAK;AACd,kBAAM,OAAO,KAAK,GAAG;AACrB,kBAAM;AAAA,UACR;AAEA,cAAI,QAAQ,KAAK,KAAK,OAAO,KAAK;AAChC,mBAAO,MAAM,OAAO,UAAU,aAAa,KAAK,MAAM,KAAK;AAAE,oBAAM,OAAO,IAAI;AAAA,YAAG;AACjF,kBAAM,OAAO,IAAI;AACjB,kBAAM;AACN,kBAAM,cAAc;AAAA,UACtB;AAEA,cAAI,YAAY,KAAK,KAAK,OAAO,KAAK;AACpC,mBAAO,MAAM,OAAO,UAAU,aAAa,KAAK,MAAM,KAAK;AAAE,oBAAM,OAAO,IAAI;AAAA,YAAG;AACjF,kBAAM,OAAO,IAAI;AACjB,kBAAM;AACN,kBAAM,cAAc;AAAA,UACtB;AAEA,cAAI,QAAQ,KAAK,GAAG;AAClB,gBAAI,MAAM,aAAa,SAAS,OAAO,MAAM,GAAG,GAAG;AACjD,qBAAO;AAAA,YACT;AACA,gBAAI,OAAO,MAAM,KAAK,GAAG;AACvB,qBAAO;AAAA,YACT;AAAA,UACF;AAEA,cAAI;AACJ,cAAI,QAAQ,OAAO,MAAM,SAAS,KAAK,GAAG;AACxC,kBAAM,OAAO,KAAK,MAAM,CAAC,CAAC;AAAA,UAC5B;AAEA,cAAI,OAAO,MAAM,SAAS,KAAK,GAAG;AAChC,kBAAM,OAAO,IAAI;AAAA,UACnB;AAGA,cAAI,OAAO,MAAM,cAAc,GAAG;AAChC,kBAAM,WAAW;AACjB,mBAAO,MAAM,SAAS,QAAQ,KAAK;AAAA,UACrC;AAGA,cAAI,CAAC,gBAAgB,OAAO,MAAM,MAAM,KAAK,OAAO,MAAM,eAAe,IAAI;AAC3E,mBAAO;AAAA,UACT;AAQA,cAAI,OAAO,MAAM,SAAS,GAAG;AAC3B,mBAAO;AAAA,UACT;AAGA,cAAI,OAAO,MAAM,UAAU,KAAK,GAAG;AACjC,gBAAI,YAAY,OAAO,OAAO;AAC9B,gBAAI,gBAAgB;AACpB,gBAAI,OAAO,MAAM,gCAAgC,GAAG;AAAE,8BAAgB;AAAA,YAAM;AAE5E,gBAAI,OAAO,MAAM,gBAAgB,GAAG;AAAE,8BAAgB;AAAA,YAAM;AAC5D,gBAAI,OAAO,MAAM,YAAY,GAAG;AAAE,8BAAgB;AAAA,YAAM;AACxD,gBAAI,OAAO,MAAM,aAAa,GAAG;AAAE,8BAAgB;AAAA,YAAM;AAEzD,gBAAI,OAAO,MAAM,6FAA6F,GAAG;AAAE,8BAAgB;AAAA,YAAM;AACzI,gBAAI,OAAO,MAAM,0BAA0B,GAAG;AAAE,8BAAgB;AAAA,YAAM;AACtE,gBAAI,eAAe;AAEf,qBAAO,MAAM,SAAS;AACtB,oBAAM,cAAc;AACpB,qBAAO;AAAA,YACX;AAAA,UACF;AAGA,cAAI,OAAO,MAAM,GAAI,GAAG;AACtB,kBAAM,WAAW;AACjB,mBAAO,MAAM,SAAS,QAAQ,KAAK;AAAA,UACrC;AAGA,cAAI,OAAO,MAAM,cAAc,GAAG;AAChC,kBAAM,WAAW,mBAAmB,OAAO,QAAQ,CAAC;AACpD,mBAAO,MAAM,SAAS,QAAQ,KAAK;AAAA,UACrC;AAEA,cAAI,OAAO,MAAM,KAAK,KAAK,OAAO,MAAM,cAAc,GAAG;AACvD,mBAAO;AAAA,UACT;AAEA,cAAI,OAAO,MAAM,UAAU,GAAG;AAC5B,mBAAO;AAAA,UACT;AAEA,cAAI,OAAO,MAAM,QAAQ,GAAG;AAC1B,mBAAO;AAAA,UACT;AAEA,cAAI,OAAO,MAAM,QAAQ,GAAG;AAC1B,mBAAO;AAAA,UACT;AAEA,cAAI,eAAe,MAAM,gBAAgB,MAAM,aAAa,cACzC,MAAM,aAAa,WAAW,MAAM,aAAa,UACjD,MAAM,aAAa,YAAY,MAAM,aAAa;AAErE,cAAI,OAAO,MAAM,WAAW,GAAG;AAC7B,gBAAI,cAAc;AAChB,kBAAI,OAAO,KAAK,MAAM,KAAK;AACzB,sBAAM,eAAe;AACrB,uBAAO;AAAA,cACT;AACA,oBAAM,eAAe;AACrB,qBAAO;AAAA,YACT;AACA,kBAAM,cAAc;AACpB,mBAAO;AAAA,UACT;AAGA,iBAAO,KAAK;AACZ,iBAAO;AAAA,QACT;AAEA,iBAAS,gBAAgB,QAAQ,OAAO;AACtC,iBAAO,MAAM,sBAAsB;AACnC,cAAI,OAAO,MAAM,GAAG,GAAG;AACrB,kBAAM;AAAA,UACR,WAAW,OAAO,MAAM,GAAG,KAAK,MAAM,mBAAmB,GAAG;AAC1D,kBAAM;AAAA,UACR;AACA,cAAI,MAAM,mBAAmB,GAAG;AAC9B,mBAAO,MAAM,YAAY,KAAK,OAAO,KAAK;AAAA,UAC5C,WAAW,MAAM,oBAAoB,GAAG;AACtC,kBAAM,WAAW;AAAA,UACnB;AACA,iBAAO;AAAA,QACT;AAEA,iBAAS,aAAa,QAAQ,OAAO;AACnC,cAAI,OAAO,MAAM,IAAI,GAAG;AACtB,kBAAM;AAAA,UACR;AACA,cAAI,CAAC,OAAO,MAAM,gBAAgB,GAAG;AACnC,mBAAO,UAAU;AAAA,UACnB;AACA,cAAI,OAAO,MAAM,IAAI,GAAG;AACtB,kBAAM;AACN,gBAAI,MAAM,kBAAkB;AAC1B,oBAAM,WAAW;AAAA,UACrB;AACA,iBAAO;AAAA,QACT;AAEA,iBAAS,UAAU,QAAQ,OAAO;AAChC,cAAI,SAAS,OAAO;AACpB,cAAI,OAAO,MAAM,KAAK,GAAG;AACvB,qBAAS;AAAA,UACX,WAAW,QAAQ,OAAO,MAAM,0BAA0B,GAAG;AAC3D,gBAAI,QAAQ,SAAS,MAAM,CAAC,GAAG,EAAE;AACjC,gBAAI,SAAS,SAAS,SAAS,OAAO;AACpC,uBAAS;AACT,qBAAO,KAAK;AAAA,YACd;AAAA,UACF,WAAW,QAAQ,OAAO,MAAM,4BAA4B,GAAG;AAC7D,gBAAI,QAAQ,SAAS,MAAM,CAAC,GAAG,EAAE;AACjC,gBAAI,SAAS,SAAS;AACpB,uBAAS;AACT,qBAAO,KAAK;AAAA,YACd;AAAA,UACF;AACA,cAAI,QAAQ;AACV,kBAAM,cAAc;AACpB,kBAAM,WAAW;AACjB,mBAAO;AAAA,UACT;AACA,cAAI,CAAC,OAAO,MAAM,aAAa,GAAG;AAAE,mBAAO,UAAU;AAAA,UAAG;AACxD,cAAI,OAAO,MAAM,GAAI,GAAG;AAAE,kBAAM,WAAW;AAAA,UAAW;AACtD,iBAAO;AAAA,QACT;AAEA,iBAAS,mBAAmB,WAAW;AACrC,cAAI,UAAU,OAAO,EAAE,MAAM,OAAO;AAClC,wBAAY;AAAA,UACd,WAAW,UAAU,OAAO,EAAE,MAAM,KAAK;AACvC,wBAAY;AAAA,UACd;AACA,mBAAS,YAAY,QAAQ,OAAO;AAClC,gBAAI,OAAO,IAAI,IAAI,GAAG;AACpB,qBAAO,KAAK;AAAA,YACd,WAAW,OAAO,MAAM,SAAS,GAAG;AAClC,oBAAM,WAAW;AACjB,oBAAM,cAAc;AACpB,qBAAO;AAAA,YACT,OAAO;AACL,qBAAO,IAAI,MAAM;AAAA,YACnB;AACA,mBAAO,SAAS,SAAS;AACzB,mBAAO;AAAA,UACT;AACA,iBAAO;AAAA,QACT;AAEA,YAAI,WAAW;AAAA,UACb,YAAY,WAAW;AACrB,mBAAO;AAAA,cACL,UAAU;AAAA,cACV,QAAQ,CAAC;AAAA,cACT,WAAW;AAAA,cACX,aAAa;AAAA,cACb,cAAc;AAAA,cACd,cAAc;AAAA,cACd,gBAAgB;AAAA,cAChB,kBAAkB;AAAA,cAClB,kBAAkB;AAAA,cAClB,eAAe;AAAA,YACjB;AAAA,UACF;AAAA,UAEA,OAAO,SAAS,QAAQ,OAAO;AAC7B,gBAAI,QAAQ,MAAM,SAAS,QAAQ,KAAK;AACxC,gBAAI,UAAU,OAAO,QAAQ;AAE7B,gBAAI,WAAW,OAAO;AACpB,oBAAM,YAAY;AAAA,YACpB;AAEA,mBAAO;AAAA,UACT;AAAA,UAEA,QAAQ,SAAS,OAAO,WAAW;AACjC,gBAAI,QAAQ;AACZ,gBAAK,cAAc,OAAO,cAAc,OAAO,SAAS,KAAK,SAAS,KACjE,QAAQ,KAAK,SAAS,KAAK,WAAW,KAAK,SAAS,KAAK,YAAY,KAAK,SAAS,KACnF,WAAW,KAAK,SAAS,GAAI;AAChC,sBAAQ;AAAA,YACV;AACA,oBAAQ,MAAM,OAAO,SAAS,SAAS,OAAO;AAAA,UAChD;AAAA,UAEA,eAAe;AAAA,UACf,mBAAmB;AAAA,UACnB,iBAAiB;AAAA,UACjB,aAAa;AAAA,UACb,eAAe;AAAA,UACf,MAAM;AAAA,QACR;AACA,eAAO;AAAA,MACT,CAAC;AAGD,MAAAA,YAAW,WAAW,gBAAgB,OAAO;AAAA,IAE7C,CAAC;AAAA;AAAA;",
  "names": ["CodeMirror"]
}
