{
  "version": 3,
  "sources": ["../../.pnpm/codemirror@5.65.16/node_modules/codemirror/mode/haml/haml.js"],
  "sourcesContent": ["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../htmlmixed/htmlmixed\"), require(\"../ruby/ruby\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../htmlmixed/htmlmixed\", \"../ruby/ruby\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\n  // full haml mode. This handled embedded ruby and html fragments too\n  CodeMirror.defineMode(\"haml\", function(config) {\n    var htmlMode = CodeMirror.getMode(config, {name: \"htmlmixed\"});\n    var rubyMode = CodeMirror.getMode(config, \"ruby\");\n\n    function rubyInQuote(endQuote) {\n      return function(stream, state) {\n        var ch = stream.peek();\n        if (ch == endQuote && state.rubyState.tokenize.length == 1) {\n          // step out of ruby context as it seems to complete processing all the braces\n          stream.next();\n          state.tokenize = html;\n          return \"closeAttributeTag\";\n        } else {\n          return ruby(stream, state);\n        }\n      };\n    }\n\n    function ruby(stream, state) {\n      if (stream.match(\"-#\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n      return rubyMode.token(stream, state.rubyState);\n    }\n\n    function html(stream, state) {\n      var ch = stream.peek();\n\n      // handle haml declarations. All declarations that cant be handled here\n      // will be passed to html mode\n      if (state.previousToken.style == \"comment\" ) {\n        if (state.indented > state.previousToken.indented) {\n          stream.skipToEnd();\n          return \"commentLine\";\n        }\n      }\n\n      if (state.startOfLine) {\n        if (ch == \"!\" && stream.match(\"!!\")) {\n          stream.skipToEnd();\n          return \"tag\";\n        } else if (stream.match(/^%[\\w:#\\.]+=/)) {\n          state.tokenize = ruby;\n          return \"hamlTag\";\n        } else if (stream.match(/^%[\\w:]+/)) {\n          return \"hamlTag\";\n        } else if (ch == \"/\" ) {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n      }\n\n      if (state.startOfLine || state.previousToken.style == \"hamlTag\") {\n        if ( ch == \"#\" || ch == \".\") {\n          stream.match(/[\\w-#\\.]*/);\n          return \"hamlAttribute\";\n        }\n      }\n\n      // do not handle --> as valid ruby, make it HTML close comment instead\n      if (state.startOfLine && !stream.match(\"-->\", false) && (ch == \"=\" || ch == \"-\" )) {\n        state.tokenize = ruby;\n        return state.tokenize(stream, state);\n      }\n\n      if (state.previousToken.style == \"hamlTag\" ||\n          state.previousToken.style == \"closeAttributeTag\" ||\n          state.previousToken.style == \"hamlAttribute\") {\n        if (ch == \"(\") {\n          state.tokenize = rubyInQuote(\")\");\n          return state.tokenize(stream, state);\n        } else if (ch == \"{\") {\n          if (!stream.match(/^\\{%.*/)) {\n            state.tokenize = rubyInQuote(\"}\");\n            return state.tokenize(stream, state);\n          }\n        }\n      }\n\n      return htmlMode.token(stream, state.htmlState);\n    }\n\n    return {\n      // default to html mode\n      startState: function() {\n        var htmlState = CodeMirror.startState(htmlMode);\n        var rubyState = CodeMirror.startState(rubyMode);\n        return {\n          htmlState: htmlState,\n          rubyState: rubyState,\n          indented: 0,\n          previousToken: { style: null, indented: 0},\n          tokenize: html\n        };\n      },\n\n      copyState: function(state) {\n        return {\n          htmlState : CodeMirror.copyState(htmlMode, state.htmlState),\n          rubyState: CodeMirror.copyState(rubyMode, state.rubyState),\n          indented: state.indented,\n          previousToken: state.previousToken,\n          tokenize: state.tokenize\n        };\n      },\n\n      token: function(stream, state) {\n        if (stream.sol()) {\n          state.indented = stream.indentation();\n          state.startOfLine = true;\n        }\n        if (stream.eatSpace()) return null;\n        var style = state.tokenize(stream, state);\n        state.startOfLine = false;\n        // dont record comment line as we only want to measure comment line with\n        // the opening comment block\n        if (style && style != \"commentLine\") {\n          state.previousToken = { style: style, indented: state.indented };\n        }\n        // if current state is ruby and the previous token is not `,` reset the\n        // tokenize to html\n        if (stream.eol() && state.tokenize == ruby) {\n          stream.backUp(1);\n          var ch = stream.peek();\n          stream.next();\n          if (ch && ch != \",\") {\n            state.tokenize = html;\n          }\n        }\n        // reprocess some of the specific style tag when finish setting previousToken\n        if (style == \"hamlTag\") {\n          style = \"tag\";\n        } else if (style == \"commentLine\") {\n          style = \"comment\";\n        } else if (style == \"hamlAttribute\") {\n          style = \"attribute\";\n        } else if (style == \"closeAttributeTag\") {\n          style = null;\n        }\n        return style;\n      }\n    };\n  }, \"htmlmixed\", \"ruby\");\n\n  CodeMirror.defineMIME(\"text/x-haml\", \"haml\");\n});\n"],
  "mappings": "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",
  "names": ["CodeMirror"]
}
