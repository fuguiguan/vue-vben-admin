import {
  require_codemirror
} from "./chunk-GI5J7NWS.js";
import {
  __commonJS
} from "./chunk-WGAPYIUP.js";

// node_modules/.pnpm/codemirror@5.65.16/node_modules/codemirror/mode/properties/properties.js
var require_properties = __commonJS({
  "node_modules/.pnpm/codemirror@5.65.16/node_modules/codemirror/mode/properties/properties.js"(exports, module) {
    (function(mod) {
      if (typeof exports == "object" && typeof module == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("properties", function() {
        return {
          token: function(stream, state) {
            var sol = stream.sol() || state.afterSection;
            var eol = stream.eol();
            state.afterSection = false;
            if (sol) {
              if (state.nextMultiline) {
                state.inMultiline = true;
                state.nextMultiline = false;
              } else {
                state.position = "def";
              }
            }
            if (eol && !state.nextMultiline) {
              state.inMultiline = false;
              state.position = "def";
            }
            if (sol) {
              while (stream.eatSpace()) {
              }
            }
            var ch = stream.next();
            if (sol && (ch === "#" || ch === "!" || ch === ";")) {
              state.position = "comment";
              stream.skipToEnd();
              return "comment";
            } else if (sol && ch === "[") {
              state.afterSection = true;
              stream.skipTo("]");
              stream.eat("]");
              return "header";
            } else if (ch === "=" || ch === ":") {
              state.position = "quote";
              return null;
            } else if (ch === "\\" && state.position === "quote") {
              if (stream.eol()) {
                state.nextMultiline = true;
              }
            }
            return state.position;
          },
          startState: function() {
            return {
              position: "def",
              // Current position, "def", "quote" or "comment"
              nextMultiline: false,
              // Is the next line multiline value
              inMultiline: false,
              // Is the current line a multiline value
              afterSection: false
              // Did we just open a section
            };
          }
        };
      });
      CodeMirror2.defineMIME("text/x-properties", "properties");
      CodeMirror2.defineMIME("text/x-ini", "properties");
    });
  }
});
export default require_properties();
//# sourceMappingURL=codemirror_mode_properties_properties.js.map
