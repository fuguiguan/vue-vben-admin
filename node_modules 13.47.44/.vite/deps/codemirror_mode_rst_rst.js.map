{
  "version": 3,
  "sources": ["../../.pnpm/codemirror@5.65.16/node_modules/codemirror/mode/rst/rst.js"],
  "sourcesContent": ["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../python/python\"), require(\"../stex/stex\"), require(\"../../addon/mode/overlay\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../python/python\", \"../stex/stex\", \"../../addon/mode/overlay\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode('rst', function (config, options) {\n\n  var rx_strong = /^\\*\\*[^\\*\\s](?:[^\\*]*[^\\*\\s])?\\*\\*/;\n  var rx_emphasis = /^\\*[^\\*\\s](?:[^\\*]*[^\\*\\s])?\\*/;\n  var rx_literal = /^``[^`\\s](?:[^`]*[^`\\s])``/;\n\n  var rx_number = /^(?:[\\d]+(?:[\\.,]\\d+)*)/;\n  var rx_positive = /^(?:\\s\\+[\\d]+(?:[\\.,]\\d+)*)/;\n  var rx_negative = /^(?:\\s\\-[\\d]+(?:[\\.,]\\d+)*)/;\n\n  var rx_uri_protocol = \"[Hh][Tt][Tt][Pp][Ss]?://\";\n  var rx_uri_domain = \"(?:[\\\\d\\\\w.-]+)\\\\.(?:\\\\w{2,6})\";\n  var rx_uri_path = \"(?:/[\\\\d\\\\w\\\\#\\\\%\\\\&\\\\-\\\\.\\\\,\\\\/\\\\:\\\\=\\\\?\\\\~]+)*\";\n  var rx_uri = new RegExp(\"^\" + rx_uri_protocol + rx_uri_domain + rx_uri_path);\n\n  var overlay = {\n    token: function (stream) {\n\n      if (stream.match(rx_strong) && stream.match (/\\W+|$/, false))\n        return 'strong';\n      if (stream.match(rx_emphasis) && stream.match (/\\W+|$/, false))\n        return 'em';\n      if (stream.match(rx_literal) && stream.match (/\\W+|$/, false))\n        return 'string-2';\n      if (stream.match(rx_number))\n        return 'number';\n      if (stream.match(rx_positive))\n        return 'positive';\n      if (stream.match(rx_negative))\n        return 'negative';\n      if (stream.match(rx_uri))\n        return 'link';\n\n      while (stream.next() != null) {\n        if (stream.match(rx_strong, false)) break;\n        if (stream.match(rx_emphasis, false)) break;\n        if (stream.match(rx_literal, false)) break;\n        if (stream.match(rx_number, false)) break;\n        if (stream.match(rx_positive, false)) break;\n        if (stream.match(rx_negative, false)) break;\n        if (stream.match(rx_uri, false)) break;\n      }\n\n      return null;\n    }\n  };\n\n  var mode = CodeMirror.getMode(\n    config, options.backdrop || 'rst-base'\n  );\n\n  return CodeMirror.overlayMode(mode, overlay, true); // combine\n}, 'python', 'stex');\n\n///////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////\n\nCodeMirror.defineMode('rst-base', function (config) {\n\n  ///////////////////////////////////////////////////////////////////////////\n  ///////////////////////////////////////////////////////////////////////////\n\n  function format(string) {\n    var args = Array.prototype.slice.call(arguments, 1);\n    return string.replace(/{(\\d+)}/g, function (match, n) {\n      return typeof args[n] != 'undefined' ? args[n] : match;\n    });\n  }\n\n  ///////////////////////////////////////////////////////////////////////////\n  ///////////////////////////////////////////////////////////////////////////\n\n  var mode_python = CodeMirror.getMode(config, 'python');\n  var mode_stex = CodeMirror.getMode(config, 'stex');\n\n  ///////////////////////////////////////////////////////////////////////////\n  ///////////////////////////////////////////////////////////////////////////\n\n  var SEPA = \"\\\\s+\";\n  var TAIL = \"(?:\\\\s*|\\\\W|$)\",\n  rx_TAIL = new RegExp(format('^{0}', TAIL));\n\n  var NAME =\n    \"(?:[^\\\\W\\\\d_](?:[\\\\w!\\\"#$%&'()\\\\*\\\\+,\\\\-\\\\.\\/:;<=>\\\\?]*[^\\\\W_])?)\",\n  rx_NAME = new RegExp(format('^{0}', NAME));\n  var NAME_WWS =\n    \"(?:[^\\\\W\\\\d_](?:[\\\\w\\\\s!\\\"#$%&'()\\\\*\\\\+,\\\\-\\\\.\\/:;<=>\\\\?]*[^\\\\W_])?)\";\n  var REF_NAME = format('(?:{0}|`{1}`)', NAME, NAME_WWS);\n\n  var TEXT1 = \"(?:[^\\\\s\\\\|](?:[^\\\\|]*[^\\\\s\\\\|])?)\";\n  var TEXT2 = \"(?:[^\\\\`]+)\",\n  rx_TEXT2 = new RegExp(format('^{0}', TEXT2));\n\n  var rx_section = new RegExp(\n    \"^([!'#$%&\\\"()*+,-./:;<=>?@\\\\[\\\\\\\\\\\\]^_`{|}~])\\\\1{3,}\\\\s*$\");\n  var rx_explicit = new RegExp(\n    format('^\\\\.\\\\.{0}', SEPA));\n  var rx_link = new RegExp(\n    format('^_{0}:{1}|^__:{1}', REF_NAME, TAIL));\n  var rx_directive = new RegExp(\n    format('^{0}::{1}', REF_NAME, TAIL));\n  var rx_substitution = new RegExp(\n    format('^\\\\|{0}\\\\|{1}{2}::{3}', TEXT1, SEPA, REF_NAME, TAIL));\n  var rx_footnote = new RegExp(\n    format('^\\\\[(?:\\\\d+|#{0}?|\\\\*)]{1}', REF_NAME, TAIL));\n  var rx_citation = new RegExp(\n    format('^\\\\[{0}\\\\]{1}', REF_NAME, TAIL));\n\n  var rx_substitution_ref = new RegExp(\n    format('^\\\\|{0}\\\\|', TEXT1));\n  var rx_footnote_ref = new RegExp(\n    format('^\\\\[(?:\\\\d+|#{0}?|\\\\*)]_', REF_NAME));\n  var rx_citation_ref = new RegExp(\n    format('^\\\\[{0}\\\\]_', REF_NAME));\n  var rx_link_ref1 = new RegExp(\n    format('^{0}__?', REF_NAME));\n  var rx_link_ref2 = new RegExp(\n    format('^`{0}`_', TEXT2));\n\n  var rx_role_pre = new RegExp(\n    format('^:{0}:`{1}`{2}', NAME, TEXT2, TAIL));\n  var rx_role_suf = new RegExp(\n    format('^`{1}`:{0}:{2}', NAME, TEXT2, TAIL));\n  var rx_role = new RegExp(\n    format('^:{0}:{1}', NAME, TAIL));\n\n  var rx_directive_name = new RegExp(format('^{0}', REF_NAME));\n  var rx_directive_tail = new RegExp(format('^::{0}', TAIL));\n  var rx_substitution_text = new RegExp(format('^\\\\|{0}\\\\|', TEXT1));\n  var rx_substitution_sepa = new RegExp(format('^{0}', SEPA));\n  var rx_substitution_name = new RegExp(format('^{0}', REF_NAME));\n  var rx_substitution_tail = new RegExp(format('^::{0}', TAIL));\n  var rx_link_head = new RegExp(\"^_\");\n  var rx_link_name = new RegExp(format('^{0}|_', REF_NAME));\n  var rx_link_tail = new RegExp(format('^:{0}', TAIL));\n\n  var rx_verbatim = new RegExp('^::\\\\s*$');\n  var rx_examples = new RegExp('^\\\\s+(?:>>>|In \\\\[\\\\d+\\\\]:)\\\\s');\n\n  ///////////////////////////////////////////////////////////////////////////\n  ///////////////////////////////////////////////////////////////////////////\n\n  function to_normal(stream, state) {\n    var token = null;\n\n    if (stream.sol() && stream.match(rx_examples, false)) {\n      change(state, to_mode, {\n        mode: mode_python, local: CodeMirror.startState(mode_python)\n      });\n    } else if (stream.sol() && stream.match(rx_explicit)) {\n      change(state, to_explicit);\n      token = 'meta';\n    } else if (stream.sol() && stream.match(rx_section)) {\n      change(state, to_normal);\n      token = 'header';\n    } else if (phase(state) == rx_role_pre ||\n               stream.match(rx_role_pre, false)) {\n\n      switch (stage(state)) {\n      case 0:\n        change(state, to_normal, context(rx_role_pre, 1));\n        stream.match(/^:/);\n        token = 'meta';\n        break;\n      case 1:\n        change(state, to_normal, context(rx_role_pre, 2));\n        stream.match(rx_NAME);\n        token = 'keyword';\n\n        if (stream.current().match(/^(?:math|latex)/)) {\n          state.tmp_stex = true;\n        }\n        break;\n      case 2:\n        change(state, to_normal, context(rx_role_pre, 3));\n        stream.match(/^:`/);\n        token = 'meta';\n        break;\n      case 3:\n        if (state.tmp_stex) {\n          state.tmp_stex = undefined; state.tmp = {\n            mode: mode_stex, local: CodeMirror.startState(mode_stex)\n          };\n        }\n\n        if (state.tmp) {\n          if (stream.peek() == '`') {\n            change(state, to_normal, context(rx_role_pre, 4));\n            state.tmp = undefined;\n            break;\n          }\n\n          token = state.tmp.mode.token(stream, state.tmp.local);\n          break;\n        }\n\n        change(state, to_normal, context(rx_role_pre, 4));\n        stream.match(rx_TEXT2);\n        token = 'string';\n        break;\n      case 4:\n        change(state, to_normal, context(rx_role_pre, 5));\n        stream.match(/^`/);\n        token = 'meta';\n        break;\n      case 5:\n        change(state, to_normal, context(rx_role_pre, 6));\n        stream.match(rx_TAIL);\n        break;\n      default:\n        change(state, to_normal);\n      }\n    } else if (phase(state) == rx_role_suf ||\n               stream.match(rx_role_suf, false)) {\n\n      switch (stage(state)) {\n      case 0:\n        change(state, to_normal, context(rx_role_suf, 1));\n        stream.match(/^`/);\n        token = 'meta';\n        break;\n      case 1:\n        change(state, to_normal, context(rx_role_suf, 2));\n        stream.match(rx_TEXT2);\n        token = 'string';\n        break;\n      case 2:\n        change(state, to_normal, context(rx_role_suf, 3));\n        stream.match(/^`:/);\n        token = 'meta';\n        break;\n      case 3:\n        change(state, to_normal, context(rx_role_suf, 4));\n        stream.match(rx_NAME);\n        token = 'keyword';\n        break;\n      case 4:\n        change(state, to_normal, context(rx_role_suf, 5));\n        stream.match(/^:/);\n        token = 'meta';\n        break;\n      case 5:\n        change(state, to_normal, context(rx_role_suf, 6));\n        stream.match(rx_TAIL);\n        break;\n      default:\n        change(state, to_normal);\n      }\n    } else if (phase(state) == rx_role || stream.match(rx_role, false)) {\n\n      switch (stage(state)) {\n      case 0:\n        change(state, to_normal, context(rx_role, 1));\n        stream.match(/^:/);\n        token = 'meta';\n        break;\n      case 1:\n        change(state, to_normal, context(rx_role, 2));\n        stream.match(rx_NAME);\n        token = 'keyword';\n        break;\n      case 2:\n        change(state, to_normal, context(rx_role, 3));\n        stream.match(/^:/);\n        token = 'meta';\n        break;\n      case 3:\n        change(state, to_normal, context(rx_role, 4));\n        stream.match(rx_TAIL);\n        break;\n      default:\n        change(state, to_normal);\n      }\n    } else if (phase(state) == rx_substitution_ref ||\n               stream.match(rx_substitution_ref, false)) {\n\n      switch (stage(state)) {\n      case 0:\n        change(state, to_normal, context(rx_substitution_ref, 1));\n        stream.match(rx_substitution_text);\n        token = 'variable-2';\n        break;\n      case 1:\n        change(state, to_normal, context(rx_substitution_ref, 2));\n        if (stream.match(/^_?_?/)) token = 'link';\n        break;\n      default:\n        change(state, to_normal);\n      }\n    } else if (stream.match(rx_footnote_ref)) {\n      change(state, to_normal);\n      token = 'quote';\n    } else if (stream.match(rx_citation_ref)) {\n      change(state, to_normal);\n      token = 'quote';\n    } else if (stream.match(rx_link_ref1)) {\n      change(state, to_normal);\n      if (!stream.peek() || stream.peek().match(/^\\W$/)) {\n        token = 'link';\n      }\n    } else if (phase(state) == rx_link_ref2 ||\n               stream.match(rx_link_ref2, false)) {\n\n      switch (stage(state)) {\n      case 0:\n        if (!stream.peek() || stream.peek().match(/^\\W$/)) {\n          change(state, to_normal, context(rx_link_ref2, 1));\n        } else {\n          stream.match(rx_link_ref2);\n        }\n        break;\n      case 1:\n        change(state, to_normal, context(rx_link_ref2, 2));\n        stream.match(/^`/);\n        token = 'link';\n        break;\n      case 2:\n        change(state, to_normal, context(rx_link_ref2, 3));\n        stream.match(rx_TEXT2);\n        break;\n      case 3:\n        change(state, to_normal, context(rx_link_ref2, 4));\n        stream.match(/^`_/);\n        token = 'link';\n        break;\n      default:\n        change(state, to_normal);\n      }\n    } else if (stream.match(rx_verbatim)) {\n      change(state, to_verbatim);\n    }\n\n    else {\n      if (stream.next()) change(state, to_normal);\n    }\n\n    return token;\n  }\n\n  ///////////////////////////////////////////////////////////////////////////\n  ///////////////////////////////////////////////////////////////////////////\n\n  function to_explicit(stream, state) {\n    var token = null;\n\n    if (phase(state) == rx_substitution ||\n        stream.match(rx_substitution, false)) {\n\n      switch (stage(state)) {\n      case 0:\n        change(state, to_explicit, context(rx_substitution, 1));\n        stream.match(rx_substitution_text);\n        token = 'variable-2';\n        break;\n      case 1:\n        change(state, to_explicit, context(rx_substitution, 2));\n        stream.match(rx_substitution_sepa);\n        break;\n      case 2:\n        change(state, to_explicit, context(rx_substitution, 3));\n        stream.match(rx_substitution_name);\n        token = 'keyword';\n        break;\n      case 3:\n        change(state, to_explicit, context(rx_substitution, 4));\n        stream.match(rx_substitution_tail);\n        token = 'meta';\n        break;\n      default:\n        change(state, to_normal);\n      }\n    } else if (phase(state) == rx_directive ||\n               stream.match(rx_directive, false)) {\n\n      switch (stage(state)) {\n      case 0:\n        change(state, to_explicit, context(rx_directive, 1));\n        stream.match(rx_directive_name);\n        token = 'keyword';\n\n        if (stream.current().match(/^(?:math|latex)/))\n          state.tmp_stex = true;\n        else if (stream.current().match(/^python/))\n          state.tmp_py = true;\n        break;\n      case 1:\n        change(state, to_explicit, context(rx_directive, 2));\n        stream.match(rx_directive_tail);\n        token = 'meta';\n\n        if (stream.match(/^latex\\s*$/) || state.tmp_stex) {\n          state.tmp_stex = undefined; change(state, to_mode, {\n            mode: mode_stex, local: CodeMirror.startState(mode_stex)\n          });\n        }\n        break;\n      case 2:\n        change(state, to_explicit, context(rx_directive, 3));\n        if (stream.match(/^python\\s*$/) || state.tmp_py) {\n          state.tmp_py = undefined; change(state, to_mode, {\n            mode: mode_python, local: CodeMirror.startState(mode_python)\n          });\n        }\n        break;\n      default:\n        change(state, to_normal);\n      }\n    } else if (phase(state) == rx_link || stream.match(rx_link, false)) {\n\n      switch (stage(state)) {\n      case 0:\n        change(state, to_explicit, context(rx_link, 1));\n        stream.match(rx_link_head);\n        stream.match(rx_link_name);\n        token = 'link';\n        break;\n      case 1:\n        change(state, to_explicit, context(rx_link, 2));\n        stream.match(rx_link_tail);\n        token = 'meta';\n        break;\n      default:\n        change(state, to_normal);\n      }\n    } else if (stream.match(rx_footnote)) {\n      change(state, to_normal);\n      token = 'quote';\n    } else if (stream.match(rx_citation)) {\n      change(state, to_normal);\n      token = 'quote';\n    }\n\n    else {\n      stream.eatSpace();\n      if (stream.eol()) {\n        change(state, to_normal);\n      } else {\n        stream.skipToEnd();\n        change(state, to_comment);\n        token = 'comment';\n      }\n    }\n\n    return token;\n  }\n\n  ///////////////////////////////////////////////////////////////////////////\n  ///////////////////////////////////////////////////////////////////////////\n\n  function to_comment(stream, state) {\n    return as_block(stream, state, 'comment');\n  }\n\n  function to_verbatim(stream, state) {\n    return as_block(stream, state, 'meta');\n  }\n\n  function as_block(stream, state, token) {\n    if (stream.eol() || stream.eatSpace()) {\n      stream.skipToEnd();\n      return token;\n    } else {\n      change(state, to_normal);\n      return null;\n    }\n  }\n\n  ///////////////////////////////////////////////////////////////////////////\n  ///////////////////////////////////////////////////////////////////////////\n\n  function to_mode(stream, state) {\n\n    if (state.ctx.mode && state.ctx.local) {\n\n      if (stream.sol()) {\n        if (!stream.eatSpace()) change(state, to_normal);\n        return null;\n      }\n\n      return state.ctx.mode.token(stream, state.ctx.local);\n    }\n\n    change(state, to_normal);\n    return null;\n  }\n\n  ///////////////////////////////////////////////////////////////////////////\n  ///////////////////////////////////////////////////////////////////////////\n\n  function context(phase, stage, mode, local) {\n    return {phase: phase, stage: stage, mode: mode, local: local};\n  }\n\n  function change(state, tok, ctx) {\n    state.tok = tok;\n    state.ctx = ctx || {};\n  }\n\n  function stage(state) {\n    return state.ctx.stage || 0;\n  }\n\n  function phase(state) {\n    return state.ctx.phase;\n  }\n\n  ///////////////////////////////////////////////////////////////////////////\n  ///////////////////////////////////////////////////////////////////////////\n\n  return {\n    startState: function () {\n      return {tok: to_normal, ctx: context(undefined, 0)};\n    },\n\n    copyState: function (state) {\n      var ctx = state.ctx, tmp = state.tmp;\n      if (ctx.local)\n        ctx = {mode: ctx.mode, local: CodeMirror.copyState(ctx.mode, ctx.local)};\n      if (tmp)\n        tmp = {mode: tmp.mode, local: CodeMirror.copyState(tmp.mode, tmp.local)};\n      return {tok: state.tok, ctx: ctx, tmp: tmp};\n    },\n\n    innerMode: function (state) {\n      return state.tmp      ? {state: state.tmp.local, mode: state.tmp.mode}\n      : state.ctx.mode ? {state: state.ctx.local, mode: state.ctx.mode}\n      : null;\n    },\n\n    token: function (stream, state) {\n      return state.tok(stream, state);\n    }\n  };\n}, 'python', 'stex');\n\n///////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////\n\nCodeMirror.defineMIME('text/x-rst', 'rst');\n\n///////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////\n\n});\n"],
  "mappings": "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",
  "names": ["CodeMirror", "phase", "stage"]
}
