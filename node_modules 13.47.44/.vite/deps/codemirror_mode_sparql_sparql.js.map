{
  "version": 3,
  "sources": ["../../.pnpm/codemirror@5.65.16/node_modules/codemirror/mode/sparql/sparql.js"],
  "sourcesContent": ["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"sparql\", function(config) {\n  var indentUnit = config.indentUnit;\n  var curPunc;\n\n  function wordRegexp(words) {\n    return new RegExp(\"^(?:\" + words.join(\"|\") + \")$\", \"i\");\n  }\n  var ops = wordRegexp([\"str\", \"lang\", \"langmatches\", \"datatype\", \"bound\", \"sameterm\", \"isiri\", \"isuri\",\n                        \"iri\", \"uri\", \"bnode\", \"count\", \"sum\", \"min\", \"max\", \"avg\", \"sample\",\n                        \"group_concat\", \"rand\", \"abs\", \"ceil\", \"floor\", \"round\", \"concat\", \"substr\", \"strlen\",\n                        \"replace\", \"ucase\", \"lcase\", \"encode_for_uri\", \"contains\", \"strstarts\", \"strends\",\n                        \"strbefore\", \"strafter\", \"year\", \"month\", \"day\", \"hours\", \"minutes\", \"seconds\",\n                        \"timezone\", \"tz\", \"now\", \"uuid\", \"struuid\", \"md5\", \"sha1\", \"sha256\", \"sha384\",\n                        \"sha512\", \"coalesce\", \"if\", \"strlang\", \"strdt\", \"isnumeric\", \"regex\", \"exists\",\n                        \"isblank\", \"isliteral\", \"a\", \"bind\"]);\n  var keywords = wordRegexp([\"base\", \"prefix\", \"select\", \"distinct\", \"reduced\", \"construct\", \"describe\",\n                             \"ask\", \"from\", \"named\", \"where\", \"order\", \"limit\", \"offset\", \"filter\", \"optional\",\n                             \"graph\", \"by\", \"asc\", \"desc\", \"as\", \"having\", \"undef\", \"values\", \"group\",\n                             \"minus\", \"in\", \"not\", \"service\", \"silent\", \"using\", \"insert\", \"delete\", \"union\",\n                             \"true\", \"false\", \"with\",\n                             \"data\", \"copy\", \"to\", \"move\", \"add\", \"create\", \"drop\", \"clear\", \"load\", \"into\"]);\n  var operatorChars = /[*+\\-<>=&|\\^\\/!\\?]/;\n  var PN_CHARS = \"[A-Za-z_\\\\-0-9]\";\n  var PREFIX_START = new RegExp(\"[A-Za-z]\");\n  var PREFIX_REMAINDER = new RegExp(\"((\" + PN_CHARS + \"|\\\\.)*(\" + PN_CHARS + \"))?:\");\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    curPunc = null;\n    if (ch == \"$\" || ch == \"?\") {\n      if(ch == \"?\" && stream.match(/\\s/, false)){\n        return \"operator\";\n      }\n      stream.match(/^[A-Za-z0-9_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][A-Za-z0-9_\\u00B7\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u203F-\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]*/);\n      return \"variable-2\";\n    }\n    else if (ch == \"<\" && !stream.match(/^[\\s\\u00a0=]/, false)) {\n      stream.match(/^[^\\s\\u00a0>]*>?/);\n      return \"atom\";\n    }\n    else if (ch == \"\\\"\" || ch == \"'\") {\n      state.tokenize = tokenLiteral(ch);\n      return state.tokenize(stream, state);\n    }\n    else if (/[{}\\(\\),\\.;\\[\\]]/.test(ch)) {\n      curPunc = ch;\n      return \"bracket\";\n    }\n    else if (ch == \"#\") {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n    else if (operatorChars.test(ch)) {\n      return \"operator\";\n    }\n    else if (ch == \":\") {\n      eatPnLocal(stream);\n      return \"atom\";\n    }\n    else if (ch == \"@\") {\n      stream.eatWhile(/[a-z\\d\\-]/i);\n      return \"meta\";\n    }\n    else if (PREFIX_START.test(ch) && stream.match(PREFIX_REMAINDER)) {\n        eatPnLocal(stream);\n        return \"atom\";\n    }\n    stream.eatWhile(/[_\\w\\d]/);\n    var word = stream.current();\n    if (ops.test(word))\n      return \"builtin\";\n    else if (keywords.test(word))\n      return \"keyword\";\n    else\n      return \"variable\";\n  }\n\n  function eatPnLocal(stream) {\n    stream.match(/(\\.(?=[\\w_\\-\\\\%])|[:\\w_-]|\\\\[-\\\\_~.!$&'()*+,;=/?#@%]|%[a-f\\d][a-f\\d])+/i);\n  }\n\n  function tokenLiteral(quote) {\n    return function(stream, state) {\n      var escaped = false, ch;\n      while ((ch = stream.next()) != null) {\n        if (ch == quote && !escaped) {\n          state.tokenize = tokenBase;\n          break;\n        }\n        escaped = !escaped && ch == \"\\\\\";\n      }\n      return \"string\";\n    };\n  }\n\n  function pushContext(state, type, col) {\n    state.context = {prev: state.context, indent: state.indent, col: col, type: type};\n  }\n  function popContext(state) {\n    state.indent = state.context.indent;\n    state.context = state.context.prev;\n  }\n\n  return {\n    startState: function() {\n      return {tokenize: tokenBase,\n              context: null,\n              indent: 0,\n              col: 0};\n    },\n\n    token: function(stream, state) {\n      if (stream.sol()) {\n        if (state.context && state.context.align == null) state.context.align = false;\n        state.indent = stream.indentation();\n      }\n      if (stream.eatSpace()) return null;\n      var style = state.tokenize(stream, state);\n\n      if (style != \"comment\" && state.context && state.context.align == null && state.context.type != \"pattern\") {\n        state.context.align = true;\n      }\n\n      if (curPunc == \"(\") pushContext(state, \")\", stream.column());\n      else if (curPunc == \"[\") pushContext(state, \"]\", stream.column());\n      else if (curPunc == \"{\") pushContext(state, \"}\", stream.column());\n      else if (/[\\]\\}\\)]/.test(curPunc)) {\n        while (state.context && state.context.type == \"pattern\") popContext(state);\n        if (state.context && curPunc == state.context.type) {\n          popContext(state);\n          if (curPunc == \"}\" && state.context && state.context.type == \"pattern\")\n            popContext(state);\n        }\n      }\n      else if (curPunc == \".\" && state.context && state.context.type == \"pattern\") popContext(state);\n      else if (/atom|string|variable/.test(style) && state.context) {\n        if (/[\\}\\]]/.test(state.context.type))\n          pushContext(state, \"pattern\", stream.column());\n        else if (state.context.type == \"pattern\" && !state.context.align) {\n          state.context.align = true;\n          state.context.col = stream.column();\n        }\n      }\n\n      return style;\n    },\n\n    indent: function(state, textAfter) {\n      var firstChar = textAfter && textAfter.charAt(0);\n      var context = state.context;\n      if (/[\\]\\}]/.test(firstChar))\n        while (context && context.type == \"pattern\") context = context.prev;\n\n      var closing = context && firstChar == context.type;\n      if (!context)\n        return 0;\n      else if (context.type == \"pattern\")\n        return context.col;\n      else if (context.align)\n        return context.col + (closing ? 0 : 1);\n      else\n        return context.indent + (closing ? 0 : indentUnit);\n    },\n\n    lineComment: \"#\"\n  };\n});\n\nCodeMirror.defineMIME(\"application/sparql-query\", \"sparql\");\n\n});\n"],
  "mappings": "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",
  "names": ["CodeMirror"]
}
