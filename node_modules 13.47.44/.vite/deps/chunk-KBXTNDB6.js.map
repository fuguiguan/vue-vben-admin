{
  "version": 3,
  "sources": ["../../.pnpm/codemirror@5.65.16/node_modules/codemirror/mode/coffeescript/coffeescript.js"],
  "sourcesContent": ["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n/**\n * Link to the project's GitHub page:\n * https://github.com/pickhardt/coffeescript-codemirror-mode\n */\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"coffeescript\", function(conf, parserConf) {\n  var ERRORCLASS = \"error\";\n\n  function wordRegexp(words) {\n    return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n  }\n\n  var operators = /^(?:->|=>|\\+[+=]?|-[\\-=]?|\\*[\\*=]?|\\/[\\/=]?|[=!]=|<[><]?=?|>>?=?|%=?|&=?|\\|=?|\\^=?|\\~|!|\\?|(or|and|\\|\\||&&|\\?)=)/;\n  var delimiters = /^(?:[()\\[\\]{},:`=;]|\\.\\.?\\.?)/;\n  var identifiers = /^[_A-Za-z$][_A-Za-z$0-9]*/;\n  var atProp = /^@[_A-Za-z$][_A-Za-z$0-9]*/;\n\n  var wordOperators = wordRegexp([\"and\", \"or\", \"not\",\n                                  \"is\", \"isnt\", \"in\",\n                                  \"instanceof\", \"typeof\"]);\n  var indentKeywords = [\"for\", \"while\", \"loop\", \"if\", \"unless\", \"else\",\n                        \"switch\", \"try\", \"catch\", \"finally\", \"class\"];\n  var commonKeywords = [\"break\", \"by\", \"continue\", \"debugger\", \"delete\",\n                        \"do\", \"in\", \"of\", \"new\", \"return\", \"then\",\n                        \"this\", \"@\", \"throw\", \"when\", \"until\", \"extends\"];\n\n  var keywords = wordRegexp(indentKeywords.concat(commonKeywords));\n\n  indentKeywords = wordRegexp(indentKeywords);\n\n\n  var stringPrefixes = /^('{3}|\\\"{3}|['\\\"])/;\n  var regexPrefixes = /^(\\/{3}|\\/)/;\n  var commonConstants = [\"Infinity\", \"NaN\", \"undefined\", \"null\", \"true\", \"false\", \"on\", \"off\", \"yes\", \"no\"];\n  var constants = wordRegexp(commonConstants);\n\n  // Tokenizers\n  function tokenBase(stream, state) {\n    // Handle scope changes\n    if (stream.sol()) {\n      if (state.scope.align === null) state.scope.align = false;\n      var scopeOffset = state.scope.offset;\n      if (stream.eatSpace()) {\n        var lineOffset = stream.indentation();\n        if (lineOffset > scopeOffset && state.scope.type == \"coffee\") {\n          return \"indent\";\n        } else if (lineOffset < scopeOffset) {\n          return \"dedent\";\n        }\n        return null;\n      } else {\n        if (scopeOffset > 0) {\n          dedent(stream, state);\n        }\n      }\n    }\n    if (stream.eatSpace()) {\n      return null;\n    }\n\n    var ch = stream.peek();\n\n    // Handle docco title comment (single line)\n    if (stream.match(\"####\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n\n    // Handle multi line comments\n    if (stream.match(\"###\")) {\n      state.tokenize = longComment;\n      return state.tokenize(stream, state);\n    }\n\n    // Single line comment\n    if (ch === \"#\") {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n\n    // Handle number literals\n    if (stream.match(/^-?[0-9\\.]/, false)) {\n      var floatLiteral = false;\n      // Floats\n      if (stream.match(/^-?\\d*\\.\\d+(e[\\+\\-]?\\d+)?/i)) {\n        floatLiteral = true;\n      }\n      if (stream.match(/^-?\\d+\\.\\d*/)) {\n        floatLiteral = true;\n      }\n      if (stream.match(/^-?\\.\\d+/)) {\n        floatLiteral = true;\n      }\n\n      if (floatLiteral) {\n        // prevent from getting extra . on 1..\n        if (stream.peek() == \".\"){\n          stream.backUp(1);\n        }\n        return \"number\";\n      }\n      // Integers\n      var intLiteral = false;\n      // Hex\n      if (stream.match(/^-?0x[0-9a-f]+/i)) {\n        intLiteral = true;\n      }\n      // Decimal\n      if (stream.match(/^-?[1-9]\\d*(e[\\+\\-]?\\d+)?/)) {\n        intLiteral = true;\n      }\n      // Zero by itself with no other piece of number.\n      if (stream.match(/^-?0(?![\\dx])/i)) {\n        intLiteral = true;\n      }\n      if (intLiteral) {\n        return \"number\";\n      }\n    }\n\n    // Handle strings\n    if (stream.match(stringPrefixes)) {\n      state.tokenize = tokenFactory(stream.current(), false, \"string\");\n      return state.tokenize(stream, state);\n    }\n    // Handle regex literals\n    if (stream.match(regexPrefixes)) {\n      if (stream.current() != \"/\" || stream.match(/^.*\\//, false)) { // prevent highlight of division\n        state.tokenize = tokenFactory(stream.current(), true, \"string-2\");\n        return state.tokenize(stream, state);\n      } else {\n        stream.backUp(1);\n      }\n    }\n\n\n\n    // Handle operators and delimiters\n    if (stream.match(operators) || stream.match(wordOperators)) {\n      return \"operator\";\n    }\n    if (stream.match(delimiters)) {\n      return \"punctuation\";\n    }\n\n    if (stream.match(constants)) {\n      return \"atom\";\n    }\n\n    if (stream.match(atProp) || state.prop && stream.match(identifiers)) {\n      return \"property\";\n    }\n\n    if (stream.match(keywords)) {\n      return \"keyword\";\n    }\n\n    if (stream.match(identifiers)) {\n      return \"variable\";\n    }\n\n    // Handle non-detected items\n    stream.next();\n    return ERRORCLASS;\n  }\n\n  function tokenFactory(delimiter, singleline, outclass) {\n    return function(stream, state) {\n      while (!stream.eol()) {\n        stream.eatWhile(/[^'\"\\/\\\\]/);\n        if (stream.eat(\"\\\\\")) {\n          stream.next();\n          if (singleline && stream.eol()) {\n            return outclass;\n          }\n        } else if (stream.match(delimiter)) {\n          state.tokenize = tokenBase;\n          return outclass;\n        } else {\n          stream.eat(/['\"\\/]/);\n        }\n      }\n      if (singleline) {\n        if (parserConf.singleLineStringErrors) {\n          outclass = ERRORCLASS;\n        } else {\n          state.tokenize = tokenBase;\n        }\n      }\n      return outclass;\n    };\n  }\n\n  function longComment(stream, state) {\n    while (!stream.eol()) {\n      stream.eatWhile(/[^#]/);\n      if (stream.match(\"###\")) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      stream.eatWhile(\"#\");\n    }\n    return \"comment\";\n  }\n\n  function indent(stream, state, type) {\n    type = type || \"coffee\";\n    var offset = 0, align = false, alignOffset = null;\n    for (var scope = state.scope; scope; scope = scope.prev) {\n      if (scope.type === \"coffee\" || scope.type == \"}\") {\n        offset = scope.offset + conf.indentUnit;\n        break;\n      }\n    }\n    if (type !== \"coffee\") {\n      align = null;\n      alignOffset = stream.column() + stream.current().length;\n    } else if (state.scope.align) {\n      state.scope.align = false;\n    }\n    state.scope = {\n      offset: offset,\n      type: type,\n      prev: state.scope,\n      align: align,\n      alignOffset: alignOffset\n    };\n  }\n\n  function dedent(stream, state) {\n    if (!state.scope.prev) return;\n    if (state.scope.type === \"coffee\") {\n      var _indent = stream.indentation();\n      var matched = false;\n      for (var scope = state.scope; scope; scope = scope.prev) {\n        if (_indent === scope.offset) {\n          matched = true;\n          break;\n        }\n      }\n      if (!matched) {\n        return true;\n      }\n      while (state.scope.prev && state.scope.offset !== _indent) {\n        state.scope = state.scope.prev;\n      }\n      return false;\n    } else {\n      state.scope = state.scope.prev;\n      return false;\n    }\n  }\n\n  function tokenLexer(stream, state) {\n    var style = state.tokenize(stream, state);\n    var current = stream.current();\n\n    // Handle scope changes.\n    if (current === \"return\") {\n      state.dedent = true;\n    }\n    if (((current === \"->\" || current === \"=>\") && stream.eol())\n        || style === \"indent\") {\n      indent(stream, state);\n    }\n    var delimiter_index = \"[({\".indexOf(current);\n    if (delimiter_index !== -1) {\n      indent(stream, state, \"])}\".slice(delimiter_index, delimiter_index+1));\n    }\n    if (indentKeywords.exec(current)){\n      indent(stream, state);\n    }\n    if (current == \"then\"){\n      dedent(stream, state);\n    }\n\n\n    if (style === \"dedent\") {\n      if (dedent(stream, state)) {\n        return ERRORCLASS;\n      }\n    }\n    delimiter_index = \"])}\".indexOf(current);\n    if (delimiter_index !== -1) {\n      while (state.scope.type == \"coffee\" && state.scope.prev)\n        state.scope = state.scope.prev;\n      if (state.scope.type == current)\n        state.scope = state.scope.prev;\n    }\n    if (state.dedent && stream.eol()) {\n      if (state.scope.type == \"coffee\" && state.scope.prev)\n        state.scope = state.scope.prev;\n      state.dedent = false;\n    }\n\n    return style;\n  }\n\n  var external = {\n    startState: function(basecolumn) {\n      return {\n        tokenize: tokenBase,\n        scope: {offset:basecolumn || 0, type:\"coffee\", prev: null, align: false},\n        prop: false,\n        dedent: 0\n      };\n    },\n\n    token: function(stream, state) {\n      var fillAlign = state.scope.align === null && state.scope;\n      if (fillAlign && stream.sol()) fillAlign.align = false;\n\n      var style = tokenLexer(stream, state);\n      if (style && style != \"comment\") {\n        if (fillAlign) fillAlign.align = true;\n        state.prop = style == \"punctuation\" && stream.current() == \".\"\n      }\n\n      return style;\n    },\n\n    indent: function(state, text) {\n      if (state.tokenize != tokenBase) return 0;\n      var scope = state.scope;\n      var closer = text && \"])}\".indexOf(text.charAt(0)) > -1;\n      if (closer) while (scope.type == \"coffee\" && scope.prev) scope = scope.prev;\n      var closes = closer && scope.type === text.charAt(0);\n      if (scope.align)\n        return scope.alignOffset - (closes ? 1 : 0);\n      else\n        return (closes ? scope.prev : scope).offset;\n    },\n\n    lineComment: \"#\",\n    fold: \"indent\"\n  };\n  return external;\n});\n\n// IANA registered media type\n// https://www.iana.org/assignments/media-types/\nCodeMirror.defineMIME(\"application/vnd.coffeescript\", \"coffeescript\");\n\nCodeMirror.defineMIME(\"text/x-coffeescript\", \"coffeescript\");\nCodeMirror.defineMIME(\"text/coffeescript\", \"coffeescript\");\n\n});\n"],
  "mappings": "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",
  "names": ["CodeMirror"]
}
