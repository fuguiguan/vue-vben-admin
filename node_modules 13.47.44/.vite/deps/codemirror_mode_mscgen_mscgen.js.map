{
  "version": 3,
  "sources": ["../../.pnpm/codemirror@5.65.16/node_modules/codemirror/mode/mscgen/mscgen.js"],
  "sourcesContent": ["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n// mode(s) for the sequence chart dsl's mscgen, x√π and msgenny\n// For more information on mscgen, see the site of the original author:\n// http://www.mcternan.me.uk/mscgen\n//\n// This mode for mscgen and the two derivative languages were\n// originally made for use in the mscgen_js interpreter\n// (https://sverweij.github.io/mscgen_js)\n\n(function(mod) {\n  if ( typeof exports == \"object\" && typeof module == \"object\")// CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if ( typeof define == \"function\" && define.amd)// AMD\n    define([\"../../lib/codemirror\"], mod);\n  else// Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var languages = {\n    mscgen: {\n      \"keywords\" : [\"msc\"],\n      \"options\" : [\"hscale\", \"width\", \"arcgradient\", \"wordwraparcs\"],\n      \"constants\" : [\"true\", \"false\", \"on\", \"off\"],\n      \"attributes\" : [\"label\", \"idurl\", \"id\", \"url\", \"linecolor\", \"linecolour\", \"textcolor\", \"textcolour\", \"textbgcolor\", \"textbgcolour\", \"arclinecolor\", \"arclinecolour\", \"arctextcolor\", \"arctextcolour\", \"arctextbgcolor\", \"arctextbgcolour\", \"arcskip\"],\n      \"brackets\" : [\"\\\\{\", \"\\\\}\"], // [ and  ] are brackets too, but these get handled in with lists\n      \"arcsWords\" : [\"note\", \"abox\", \"rbox\", \"box\"],\n      \"arcsOthers\" : [\"\\\\|\\\\|\\\\|\", \"\\\\.\\\\.\\\\.\", \"---\", \"--\", \"<->\", \"==\", \"<<=>>\", \"<=>\", \"\\\\.\\\\.\", \"<<>>\", \"::\", \"<:>\", \"->\", \"=>>\", \"=>\", \">>\", \":>\", \"<-\", \"<<=\", \"<=\", \"<<\", \"<:\", \"x-\", \"-x\"],\n      \"singlecomment\" : [\"//\", \"#\"],\n      \"operators\" : [\"=\"]\n    },\n    xu: {\n      \"keywords\" : [\"msc\", \"xu\"],\n      \"options\" : [\"hscale\", \"width\", \"arcgradient\", \"wordwraparcs\", \"wordwrapentities\", \"watermark\"],\n      \"constants\" : [\"true\", \"false\", \"on\", \"off\", \"auto\"],\n      \"attributes\" : [\"label\", \"idurl\", \"id\", \"url\", \"linecolor\", \"linecolour\", \"textcolor\", \"textcolour\", \"textbgcolor\", \"textbgcolour\", \"arclinecolor\", \"arclinecolour\", \"arctextcolor\", \"arctextcolour\", \"arctextbgcolor\", \"arctextbgcolour\", \"arcskip\", \"title\", \"deactivate\", \"activate\", \"activation\"],\n      \"brackets\" : [\"\\\\{\", \"\\\\}\"],  // [ and  ] are brackets too, but these get handled in with lists\n      \"arcsWords\" : [\"note\", \"abox\", \"rbox\", \"box\", \"alt\", \"else\", \"opt\", \"break\", \"par\", \"seq\", \"strict\", \"neg\", \"critical\", \"ignore\", \"consider\", \"assert\", \"loop\", \"ref\", \"exc\"],\n      \"arcsOthers\" : [\"\\\\|\\\\|\\\\|\", \"\\\\.\\\\.\\\\.\", \"---\", \"--\", \"<->\", \"==\", \"<<=>>\", \"<=>\", \"\\\\.\\\\.\", \"<<>>\", \"::\", \"<:>\", \"->\", \"=>>\", \"=>\", \">>\", \":>\", \"<-\", \"<<=\", \"<=\", \"<<\", \"<:\", \"x-\", \"-x\"],\n      \"singlecomment\" : [\"//\", \"#\"],\n      \"operators\" : [\"=\"]\n    },\n    msgenny: {\n      \"keywords\" : null,\n      \"options\" : [\"hscale\", \"width\", \"arcgradient\", \"wordwraparcs\", \"wordwrapentities\", \"watermark\"],\n      \"constants\" : [\"true\", \"false\", \"on\", \"off\", \"auto\"],\n      \"attributes\" : null,\n      \"brackets\" : [\"\\\\{\", \"\\\\}\"],\n      \"arcsWords\" : [\"note\", \"abox\", \"rbox\", \"box\", \"alt\", \"else\", \"opt\", \"break\", \"par\", \"seq\", \"strict\", \"neg\", \"critical\", \"ignore\", \"consider\", \"assert\", \"loop\", \"ref\", \"exc\"],\n      \"arcsOthers\" : [\"\\\\|\\\\|\\\\|\", \"\\\\.\\\\.\\\\.\", \"---\", \"--\", \"<->\", \"==\", \"<<=>>\", \"<=>\", \"\\\\.\\\\.\", \"<<>>\", \"::\", \"<:>\", \"->\", \"=>>\", \"=>\", \">>\", \":>\", \"<-\", \"<<=\", \"<=\", \"<<\", \"<:\", \"x-\", \"-x\"],\n      \"singlecomment\" : [\"//\", \"#\"],\n      \"operators\" : [\"=\"]\n    }\n  }\n\n  CodeMirror.defineMode(\"mscgen\", function(_, modeConfig) {\n    var language = languages[modeConfig && modeConfig.language || \"mscgen\"]\n    return {\n      startState: startStateFn,\n      copyState: copyStateFn,\n      token: produceTokenFunction(language),\n      lineComment : \"#\",\n      blockCommentStart : \"/*\",\n      blockCommentEnd : \"*/\"\n    };\n  });\n\n  CodeMirror.defineMIME(\"text/x-mscgen\", \"mscgen\");\n  CodeMirror.defineMIME(\"text/x-xu\", {name: \"mscgen\", language: \"xu\"});\n  CodeMirror.defineMIME(\"text/x-msgenny\", {name: \"mscgen\", language: \"msgenny\"});\n\n  function wordRegexpBoundary(pWords) {\n    return new RegExp(\"^\\\\b(?:\" + pWords.join(\"|\") + \")\\\\b\", \"i\");\n  }\n\n  function wordRegexp(pWords) {\n    return new RegExp(\"^(?:\" + pWords.join(\"|\") + \")\", \"i\");\n  }\n\n  function startStateFn() {\n    return {\n      inComment : false,\n      inString : false,\n      inAttributeList : false,\n      inScript : false\n    };\n  }\n\n  function copyStateFn(pState) {\n    return {\n      inComment : pState.inComment,\n      inString : pState.inString,\n      inAttributeList : pState.inAttributeList,\n      inScript : pState.inScript\n    };\n  }\n\n  function produceTokenFunction(pConfig) {\n\n    return function(pStream, pState) {\n      if (pStream.match(wordRegexp(pConfig.brackets), true, true)) {\n        return \"bracket\";\n      }\n      /* comments */\n      if (!pState.inComment) {\n        if (pStream.match(/\\/\\*[^\\*\\/]*/, true, true)) {\n          pState.inComment = true;\n          return \"comment\";\n        }\n        if (pStream.match(wordRegexp(pConfig.singlecomment), true, true)) {\n          pStream.skipToEnd();\n          return \"comment\";\n        }\n      }\n      if (pState.inComment) {\n        if (pStream.match(/[^\\*\\/]*\\*\\//, true, true))\n          pState.inComment = false;\n        else\n          pStream.skipToEnd();\n        return \"comment\";\n      }\n      /* strings */\n      if (!pState.inString && pStream.match(/\\\"(\\\\\\\"|[^\\\"])*/, true, true)) {\n        pState.inString = true;\n        return \"string\";\n      }\n      if (pState.inString) {\n        if (pStream.match(/[^\\\"]*\\\"/, true, true))\n          pState.inString = false;\n        else\n          pStream.skipToEnd();\n        return \"string\";\n      }\n      /* keywords & operators */\n      if (!!pConfig.keywords && pStream.match(wordRegexpBoundary(pConfig.keywords), true, true))\n        return \"keyword\";\n\n      if (pStream.match(wordRegexpBoundary(pConfig.options), true, true))\n        return \"keyword\";\n\n      if (pStream.match(wordRegexpBoundary(pConfig.arcsWords), true, true))\n        return \"keyword\";\n\n      if (pStream.match(wordRegexp(pConfig.arcsOthers), true, true))\n        return \"keyword\";\n\n      if (!!pConfig.operators && pStream.match(wordRegexp(pConfig.operators), true, true))\n        return \"operator\";\n\n      if (!!pConfig.constants && pStream.match(wordRegexp(pConfig.constants), true, true))\n        return \"variable\";\n\n      /* attribute lists */\n      if (!pConfig.inAttributeList && !!pConfig.attributes && pStream.match('[', true, true)) {\n        pConfig.inAttributeList = true;\n        return \"bracket\";\n      }\n      if (pConfig.inAttributeList) {\n        if (pConfig.attributes !== null && pStream.match(wordRegexpBoundary(pConfig.attributes), true, true)) {\n          return \"attribute\";\n        }\n        if (pStream.match(']', true, true)) {\n          pConfig.inAttributeList = false;\n          return \"bracket\";\n        }\n      }\n\n      pStream.next();\n      return \"base\";\n    };\n  }\n\n});\n"],
  "mappings": "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",
  "names": ["CodeMirror"]
}
