import {
  __commonJS
} from "./chunk-WGAPYIUP.js";

// node_modules/.pnpm/ant-design-vue@4.2.1_vue@3.4.25_typescript@5.4.5_/node_modules/ant-design-vue/lib/_util/type.js
var require_type = __commonJS({
  "node_modules/.pnpm/ant-design-vue@4.2.1_vue@3.4.25_typescript@5.4.5_/node_modules/ant-design-vue/lib/_util/type.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.anyType = anyType;
    exports.arrayType = arrayType;
    exports.booleanType = booleanType;
    exports.eventType = eventType;
    exports.functionType = functionType;
    exports.objectType = objectType;
    exports.someType = someType;
    exports.stringType = stringType;
    exports.tupleNum = exports.tuple = void 0;
    exports.vNodeType = vNodeType;
    exports.withInstall = void 0;
    var tuple = function() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return args;
    };
    exports.tuple = tuple;
    var tupleNum = function() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      return args;
    };
    exports.tupleNum = tupleNum;
    var withInstall = (comp) => {
      const c = comp;
      c.install = function(app) {
        app.component(c.displayName || c.name, comp);
      };
      return comp;
    };
    exports.withInstall = withInstall;
    function eventType() {
      return {
        type: [Function, Array]
      };
    }
    function objectType(defaultVal) {
      return {
        type: Object,
        default: defaultVal
      };
    }
    function booleanType(defaultVal) {
      return {
        type: Boolean,
        default: defaultVal
      };
    }
    function functionType(defaultVal) {
      return {
        type: Function,
        default: defaultVal
      };
    }
    function anyType(defaultVal, required) {
      const type = {
        validator: () => true,
        default: defaultVal
      };
      return required ? type : type;
    }
    function vNodeType() {
      return {
        validator: () => true
      };
    }
    function arrayType(defaultVal) {
      return {
        type: Array,
        default: defaultVal
      };
    }
    function stringType(defaultVal) {
      return {
        type: String,
        default: defaultVal
      };
    }
    function someType(types, defaultVal) {
      return types ? {
        type: types,
        default: defaultVal
      } : anyType(defaultVal);
    }
  }
});

export {
  require_type
};
//# sourceMappingURL=chunk-NP3TU2RP.js.map
