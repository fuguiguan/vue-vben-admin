{
  "version": 3,
  "sources": ["../../.pnpm/codemirror@5.65.16/node_modules/codemirror/mode/twig/twig.js"],
  "sourcesContent": ["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"),  require(\"../../addon/mode/multiplex\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../../addon/mode/multiplex\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"twig:inner\", function() {\n    var keywords = [\"and\", \"as\", \"autoescape\", \"endautoescape\", \"block\", \"do\", \"endblock\", \"else\", \"elseif\", \"extends\", \"for\", \"endfor\", \"embed\", \"endembed\", \"filter\", \"endfilter\", \"flush\", \"from\", \"if\", \"endif\", \"in\", \"is\", \"include\", \"import\", \"not\", \"or\", \"set\", \"spaceless\", \"endspaceless\", \"with\", \"endwith\", \"trans\", \"endtrans\", \"blocktrans\", \"endblocktrans\", \"macro\", \"endmacro\", \"use\", \"verbatim\", \"endverbatim\"],\n        operator = /^[+\\-*&%=<>!?|~^]/,\n        sign = /^[:\\[\\(\\{]/,\n        atom = [\"true\", \"false\", \"null\", \"empty\", \"defined\", \"divisibleby\", \"divisible by\", \"even\", \"odd\", \"iterable\", \"sameas\", \"same as\"],\n        number = /^(\\d[+\\-\\*\\/])?\\d+(\\.\\d+)?/;\n\n    keywords = new RegExp(\"((\" + keywords.join(\")|(\") + \"))\\\\b\");\n    atom = new RegExp(\"((\" + atom.join(\")|(\") + \"))\\\\b\");\n\n    function tokenBase (stream, state) {\n      var ch = stream.peek();\n\n      //Comment\n      if (state.incomment) {\n        if (!stream.skipTo(\"#}\")) {\n          stream.skipToEnd();\n        } else {\n          stream.eatWhile(/\\#|}/);\n          state.incomment = false;\n        }\n        return \"comment\";\n      //Tag\n      } else if (state.intag) {\n        //After operator\n        if (state.operator) {\n          state.operator = false;\n          if (stream.match(atom)) {\n            return \"atom\";\n          }\n          if (stream.match(number)) {\n            return \"number\";\n          }\n        }\n        //After sign\n        if (state.sign) {\n          state.sign = false;\n          if (stream.match(atom)) {\n            return \"atom\";\n          }\n          if (stream.match(number)) {\n            return \"number\";\n          }\n        }\n\n        if (state.instring) {\n          if (ch == state.instring) {\n            state.instring = false;\n          }\n          stream.next();\n          return \"string\";\n        } else if (ch == \"'\" || ch == '\"') {\n          state.instring = ch;\n          stream.next();\n          return \"string\";\n        } else if (stream.match(state.intag + \"}\") || stream.eat(\"-\") && stream.match(state.intag + \"}\")) {\n          state.intag = false;\n          return \"tag\";\n        } else if (stream.match(operator)) {\n          state.operator = true;\n          return \"operator\";\n        } else if (stream.match(sign)) {\n          state.sign = true;\n        } else {\n          if (stream.eat(\" \") || stream.sol()) {\n            if (stream.match(keywords)) {\n              return \"keyword\";\n            }\n            if (stream.match(atom)) {\n              return \"atom\";\n            }\n            if (stream.match(number)) {\n              return \"number\";\n            }\n            if (stream.sol()) {\n              stream.next();\n            }\n          } else {\n            stream.next();\n          }\n\n        }\n        return \"variable\";\n      } else if (stream.eat(\"{\")) {\n        if (stream.eat(\"#\")) {\n          state.incomment = true;\n          if (!stream.skipTo(\"#}\")) {\n            stream.skipToEnd();\n          } else {\n            stream.eatWhile(/\\#|}/);\n            state.incomment = false;\n          }\n          return \"comment\";\n        //Open tag\n        } else if (ch = stream.eat(/\\{|%/)) {\n          //Cache close tag\n          state.intag = ch;\n          if (ch == \"{\") {\n            state.intag = \"}\";\n          }\n          stream.eat(\"-\");\n          return \"tag\";\n        }\n      }\n      stream.next();\n    };\n\n    return {\n      startState: function () {\n        return {};\n      },\n      token: function (stream, state) {\n        return tokenBase(stream, state);\n      }\n    };\n  });\n\n  CodeMirror.defineMode(\"twig\", function(config, parserConfig) {\n    var twigInner = CodeMirror.getMode(config, \"twig:inner\");\n    if (!parserConfig || !parserConfig.base) return twigInner;\n    return CodeMirror.multiplexingMode(\n      CodeMirror.getMode(config, parserConfig.base), {\n        open: /\\{[{#%]/, close: /[}#%]\\}/, mode: twigInner, parseDelimiters: true\n      }\n    );\n  });\n  CodeMirror.defineMIME(\"text/x-twig\", \"twig\");\n});\n"],
  "mappings": "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",
  "names": ["CodeMirror"]
}
