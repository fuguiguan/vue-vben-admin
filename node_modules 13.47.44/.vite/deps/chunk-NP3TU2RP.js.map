{
  "version": 3,
  "sources": ["../../.pnpm/ant-design-vue@4.2.1_vue@3.4.25_typescript@5.4.5_/node_modules/ant-design-vue/lib/_util/type.js"],
  "sourcesContent": ["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.anyType = anyType;\nexports.arrayType = arrayType;\nexports.booleanType = booleanType;\nexports.eventType = eventType;\nexports.functionType = functionType;\nexports.objectType = objectType;\nexports.someType = someType;\nexports.stringType = stringType;\nexports.tupleNum = exports.tuple = void 0;\nexports.vNodeType = vNodeType;\nexports.withInstall = void 0;\n// https://stackoverflow.com/questions/46176165/ways-to-get-string-literal-type-of-array-values-without-enum-overhead\nconst tuple = function () {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  return args;\n};\nexports.tuple = tuple;\nconst tupleNum = function () {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n  return args;\n};\nexports.tupleNum = tupleNum;\nconst withInstall = comp => {\n  const c = comp;\n  c.install = function (app) {\n    app.component(c.displayName || c.name, comp);\n  };\n  return comp;\n};\nexports.withInstall = withInstall;\nfunction eventType() {\n  return {\n    type: [Function, Array]\n  };\n}\nfunction objectType(defaultVal) {\n  return {\n    type: Object,\n    default: defaultVal\n  };\n}\nfunction booleanType(defaultVal) {\n  return {\n    type: Boolean,\n    default: defaultVal\n  };\n}\nfunction functionType(defaultVal) {\n  return {\n    type: Function,\n    default: defaultVal\n  };\n}\nfunction anyType(defaultVal, required) {\n  const type = {\n    validator: () => true,\n    default: defaultVal\n  };\n  return required ? type : type;\n}\nfunction vNodeType() {\n  return {\n    validator: () => true\n  };\n}\nfunction arrayType(defaultVal) {\n  return {\n    type: Array,\n    default: defaultVal\n  };\n}\nfunction stringType(defaultVal) {\n  return {\n    type: String,\n    default: defaultVal\n  };\n}\nfunction someType(types, defaultVal) {\n  return types ? {\n    type: types,\n    default: defaultVal\n  } : anyType(defaultVal);\n}"],
  "mappings": ";;;;;AAAA;AAAA;AAAA;AAEA,WAAO,eAAe,SAAS,cAAc;AAAA,MAC3C,OAAO;AAAA,IACT,CAAC;AACD,YAAQ,UAAU;AAClB,YAAQ,YAAY;AACpB,YAAQ,cAAc;AACtB,YAAQ,YAAY;AACpB,YAAQ,eAAe;AACvB,YAAQ,aAAa;AACrB,YAAQ,WAAW;AACnB,YAAQ,aAAa;AACrB,YAAQ,WAAW,QAAQ,QAAQ;AACnC,YAAQ,YAAY;AACpB,YAAQ,cAAc;AAEtB,QAAM,QAAQ,WAAY;AACxB,eAAS,OAAO,UAAU,QAAQ,OAAO,IAAI,MAAM,IAAI,GAAG,OAAO,GAAG,OAAO,MAAM,QAAQ;AACvF,aAAK,IAAI,IAAI,UAAU,IAAI;AAAA,MAC7B;AACA,aAAO;AAAA,IACT;AACA,YAAQ,QAAQ;AAChB,QAAM,WAAW,WAAY;AAC3B,eAAS,QAAQ,UAAU,QAAQ,OAAO,IAAI,MAAM,KAAK,GAAG,QAAQ,GAAG,QAAQ,OAAO,SAAS;AAC7F,aAAK,KAAK,IAAI,UAAU,KAAK;AAAA,MAC/B;AACA,aAAO;AAAA,IACT;AACA,YAAQ,WAAW;AACnB,QAAM,cAAc,UAAQ;AAC1B,YAAM,IAAI;AACV,QAAE,UAAU,SAAU,KAAK;AACzB,YAAI,UAAU,EAAE,eAAe,EAAE,MAAM,IAAI;AAAA,MAC7C;AACA,aAAO;AAAA,IACT;AACA,YAAQ,cAAc;AACtB,aAAS,YAAY;AACnB,aAAO;AAAA,QACL,MAAM,CAAC,UAAU,KAAK;AAAA,MACxB;AAAA,IACF;AACA,aAAS,WAAW,YAAY;AAC9B,aAAO;AAAA,QACL,MAAM;AAAA,QACN,SAAS;AAAA,MACX;AAAA,IACF;AACA,aAAS,YAAY,YAAY;AAC/B,aAAO;AAAA,QACL,MAAM;AAAA,QACN,SAAS;AAAA,MACX;AAAA,IACF;AACA,aAAS,aAAa,YAAY;AAChC,aAAO;AAAA,QACL,MAAM;AAAA,QACN,SAAS;AAAA,MACX;AAAA,IACF;AACA,aAAS,QAAQ,YAAY,UAAU;AACrC,YAAM,OAAO;AAAA,QACX,WAAW,MAAM;AAAA,QACjB,SAAS;AAAA,MACX;AACA,aAAO,WAAW,OAAO;AAAA,IAC3B;AACA,aAAS,YAAY;AACnB,aAAO;AAAA,QACL,WAAW,MAAM;AAAA,MACnB;AAAA,IACF;AACA,aAAS,UAAU,YAAY;AAC7B,aAAO;AAAA,QACL,MAAM;AAAA,QACN,SAAS;AAAA,MACX;AAAA,IACF;AACA,aAAS,WAAW,YAAY;AAC9B,aAAO;AAAA,QACL,MAAM;AAAA,QACN,SAAS;AAAA,MACX;AAAA,IACF;AACA,aAAS,SAAS,OAAO,YAAY;AACnC,aAAO,QAAQ;AAAA,QACb,MAAM;AAAA,QACN,SAAS;AAAA,MACX,IAAI,QAAQ,UAAU;AAAA,IACxB;AAAA;AAAA;",
  "names": []
}
