import {
  require_codemirror
} from "./chunk-GI5J7NWS.js";
import {
  __commonJS
} from "./chunk-WGAPYIUP.js";

// node_modules/.pnpm/codemirror@5.65.16/node_modules/codemirror/mode/mbox/mbox.js
var require_mbox = __commonJS({
  "node_modules/.pnpm/codemirror@5.65.16/node_modules/codemirror/mode/mbox/mbox.js"(exports, module) {
    (function(mod) {
      if (typeof exports == "object" && typeof module == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      var rfc2822 = [
        "From",
        "Sender",
        "Reply-To",
        "To",
        "Cc",
        "Bcc",
        "Message-ID",
        "In-Reply-To",
        "References",
        "Resent-From",
        "Resent-Sender",
        "Resent-To",
        "Resent-Cc",
        "Resent-Bcc",
        "Resent-Message-ID",
        "Return-Path",
        "Received"
      ];
      var rfc2822NoEmail = [
        "Date",
        "Subject",
        "Comments",
        "Keywords",
        "Resent-Date"
      ];
      CodeMirror2.registerHelper("hintWords", "mbox", rfc2822.concat(rfc2822NoEmail));
      var whitespace = /^[ \t]/;
      var separator = /^From /;
      var rfc2822Header = new RegExp("^(" + rfc2822.join("|") + "): ");
      var rfc2822HeaderNoEmail = new RegExp("^(" + rfc2822NoEmail.join("|") + "): ");
      var header = /^[^:]+:/;
      var email = /^[^ ]+@[^ ]+/;
      var untilEmail = /^.*?(?=[^ ]+?@[^ ]+)/;
      var bracketedEmail = /^<.*?>/;
      var untilBracketedEmail = /^.*?(?=<.*>)/;
      function styleForHeader(header2) {
        if (header2 === "Subject")
          return "header";
        return "string";
      }
      function readToken(stream, state) {
        if (stream.sol()) {
          state.inSeparator = false;
          if (state.inHeader && stream.match(whitespace)) {
            return null;
          } else {
            state.inHeader = false;
            state.header = null;
          }
          if (stream.match(separator)) {
            state.inHeaders = true;
            state.inSeparator = true;
            return "atom";
          }
          var match;
          var emailPermitted = false;
          if ((match = stream.match(rfc2822HeaderNoEmail)) || (emailPermitted = true) && (match = stream.match(rfc2822Header))) {
            state.inHeaders = true;
            state.inHeader = true;
            state.emailPermitted = emailPermitted;
            state.header = match[1];
            return "atom";
          }
          if (state.inHeaders && (match = stream.match(header))) {
            state.inHeader = true;
            state.emailPermitted = true;
            state.header = match[1];
            return "atom";
          }
          state.inHeaders = false;
          stream.skipToEnd();
          return null;
        }
        if (state.inSeparator) {
          if (stream.match(email))
            return "link";
          if (stream.match(untilEmail))
            return "atom";
          stream.skipToEnd();
          return "atom";
        }
        if (state.inHeader) {
          var style = styleForHeader(state.header);
          if (state.emailPermitted) {
            if (stream.match(bracketedEmail))
              return style + " link";
            if (stream.match(untilBracketedEmail))
              return style;
          }
          stream.skipToEnd();
          return style;
        }
        stream.skipToEnd();
        return null;
      }
      ;
      CodeMirror2.defineMode("mbox", function() {
        return {
          startState: function() {
            return {
              // Is in a mbox separator
              inSeparator: false,
              // Is in a mail header
              inHeader: false,
              // If bracketed email is permitted. Only applicable when inHeader
              emailPermitted: false,
              // Name of current header
              header: null,
              // Is in a region of mail headers
              inHeaders: false
            };
          },
          token: readToken,
          blankLine: function(state) {
            state.inHeaders = state.inSeparator = state.inHeader = false;
          }
        };
      });
      CodeMirror2.defineMIME("application/mbox", "mbox");
    });
  }
});
export default require_mbox();
//# sourceMappingURL=codemirror_mode_mbox_mbox.js.map
