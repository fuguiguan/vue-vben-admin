{
  "version": 3,
  "sources": ["../../.pnpm/codemirror@5.65.16/node_modules/codemirror/mode/turtle/turtle.js"],
  "sourcesContent": ["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"turtle\", function(config) {\n  var indentUnit = config.indentUnit;\n  var curPunc;\n\n  function wordRegexp(words) {\n    return new RegExp(\"^(?:\" + words.join(\"|\") + \")$\", \"i\");\n  }\n  var ops = wordRegexp([]);\n  var keywords = wordRegexp([\"@prefix\", \"@base\", \"a\"]);\n  var operatorChars = /[*+\\-<>=&|]/;\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    curPunc = null;\n    if (ch == \"<\" && !stream.match(/^[\\s\\u00a0=]/, false)) {\n      stream.match(/^[^\\s\\u00a0>]*>?/);\n      return \"atom\";\n    }\n    else if (ch == \"\\\"\" || ch == \"'\") {\n      state.tokenize = tokenLiteral(ch);\n      return state.tokenize(stream, state);\n    }\n    else if (/[{}\\(\\),\\.;\\[\\]]/.test(ch)) {\n      curPunc = ch;\n      return null;\n    }\n    else if (ch == \"#\") {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n    else if (operatorChars.test(ch)) {\n      stream.eatWhile(operatorChars);\n      return null;\n    }\n    else if (ch == \":\") {\n          return \"operator\";\n        } else {\n      stream.eatWhile(/[_\\w\\d]/);\n      if(stream.peek() == \":\") {\n        return \"variable-3\";\n      } else {\n             var word = stream.current();\n\n             if(keywords.test(word)) {\n                        return \"meta\";\n             }\n\n             if(ch >= \"A\" && ch <= \"Z\") {\n                    return \"comment\";\n                 } else {\n                        return \"keyword\";\n                 }\n      }\n      var word = stream.current();\n      if (ops.test(word))\n        return null;\n      else if (keywords.test(word))\n        return \"meta\";\n      else\n        return \"variable\";\n    }\n  }\n\n  function tokenLiteral(quote) {\n    return function(stream, state) {\n      var escaped = false, ch;\n      while ((ch = stream.next()) != null) {\n        if (ch == quote && !escaped) {\n          state.tokenize = tokenBase;\n          break;\n        }\n        escaped = !escaped && ch == \"\\\\\";\n      }\n      return \"string\";\n    };\n  }\n\n  function pushContext(state, type, col) {\n    state.context = {prev: state.context, indent: state.indent, col: col, type: type};\n  }\n  function popContext(state) {\n    state.indent = state.context.indent;\n    state.context = state.context.prev;\n  }\n\n  return {\n    startState: function() {\n      return {tokenize: tokenBase,\n              context: null,\n              indent: 0,\n              col: 0};\n    },\n\n    token: function(stream, state) {\n      if (stream.sol()) {\n        if (state.context && state.context.align == null) state.context.align = false;\n        state.indent = stream.indentation();\n      }\n      if (stream.eatSpace()) return null;\n      var style = state.tokenize(stream, state);\n\n      if (style != \"comment\" && state.context && state.context.align == null && state.context.type != \"pattern\") {\n        state.context.align = true;\n      }\n\n      if (curPunc == \"(\") pushContext(state, \")\", stream.column());\n      else if (curPunc == \"[\") pushContext(state, \"]\", stream.column());\n      else if (curPunc == \"{\") pushContext(state, \"}\", stream.column());\n      else if (/[\\]\\}\\)]/.test(curPunc)) {\n        while (state.context && state.context.type == \"pattern\") popContext(state);\n        if (state.context && curPunc == state.context.type) popContext(state);\n      }\n      else if (curPunc == \".\" && state.context && state.context.type == \"pattern\") popContext(state);\n      else if (/atom|string|variable/.test(style) && state.context) {\n        if (/[\\}\\]]/.test(state.context.type))\n          pushContext(state, \"pattern\", stream.column());\n        else if (state.context.type == \"pattern\" && !state.context.align) {\n          state.context.align = true;\n          state.context.col = stream.column();\n        }\n      }\n\n      return style;\n    },\n\n    indent: function(state, textAfter) {\n      var firstChar = textAfter && textAfter.charAt(0);\n      var context = state.context;\n      if (/[\\]\\}]/.test(firstChar))\n        while (context && context.type == \"pattern\") context = context.prev;\n\n      var closing = context && firstChar == context.type;\n      if (!context)\n        return 0;\n      else if (context.type == \"pattern\")\n        return context.col;\n      else if (context.align)\n        return context.col + (closing ? 0 : 1);\n      else\n        return context.indent + (closing ? 0 : indentUnit);\n    },\n\n    lineComment: \"#\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/turtle\", \"turtle\");\n\n});\n"],
  "mappings": ";;;;;;;;AAAA;AAAA;AAGA,KAAC,SAAS,KAAK;AACb,UAAI,OAAO,WAAW,YAAY,OAAO,UAAU;AACjD,YAAI,oBAA+B;AAAA,eAC5B,OAAO,UAAU,cAAc,OAAO;AAC7C,eAAO,CAAC,sBAAsB,GAAG,GAAG;AAAA;AAEpC,YAAI,UAAU;AAAA,IAClB,GAAG,SAASA,aAAY;AACxB;AAEA,MAAAA,YAAW,WAAW,UAAU,SAAS,QAAQ;AAC/C,YAAI,aAAa,OAAO;AACxB,YAAI;AAEJ,iBAAS,WAAW,OAAO;AACzB,iBAAO,IAAI,OAAO,SAAS,MAAM,KAAK,GAAG,IAAI,MAAM,GAAG;AAAA,QACxD;AACA,YAAI,MAAM,WAAW,CAAC,CAAC;AACvB,YAAI,WAAW,WAAW,CAAC,WAAW,SAAS,GAAG,CAAC;AACnD,YAAI,gBAAgB;AAEpB,iBAAS,UAAU,QAAQ,OAAO;AAChC,cAAI,KAAK,OAAO,KAAK;AACrB,oBAAU;AACV,cAAI,MAAM,OAAO,CAAC,OAAO,MAAM,gBAAgB,KAAK,GAAG;AACrD,mBAAO,MAAM,kBAAkB;AAC/B,mBAAO;AAAA,UACT,WACS,MAAM,OAAQ,MAAM,KAAK;AAChC,kBAAM,WAAW,aAAa,EAAE;AAChC,mBAAO,MAAM,SAAS,QAAQ,KAAK;AAAA,UACrC,WACS,mBAAmB,KAAK,EAAE,GAAG;AACpC,sBAAU;AACV,mBAAO;AAAA,UACT,WACS,MAAM,KAAK;AAClB,mBAAO,UAAU;AACjB,mBAAO;AAAA,UACT,WACS,cAAc,KAAK,EAAE,GAAG;AAC/B,mBAAO,SAAS,aAAa;AAC7B,mBAAO;AAAA,UACT,WACS,MAAM,KAAK;AACd,mBAAO;AAAA,UACT,OAAO;AACT,mBAAO,SAAS,SAAS;AACzB,gBAAG,OAAO,KAAK,KAAK,KAAK;AACvB,qBAAO;AAAA,YACT,OAAO;AACA,kBAAI,OAAO,OAAO,QAAQ;AAE1B,kBAAG,SAAS,KAAK,IAAI,GAAG;AACb,uBAAO;AAAA,cAClB;AAEA,kBAAG,MAAM,OAAO,MAAM,KAAK;AACpB,uBAAO;AAAA,cACV,OAAO;AACA,uBAAO;AAAA,cACd;AAAA,YACX;AACA,gBAAI,OAAO,OAAO,QAAQ;AAC1B,gBAAI,IAAI,KAAK,IAAI;AACf,qBAAO;AAAA,qBACA,SAAS,KAAK,IAAI;AACzB,qBAAO;AAAA;AAEP,qBAAO;AAAA,UACX;AAAA,QACF;AAEA,iBAAS,aAAa,OAAO;AAC3B,iBAAO,SAAS,QAAQ,OAAO;AAC7B,gBAAI,UAAU,OAAO;AACrB,oBAAQ,KAAK,OAAO,KAAK,MAAM,MAAM;AACnC,kBAAI,MAAM,SAAS,CAAC,SAAS;AAC3B,sBAAM,WAAW;AACjB;AAAA,cACF;AACA,wBAAU,CAAC,WAAW,MAAM;AAAA,YAC9B;AACA,mBAAO;AAAA,UACT;AAAA,QACF;AAEA,iBAAS,YAAY,OAAO,MAAM,KAAK;AACrC,gBAAM,UAAU,EAAC,MAAM,MAAM,SAAS,QAAQ,MAAM,QAAQ,KAAU,KAAU;AAAA,QAClF;AACA,iBAAS,WAAW,OAAO;AACzB,gBAAM,SAAS,MAAM,QAAQ;AAC7B,gBAAM,UAAU,MAAM,QAAQ;AAAA,QAChC;AAEA,eAAO;AAAA,UACL,YAAY,WAAW;AACrB,mBAAO;AAAA,cAAC,UAAU;AAAA,cACV,SAAS;AAAA,cACT,QAAQ;AAAA,cACR,KAAK;AAAA,YAAC;AAAA,UAChB;AAAA,UAEA,OAAO,SAAS,QAAQ,OAAO;AAC7B,gBAAI,OAAO,IAAI,GAAG;AAChB,kBAAI,MAAM,WAAW,MAAM,QAAQ,SAAS;AAAM,sBAAM,QAAQ,QAAQ;AACxE,oBAAM,SAAS,OAAO,YAAY;AAAA,YACpC;AACA,gBAAI,OAAO,SAAS;AAAG,qBAAO;AAC9B,gBAAI,QAAQ,MAAM,SAAS,QAAQ,KAAK;AAExC,gBAAI,SAAS,aAAa,MAAM,WAAW,MAAM,QAAQ,SAAS,QAAQ,MAAM,QAAQ,QAAQ,WAAW;AACzG,oBAAM,QAAQ,QAAQ;AAAA,YACxB;AAEA,gBAAI,WAAW;AAAK,0BAAY,OAAO,KAAK,OAAO,OAAO,CAAC;AAAA,qBAClD,WAAW;AAAK,0BAAY,OAAO,KAAK,OAAO,OAAO,CAAC;AAAA,qBACvD,WAAW;AAAK,0BAAY,OAAO,KAAK,OAAO,OAAO,CAAC;AAAA,qBACvD,WAAW,KAAK,OAAO,GAAG;AACjC,qBAAO,MAAM,WAAW,MAAM,QAAQ,QAAQ;AAAW,2BAAW,KAAK;AACzE,kBAAI,MAAM,WAAW,WAAW,MAAM,QAAQ;AAAM,2BAAW,KAAK;AAAA,YACtE,WACS,WAAW,OAAO,MAAM,WAAW,MAAM,QAAQ,QAAQ;AAAW,yBAAW,KAAK;AAAA,qBACpF,uBAAuB,KAAK,KAAK,KAAK,MAAM,SAAS;AAC5D,kBAAI,SAAS,KAAK,MAAM,QAAQ,IAAI;AAClC,4BAAY,OAAO,WAAW,OAAO,OAAO,CAAC;AAAA,uBACtC,MAAM,QAAQ,QAAQ,aAAa,CAAC,MAAM,QAAQ,OAAO;AAChE,sBAAM,QAAQ,QAAQ;AACtB,sBAAM,QAAQ,MAAM,OAAO,OAAO;AAAA,cACpC;AAAA,YACF;AAEA,mBAAO;AAAA,UACT;AAAA,UAEA,QAAQ,SAAS,OAAO,WAAW;AACjC,gBAAI,YAAY,aAAa,UAAU,OAAO,CAAC;AAC/C,gBAAI,UAAU,MAAM;AACpB,gBAAI,SAAS,KAAK,SAAS;AACzB,qBAAO,WAAW,QAAQ,QAAQ;AAAW,0BAAU,QAAQ;AAEjE,gBAAI,UAAU,WAAW,aAAa,QAAQ;AAC9C,gBAAI,CAAC;AACH,qBAAO;AAAA,qBACA,QAAQ,QAAQ;AACvB,qBAAO,QAAQ;AAAA,qBACR,QAAQ;AACf,qBAAO,QAAQ,OAAO,UAAU,IAAI;AAAA;AAEpC,qBAAO,QAAQ,UAAU,UAAU,IAAI;AAAA,UAC3C;AAAA,UAEA,aAAa;AAAA,QACf;AAAA,MACF,CAAC;AAED,MAAAA,YAAW,WAAW,eAAe,QAAQ;AAAA,IAE7C,CAAC;AAAA;AAAA;",
  "names": ["CodeMirror"]
}
