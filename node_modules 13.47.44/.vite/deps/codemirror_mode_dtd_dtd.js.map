{
  "version": 3,
  "sources": ["../../.pnpm/codemirror@5.65.16/node_modules/codemirror/mode/dtd/dtd.js"],
  "sourcesContent": ["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n/*\n  DTD mode\n  Ported to CodeMirror by Peter Kroon <plakroon@gmail.com>\n  Report bugs/issues here: https://github.com/codemirror/CodeMirror/issues\n  GitHub: @peterkroon\n*/\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"dtd\", function(config) {\n  var indentUnit = config.indentUnit, type;\n  function ret(style, tp) {type = tp; return style;}\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n\n    if (ch == \"<\" && stream.eat(\"!\") ) {\n      if (stream.eatWhile(/[\\-]/)) {\n        state.tokenize = tokenSGMLComment;\n        return tokenSGMLComment(stream, state);\n      } else if (stream.eatWhile(/[\\w]/)) return ret(\"keyword\", \"doindent\");\n    } else if (ch == \"<\" && stream.eat(\"?\")) { //xml declaration\n      state.tokenize = inBlock(\"meta\", \"?>\");\n      return ret(\"meta\", ch);\n    } else if (ch == \"#\" && stream.eatWhile(/[\\w]/)) return ret(\"atom\", \"tag\");\n    else if (ch == \"|\") return ret(\"keyword\", \"separator\");\n    else if (ch.match(/[\\(\\)\\[\\]\\-\\.,\\+\\?>]/)) return ret(null, ch);//if(ch === \">\") return ret(null, \"endtag\"); else\n    else if (ch.match(/[\\[\\]]/)) return ret(\"rule\", ch);\n    else if (ch == \"\\\"\" || ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    } else if (stream.eatWhile(/[a-zA-Z\\?\\+\\d]/)) {\n      var sc = stream.current();\n      if( sc.substr(sc.length-1,sc.length).match(/\\?|\\+/) !== null )stream.backUp(1);\n      return ret(\"tag\", \"tag\");\n    } else if (ch == \"%\" || ch == \"*\" ) return ret(\"number\", \"number\");\n    else {\n      stream.eatWhile(/[\\w\\\\\\-_%.{,]/);\n      return ret(null, null);\n    }\n  }\n\n  function tokenSGMLComment(stream, state) {\n    var dashes = 0, ch;\n    while ((ch = stream.next()) != null) {\n      if (dashes >= 2 && ch == \">\") {\n        state.tokenize = tokenBase;\n        break;\n      }\n      dashes = (ch == \"-\") ? dashes + 1 : 0;\n    }\n    return ret(\"comment\", \"comment\");\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, ch;\n      while ((ch = stream.next()) != null) {\n        if (ch == quote && !escaped) {\n          state.tokenize = tokenBase;\n          break;\n        }\n        escaped = !escaped && ch == \"\\\\\";\n      }\n      return ret(\"string\", \"tag\");\n    };\n  }\n\n  function inBlock(style, terminator) {\n    return function(stream, state) {\n      while (!stream.eol()) {\n        if (stream.match(terminator)) {\n          state.tokenize = tokenBase;\n          break;\n        }\n        stream.next();\n      }\n      return style;\n    };\n  }\n\n  return {\n    startState: function(base) {\n      return {tokenize: tokenBase,\n              baseIndent: base || 0,\n              stack: []};\n    },\n\n    token: function(stream, state) {\n      if (stream.eatSpace()) return null;\n      var style = state.tokenize(stream, state);\n\n      var context = state.stack[state.stack.length-1];\n      if (stream.current() == \"[\" || type === \"doindent\" || type == \"[\") state.stack.push(\"rule\");\n      else if (type === \"endtag\") state.stack[state.stack.length-1] = \"endtag\";\n      else if (stream.current() == \"]\" || type == \"]\" || (type == \">\" && context == \"rule\")) state.stack.pop();\n      else if (type == \"[\") state.stack.push(\"[\");\n      return style;\n    },\n\n    indent: function(state, textAfter) {\n      var n = state.stack.length;\n\n      if( textAfter.charAt(0) === ']' )n--;\n      else if(textAfter.substr(textAfter.length-1, textAfter.length) === \">\"){\n        if(textAfter.substr(0,1) === \"<\") {}\n        else if( type == \"doindent\" && textAfter.length > 1 ) {}\n        else if( type == \"doindent\")n--;\n        else if( type == \">\" && textAfter.length > 1) {}\n        else if( type == \"tag\" && textAfter !== \">\") {}\n        else if( type == \"tag\" && state.stack[state.stack.length-1] == \"rule\")n--;\n        else if( type == \"tag\")n++;\n        else if( textAfter === \">\" && state.stack[state.stack.length-1] == \"rule\" && type === \">\")n--;\n        else if( textAfter === \">\" && state.stack[state.stack.length-1] == \"rule\") {}\n        else if( textAfter.substr(0,1) !== \"<\" && textAfter.substr(0,1) === \">\" )n=n-1;\n        else if( textAfter === \">\") {}\n        else n=n-1;\n        //over rule them all\n        if(type == null || type == \"]\")n--;\n      }\n\n      return state.baseIndent + n * indentUnit;\n    },\n\n    electricChars: \"]>\"\n  };\n});\n\nCodeMirror.defineMIME(\"application/xml-dtd\", \"dtd\");\n\n});\n"],
  "mappings": ";;;;;;;;AAAA;AAAA;AAUA,KAAC,SAAS,KAAK;AACb,UAAI,OAAO,WAAW,YAAY,OAAO,UAAU;AACjD,YAAI,oBAA+B;AAAA,eAC5B,OAAO,UAAU,cAAc,OAAO;AAC7C,eAAO,CAAC,sBAAsB,GAAG,GAAG;AAAA;AAEpC,YAAI,UAAU;AAAA,IAClB,GAAG,SAASA,aAAY;AACxB;AAEA,MAAAA,YAAW,WAAW,OAAO,SAAS,QAAQ;AAC5C,YAAI,aAAa,OAAO,YAAY;AACpC,iBAAS,IAAI,OAAO,IAAI;AAAC,iBAAO;AAAI,iBAAO;AAAA,QAAM;AAEjD,iBAAS,UAAU,QAAQ,OAAO;AAChC,cAAI,KAAK,OAAO,KAAK;AAErB,cAAI,MAAM,OAAO,OAAO,IAAI,GAAG,GAAI;AACjC,gBAAI,OAAO,SAAS,MAAM,GAAG;AAC3B,oBAAM,WAAW;AACjB,qBAAO,iBAAiB,QAAQ,KAAK;AAAA,YACvC,WAAW,OAAO,SAAS,MAAM;AAAG,qBAAO,IAAI,WAAW,UAAU;AAAA,UACtE,WAAW,MAAM,OAAO,OAAO,IAAI,GAAG,GAAG;AACvC,kBAAM,WAAW,QAAQ,QAAQ,IAAI;AACrC,mBAAO,IAAI,QAAQ,EAAE;AAAA,UACvB,WAAW,MAAM,OAAO,OAAO,SAAS,MAAM;AAAG,mBAAO,IAAI,QAAQ,KAAK;AAAA,mBAChE,MAAM;AAAK,mBAAO,IAAI,WAAW,WAAW;AAAA,mBAC5C,GAAG,MAAM,sBAAsB;AAAG,mBAAO,IAAI,MAAM,EAAE;AAAA,mBACrD,GAAG,MAAM,QAAQ;AAAG,mBAAO,IAAI,QAAQ,EAAE;AAAA,mBACzC,MAAM,OAAQ,MAAM,KAAK;AAChC,kBAAM,WAAW,YAAY,EAAE;AAC/B,mBAAO,MAAM,SAAS,QAAQ,KAAK;AAAA,UACrC,WAAW,OAAO,SAAS,gBAAgB,GAAG;AAC5C,gBAAI,KAAK,OAAO,QAAQ;AACxB,gBAAI,GAAG,OAAO,GAAG,SAAO,GAAE,GAAG,MAAM,EAAE,MAAM,OAAO,MAAM;AAAM,qBAAO,OAAO,CAAC;AAC7E,mBAAO,IAAI,OAAO,KAAK;AAAA,UACzB,WAAW,MAAM,OAAO,MAAM;AAAM,mBAAO,IAAI,UAAU,QAAQ;AAAA,eAC5D;AACH,mBAAO,SAAS,eAAe;AAC/B,mBAAO,IAAI,MAAM,IAAI;AAAA,UACvB;AAAA,QACF;AAEA,iBAAS,iBAAiB,QAAQ,OAAO;AACvC,cAAI,SAAS,GAAG;AAChB,kBAAQ,KAAK,OAAO,KAAK,MAAM,MAAM;AACnC,gBAAI,UAAU,KAAK,MAAM,KAAK;AAC5B,oBAAM,WAAW;AACjB;AAAA,YACF;AACA,qBAAU,MAAM,MAAO,SAAS,IAAI;AAAA,UACtC;AACA,iBAAO,IAAI,WAAW,SAAS;AAAA,QACjC;AAEA,iBAAS,YAAY,OAAO;AAC1B,iBAAO,SAAS,QAAQ,OAAO;AAC7B,gBAAI,UAAU,OAAO;AACrB,oBAAQ,KAAK,OAAO,KAAK,MAAM,MAAM;AACnC,kBAAI,MAAM,SAAS,CAAC,SAAS;AAC3B,sBAAM,WAAW;AACjB;AAAA,cACF;AACA,wBAAU,CAAC,WAAW,MAAM;AAAA,YAC9B;AACA,mBAAO,IAAI,UAAU,KAAK;AAAA,UAC5B;AAAA,QACF;AAEA,iBAAS,QAAQ,OAAO,YAAY;AAClC,iBAAO,SAAS,QAAQ,OAAO;AAC7B,mBAAO,CAAC,OAAO,IAAI,GAAG;AACpB,kBAAI,OAAO,MAAM,UAAU,GAAG;AAC5B,sBAAM,WAAW;AACjB;AAAA,cACF;AACA,qBAAO,KAAK;AAAA,YACd;AACA,mBAAO;AAAA,UACT;AAAA,QACF;AAEA,eAAO;AAAA,UACL,YAAY,SAAS,MAAM;AACzB,mBAAO;AAAA,cAAC,UAAU;AAAA,cACV,YAAY,QAAQ;AAAA,cACpB,OAAO,CAAC;AAAA,YAAC;AAAA,UACnB;AAAA,UAEA,OAAO,SAAS,QAAQ,OAAO;AAC7B,gBAAI,OAAO,SAAS;AAAG,qBAAO;AAC9B,gBAAI,QAAQ,MAAM,SAAS,QAAQ,KAAK;AAExC,gBAAI,UAAU,MAAM,MAAM,MAAM,MAAM,SAAO,CAAC;AAC9C,gBAAI,OAAO,QAAQ,KAAK,OAAO,SAAS,cAAc,QAAQ;AAAK,oBAAM,MAAM,KAAK,MAAM;AAAA,qBACjF,SAAS;AAAU,oBAAM,MAAM,MAAM,MAAM,SAAO,CAAC,IAAI;AAAA,qBACvD,OAAO,QAAQ,KAAK,OAAO,QAAQ,OAAQ,QAAQ,OAAO,WAAW;AAAS,oBAAM,MAAM,IAAI;AAAA,qBAC9F,QAAQ;AAAK,oBAAM,MAAM,KAAK,GAAG;AAC1C,mBAAO;AAAA,UACT;AAAA,UAEA,QAAQ,SAAS,OAAO,WAAW;AACjC,gBAAI,IAAI,MAAM,MAAM;AAEpB,gBAAI,UAAU,OAAO,CAAC,MAAM;AAAK;AAAA,qBACzB,UAAU,OAAO,UAAU,SAAO,GAAG,UAAU,MAAM,MAAM,KAAI;AACrE,kBAAG,UAAU,OAAO,GAAE,CAAC,MAAM,KAAK;AAAA,cAAC,WAC1B,QAAQ,cAAc,UAAU,SAAS,GAAI;AAAA,cAAC,WAC9C,QAAQ;AAAW;AAAA,uBACnB,QAAQ,OAAO,UAAU,SAAS,GAAG;AAAA,cAAC,WACtC,QAAQ,SAAS,cAAc,KAAK;AAAA,cAAC,WACrC,QAAQ,SAAS,MAAM,MAAM,MAAM,MAAM,SAAO,CAAC,KAAK;AAAO;AAAA,uBAC7D,QAAQ;AAAM;AAAA,uBACd,cAAc,OAAO,MAAM,MAAM,MAAM,MAAM,SAAO,CAAC,KAAK,UAAU,SAAS;AAAI;AAAA,uBACjF,cAAc,OAAO,MAAM,MAAM,MAAM,MAAM,SAAO,CAAC,KAAK,QAAQ;AAAA,cAAC,WACnE,UAAU,OAAO,GAAE,CAAC,MAAM,OAAO,UAAU,OAAO,GAAE,CAAC,MAAM;AAAK,oBAAE,IAAE;AAAA,uBACpE,cAAc,KAAK;AAAA,cAAC;AACxB,oBAAE,IAAE;AAET,kBAAG,QAAQ,QAAQ,QAAQ;AAAI;AAAA,YACjC;AAEA,mBAAO,MAAM,aAAa,IAAI;AAAA,UAChC;AAAA,UAEA,eAAe;AAAA,QACjB;AAAA,MACF,CAAC;AAED,MAAAA,YAAW,WAAW,uBAAuB,KAAK;AAAA,IAElD,CAAC;AAAA;AAAA;",
  "names": ["CodeMirror"]
}
