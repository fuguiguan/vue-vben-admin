{
  "version": 3,
  "sources": ["../../.pnpm/codemirror@5.65.16/node_modules/codemirror/mode/pig/pig.js"],
  "sourcesContent": ["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n/*\n *      Pig Latin Mode for CodeMirror 2\n *      @author Prasanth Jayachandran\n *      @link   https://github.com/prasanthj/pig-codemirror-2\n *  This implementation is adapted from PL/SQL mode in CodeMirror 2.\n */\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"pig\", function(_config, parserConfig) {\n  var keywords = parserConfig.keywords,\n  builtins = parserConfig.builtins,\n  types = parserConfig.types,\n  multiLineStrings = parserConfig.multiLineStrings;\n\n  var isOperatorChar = /[*+\\-%<>=&?:\\/!|]/;\n\n  function chain(stream, state, f) {\n    state.tokenize = f;\n    return f(stream, state);\n  }\n\n  function tokenComment(stream, state) {\n    var isEnd = false;\n    var ch;\n    while(ch = stream.next()) {\n      if(ch == \"/\" && isEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      isEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while((next = stream.next()) != null) {\n        if (next == quote && !escaped) {\n          end = true; break;\n        }\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end || !(escaped || multiLineStrings))\n        state.tokenize = tokenBase;\n      return \"error\";\n    };\n  }\n\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n\n    // is a start of string?\n    if (ch == '\"' || ch == \"'\")\n      return chain(stream, state, tokenString(ch));\n    // is it one of the special chars\n    else if(/[\\[\\]{}\\(\\),;\\.]/.test(ch))\n      return null;\n    // is it a number?\n    else if(/\\d/.test(ch)) {\n      stream.eatWhile(/[\\w\\.]/);\n      return \"number\";\n    }\n    // multi line comment or operator\n    else if (ch == \"/\") {\n      if (stream.eat(\"*\")) {\n        return chain(stream, state, tokenComment);\n      }\n      else {\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      }\n    }\n    // single line comment or operator\n    else if (ch==\"-\") {\n      if(stream.eat(\"-\")){\n        stream.skipToEnd();\n        return \"comment\";\n      }\n      else {\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      }\n    }\n    // is it an operator\n    else if (isOperatorChar.test(ch)) {\n      stream.eatWhile(isOperatorChar);\n      return \"operator\";\n    }\n    else {\n      // get the while word\n      stream.eatWhile(/[\\w\\$_]/);\n      // is it one of the listed keywords?\n      if (keywords && keywords.propertyIsEnumerable(stream.current().toUpperCase())) {\n        //keywords can be used as variables like flatten(group), group.$0 etc..\n        if (!stream.eat(\")\") && !stream.eat(\".\"))\n          return \"keyword\";\n      }\n      // is it one of the builtin functions?\n      if (builtins && builtins.propertyIsEnumerable(stream.current().toUpperCase()))\n        return \"variable-2\";\n      // is it one of the listed types?\n      if (types && types.propertyIsEnumerable(stream.current().toUpperCase()))\n        return \"variable-3\";\n      // default is a 'variable'\n      return \"variable\";\n    }\n  }\n\n  // Interface\n  return {\n    startState: function() {\n      return {\n        tokenize: tokenBase,\n        startOfLine: true\n      };\n    },\n\n    token: function(stream, state) {\n      if(stream.eatSpace()) return null;\n      var style = state.tokenize(stream, state);\n      return style;\n    }\n  };\n});\n\n(function() {\n  function keywords(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n\n  // builtin funcs taken from trunk revision 1303237\n  var pBuiltins = \"ABS ACOS ARITY ASIN ATAN AVG BAGSIZE BINSTORAGE BLOOM BUILDBLOOM CBRT CEIL \"\n    + \"CONCAT COR COS COSH COUNT COUNT_STAR COV CONSTANTSIZE CUBEDIMENSIONS DIFF DISTINCT DOUBLEABS \"\n    + \"DOUBLEAVG DOUBLEBASE DOUBLEMAX DOUBLEMIN DOUBLEROUND DOUBLESUM EXP FLOOR FLOATABS FLOATAVG \"\n    + \"FLOATMAX FLOATMIN FLOATROUND FLOATSUM GENERICINVOKER INDEXOF INTABS INTAVG INTMAX INTMIN \"\n    + \"INTSUM INVOKEFORDOUBLE INVOKEFORFLOAT INVOKEFORINT INVOKEFORLONG INVOKEFORSTRING INVOKER \"\n    + \"ISEMPTY JSONLOADER JSONMETADATA JSONSTORAGE LAST_INDEX_OF LCFIRST LOG LOG10 LOWER LONGABS \"\n    + \"LONGAVG LONGMAX LONGMIN LONGSUM MAX MIN MAPSIZE MONITOREDUDF NONDETERMINISTIC OUTPUTSCHEMA  \"\n    + \"PIGSTORAGE PIGSTREAMING RANDOM REGEX_EXTRACT REGEX_EXTRACT_ALL REPLACE ROUND SIN SINH SIZE \"\n    + \"SQRT STRSPLIT SUBSTRING SUM STRINGCONCAT STRINGMAX STRINGMIN STRINGSIZE TAN TANH TOBAG \"\n    + \"TOKENIZE TOMAP TOP TOTUPLE TRIM TEXTLOADER TUPLESIZE UCFIRST UPPER UTF8STORAGECONVERTER \";\n\n  // taken from QueryLexer.g\n  var pKeywords = \"VOID IMPORT RETURNS DEFINE LOAD FILTER FOREACH ORDER CUBE DISTINCT COGROUP \"\n    + \"JOIN CROSS UNION SPLIT INTO IF OTHERWISE ALL AS BY USING INNER OUTER ONSCHEMA PARALLEL \"\n    + \"PARTITION GROUP AND OR NOT GENERATE FLATTEN ASC DESC IS STREAM THROUGH STORE MAPREDUCE \"\n    + \"SHIP CACHE INPUT OUTPUT STDERROR STDIN STDOUT LIMIT SAMPLE LEFT RIGHT FULL EQ GT LT GTE LTE \"\n    + \"NEQ MATCHES TRUE FALSE DUMP\";\n\n  // data types\n  var pTypes = \"BOOLEAN INT LONG FLOAT DOUBLE CHARARRAY BYTEARRAY BAG TUPLE MAP \";\n\n  CodeMirror.defineMIME(\"text/x-pig\", {\n    name: \"pig\",\n    builtins: keywords(pBuiltins),\n    keywords: keywords(pKeywords),\n    types: keywords(pTypes)\n  });\n\n  CodeMirror.registerHelper(\"hintWords\", \"pig\", (pBuiltins + pTypes + pKeywords).split(\" \"));\n}());\n\n});\n"],
  "mappings": "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",
  "names": ["CodeMirror"]
}
