{
  "version": 3,
  "sources": ["../../.pnpm/codemirror@5.65.16/node_modules/codemirror/mode/yacas/yacas.js"],
  "sourcesContent": ["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n// Yacas mode copyright (c) 2015 by Grzegorz Mazur\n// Loosely based on mathematica mode by Calin Barbat\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode('yacas', function(_config, _parserConfig) {\n\n  function words(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n\n  var bodiedOps = words(\"Assert BackQuote D Defun Deriv For ForEach FromFile \" +\n                        \"FromString Function Integrate InverseTaylor Limit \" +\n                        \"LocalSymbols Macro MacroRule MacroRulePattern \" +\n                        \"NIntegrate Rule RulePattern Subst TD TExplicitSum \" +\n                        \"TSum Taylor Taylor1 Taylor2 Taylor3 ToFile \" +\n                        \"ToStdout ToString TraceRule Until While\");\n\n  // patterns\n  var pFloatForm  = \"(?:(?:\\\\.\\\\d+|\\\\d+\\\\.\\\\d*|\\\\d+)(?:[eE][+-]?\\\\d+)?)\";\n  var pIdentifier = \"(?:[a-zA-Z\\\\$'][a-zA-Z0-9\\\\$']*)\";\n\n  // regular expressions\n  var reFloatForm    = new RegExp(pFloatForm);\n  var reIdentifier   = new RegExp(pIdentifier);\n  var rePattern      = new RegExp(pIdentifier + \"?_\" + pIdentifier);\n  var reFunctionLike = new RegExp(pIdentifier + \"\\\\s*\\\\(\");\n\n  function tokenBase(stream, state) {\n    var ch;\n\n    // get next character\n    ch = stream.next();\n\n    // string\n    if (ch === '\"') {\n      state.tokenize = tokenString;\n      return state.tokenize(stream, state);\n    }\n\n    // comment\n    if (ch === '/') {\n      if (stream.eat('*')) {\n        state.tokenize = tokenComment;\n        return state.tokenize(stream, state);\n      }\n      if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n    }\n\n    // go back one character\n    stream.backUp(1);\n\n    // update scope info\n    var m = stream.match(/^(\\w+)\\s*\\(/, false);\n    if (m !== null && bodiedOps.hasOwnProperty(m[1]))\n      state.scopes.push('bodied');\n\n    var scope = currentScope(state);\n\n    if (scope === 'bodied' && ch === '[')\n      state.scopes.pop();\n\n    if (ch === '[' || ch === '{' || ch === '(')\n      state.scopes.push(ch);\n\n    scope = currentScope(state);\n\n    if (scope === '[' && ch === ']' ||\n        scope === '{' && ch === '}' ||\n        scope === '(' && ch === ')')\n      state.scopes.pop();\n\n    if (ch === ';') {\n      while (scope === 'bodied') {\n        state.scopes.pop();\n        scope = currentScope(state);\n      }\n    }\n\n    // look for ordered rules\n    if (stream.match(/\\d+ *#/, true, false)) {\n      return 'qualifier';\n    }\n\n    // look for numbers\n    if (stream.match(reFloatForm, true, false)) {\n      return 'number';\n    }\n\n    // look for placeholders\n    if (stream.match(rePattern, true, false)) {\n      return 'variable-3';\n    }\n\n    // match all braces separately\n    if (stream.match(/(?:\\[|\\]|{|}|\\(|\\))/, true, false)) {\n      return 'bracket';\n    }\n\n    // literals looking like function calls\n    if (stream.match(reFunctionLike, true, false)) {\n      stream.backUp(1);\n      return 'variable';\n    }\n\n    // all other identifiers\n    if (stream.match(reIdentifier, true, false)) {\n      return 'variable-2';\n    }\n\n    // operators; note that operators like @@ or /; are matched separately for each symbol.\n    if (stream.match(/(?:\\\\|\\+|\\-|\\*|\\/|,|;|\\.|:|@|~|=|>|<|&|\\||_|`|'|\\^|\\?|!|%|#)/, true, false)) {\n      return 'operator';\n    }\n\n    // everything else is an error\n    return 'error';\n  }\n\n  function tokenString(stream, state) {\n    var next, end = false, escaped = false;\n    while ((next = stream.next()) != null) {\n      if (next === '\"' && !escaped) {\n        end = true;\n        break;\n      }\n      escaped = !escaped && next === '\\\\';\n    }\n    if (end && !escaped) {\n      state.tokenize = tokenBase;\n    }\n    return 'string';\n  };\n\n  function tokenComment(stream, state) {\n    var prev, next;\n    while((next = stream.next()) != null) {\n      if (prev === '*' && next === '/') {\n        state.tokenize = tokenBase;\n        break;\n      }\n      prev = next;\n    }\n    return 'comment';\n  }\n\n  function currentScope(state) {\n    var scope = null;\n    if (state.scopes.length > 0)\n      scope = state.scopes[state.scopes.length - 1];\n    return scope;\n  }\n\n  return {\n    startState: function() {\n      return {\n        tokenize: tokenBase,\n        scopes: []\n      };\n    },\n    token: function(stream, state) {\n      if (stream.eatSpace()) return null;\n      return state.tokenize(stream, state);\n    },\n    indent: function(state, textAfter) {\n      if (state.tokenize !== tokenBase && state.tokenize !== null)\n        return CodeMirror.Pass;\n\n      var delta = 0;\n      if (textAfter === ']' || textAfter === '];' ||\n          textAfter === '}' || textAfter === '};' ||\n          textAfter === ');')\n        delta = -1;\n\n      return (state.scopes.length + delta) * _config.indentUnit;\n    },\n    electricChars: \"{}[]();\",\n    blockCommentStart: \"/*\",\n    blockCommentEnd: \"*/\",\n    lineComment: \"//\"\n  };\n});\n\nCodeMirror.defineMIME('text/x-yacas', {\n  name: 'yacas'\n});\n\n});\n"],
  "mappings": "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",
  "names": ["CodeMirror", "words"]
}
