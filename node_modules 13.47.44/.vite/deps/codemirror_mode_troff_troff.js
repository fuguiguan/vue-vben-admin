import {
  require_codemirror
} from "./chunk-GI5J7NWS.js";
import {
  __commonJS
} from "./chunk-WGAPYIUP.js";

// node_modules/.pnpm/codemirror@5.65.16/node_modules/codemirror/mode/troff/troff.js
var require_troff = __commonJS({
  "node_modules/.pnpm/codemirror@5.65.16/node_modules/codemirror/mode/troff/troff.js"(exports, module) {
    (function(mod) {
      if (typeof exports == "object" && typeof module == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("troff", function() {
        var words = {};
        function tokenBase(stream) {
          if (stream.eatSpace())
            return null;
          var sol = stream.sol();
          var ch = stream.next();
          if (ch === "\\") {
            if (stream.match("fB") || stream.match("fR") || stream.match("fI") || stream.match("u") || stream.match("d") || stream.match("%") || stream.match("&")) {
              return "string";
            }
            if (stream.match("m[")) {
              stream.skipTo("]");
              stream.next();
              return "string";
            }
            if (stream.match("s+") || stream.match("s-")) {
              stream.eatWhile(/[\d-]/);
              return "string";
            }
            if (stream.match("(") || stream.match("*(")) {
              stream.eatWhile(/[\w-]/);
              return "string";
            }
            return "string";
          }
          if (sol && (ch === "." || ch === "'")) {
            if (stream.eat("\\") && stream.eat('"')) {
              stream.skipToEnd();
              return "comment";
            }
          }
          if (sol && ch === ".") {
            if (stream.match("B ") || stream.match("I ") || stream.match("R ")) {
              return "attribute";
            }
            if (stream.match("TH ") || stream.match("SH ") || stream.match("SS ") || stream.match("HP ")) {
              stream.skipToEnd();
              return "quote";
            }
            if (stream.match(/[A-Z]/) && stream.match(/[A-Z]/) || stream.match(/[a-z]/) && stream.match(/[a-z]/)) {
              return "attribute";
            }
          }
          stream.eatWhile(/[\w-]/);
          var cur = stream.current();
          return words.hasOwnProperty(cur) ? words[cur] : null;
        }
        function tokenize(stream, state) {
          return (state.tokens[0] || tokenBase)(stream, state);
        }
        ;
        return {
          startState: function() {
            return { tokens: [] };
          },
          token: function(stream, state) {
            return tokenize(stream, state);
          }
        };
      });
      CodeMirror2.defineMIME("text/troff", "troff");
      CodeMirror2.defineMIME("text/x-troff", "troff");
      CodeMirror2.defineMIME("application/x-troff", "troff");
    });
  }
});
export default require_troff();
//# sourceMappingURL=codemirror_mode_troff_troff.js.map
