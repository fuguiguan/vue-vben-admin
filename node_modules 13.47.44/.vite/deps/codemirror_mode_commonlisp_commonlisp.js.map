{
  "version": 3,
  "sources": ["../../.pnpm/codemirror@5.65.16/node_modules/codemirror/mode/commonlisp/commonlisp.js"],
  "sourcesContent": ["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"commonlisp\", function (config) {\n  var specialForm = /^(block|let*|return-from|catch|load-time-value|setq|eval-when|locally|symbol-macrolet|flet|macrolet|tagbody|function|multiple-value-call|the|go|multiple-value-prog1|throw|if|progn|unwind-protect|labels|progv|let|quote)$/;\n  var assumeBody = /^with|^def|^do|^prog|case$|^cond$|bind$|when$|unless$/;\n  var numLiteral = /^(?:[+\\-]?(?:\\d+|\\d*\\.\\d+)(?:[efd][+\\-]?\\d+)?|[+\\-]?\\d+(?:\\/[+\\-]?\\d+)?|#b[+\\-]?[01]+|#o[+\\-]?[0-7]+|#x[+\\-]?[\\da-f]+)/;\n  var symbol = /[^\\s'`,@()\\[\\]\";]/;\n  var type;\n\n  function readSym(stream) {\n    var ch;\n    while (ch = stream.next()) {\n      if (ch == \"\\\\\") stream.next();\n      else if (!symbol.test(ch)) { stream.backUp(1); break; }\n    }\n    return stream.current();\n  }\n\n  function base(stream, state) {\n    if (stream.eatSpace()) {type = \"ws\"; return null;}\n    if (stream.match(numLiteral)) return \"number\";\n    var ch = stream.next();\n    if (ch == \"\\\\\") ch = stream.next();\n\n    if (ch == '\"') return (state.tokenize = inString)(stream, state);\n    else if (ch == \"(\") { type = \"open\"; return \"bracket\"; }\n    else if (ch == \")\" || ch == \"]\") { type = \"close\"; return \"bracket\"; }\n    else if (ch == \";\") { stream.skipToEnd(); type = \"ws\"; return \"comment\"; }\n    else if (/['`,@]/.test(ch)) return null;\n    else if (ch == \"|\") {\n      if (stream.skipTo(\"|\")) { stream.next(); return \"symbol\"; }\n      else { stream.skipToEnd(); return \"error\"; }\n    } else if (ch == \"#\") {\n      var ch = stream.next();\n      if (ch == \"(\") { type = \"open\"; return \"bracket\"; }\n      else if (/[+\\-=\\.']/.test(ch)) return null;\n      else if (/\\d/.test(ch) && stream.match(/^\\d*#/)) return null;\n      else if (ch == \"|\") return (state.tokenize = inComment)(stream, state);\n      else if (ch == \":\") { readSym(stream); return \"meta\"; }\n      else if (ch == \"\\\\\") { stream.next(); readSym(stream); return \"string-2\" }\n      else return \"error\";\n    } else {\n      var name = readSym(stream);\n      if (name == \".\") return null;\n      type = \"symbol\";\n      if (name == \"nil\" || name == \"t\" || name.charAt(0) == \":\") return \"atom\";\n      if (state.lastType == \"open\" && (specialForm.test(name) || assumeBody.test(name))) return \"keyword\";\n      if (name.charAt(0) == \"&\") return \"variable-2\";\n      return \"variable\";\n    }\n  }\n\n  function inString(stream, state) {\n    var escaped = false, next;\n    while (next = stream.next()) {\n      if (next == '\"' && !escaped) { state.tokenize = base; break; }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    return \"string\";\n  }\n\n  function inComment(stream, state) {\n    var next, last;\n    while (next = stream.next()) {\n      if (next == \"#\" && last == \"|\") { state.tokenize = base; break; }\n      last = next;\n    }\n    type = \"ws\";\n    return \"comment\";\n  }\n\n  return {\n    startState: function () {\n      return {ctx: {prev: null, start: 0, indentTo: 0}, lastType: null, tokenize: base};\n    },\n\n    token: function (stream, state) {\n      if (stream.sol() && typeof state.ctx.indentTo != \"number\")\n        state.ctx.indentTo = state.ctx.start + 1;\n\n      type = null;\n      var style = state.tokenize(stream, state);\n      if (type != \"ws\") {\n        if (state.ctx.indentTo == null) {\n          if (type == \"symbol\" && assumeBody.test(stream.current()))\n            state.ctx.indentTo = state.ctx.start + config.indentUnit;\n          else\n            state.ctx.indentTo = \"next\";\n        } else if (state.ctx.indentTo == \"next\") {\n          state.ctx.indentTo = stream.column();\n        }\n        state.lastType = type;\n      }\n      if (type == \"open\") state.ctx = {prev: state.ctx, start: stream.column(), indentTo: null};\n      else if (type == \"close\") state.ctx = state.ctx.prev || state.ctx;\n      return style;\n    },\n\n    indent: function (state, _textAfter) {\n      var i = state.ctx.indentTo;\n      return typeof i == \"number\" ? i : state.ctx.start + 1;\n    },\n\n    closeBrackets: {pairs: \"()[]{}\\\"\\\"\"},\n    lineComment: \";;\",\n    fold: \"brace-paren\",\n    blockCommentStart: \"#|\",\n    blockCommentEnd: \"|#\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-common-lisp\", \"commonlisp\");\n\n});\n"],
  "mappings": "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",
  "names": ["CodeMirror"]
}
