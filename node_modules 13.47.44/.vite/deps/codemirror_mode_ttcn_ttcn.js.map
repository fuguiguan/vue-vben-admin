{
  "version": 3,
  "sources": ["../../.pnpm/codemirror@5.65.16/node_modules/codemirror/mode/ttcn/ttcn.js"],
  "sourcesContent": ["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"ttcn\", function(config, parserConfig) {\n    var indentUnit = config.indentUnit,\n        keywords = parserConfig.keywords || {},\n        builtin = parserConfig.builtin || {},\n        timerOps = parserConfig.timerOps || {},\n        portOps  = parserConfig.portOps || {},\n        configOps = parserConfig.configOps || {},\n        verdictOps = parserConfig.verdictOps || {},\n        sutOps = parserConfig.sutOps || {},\n        functionOps = parserConfig.functionOps || {},\n\n        verdictConsts = parserConfig.verdictConsts || {},\n        booleanConsts = parserConfig.booleanConsts || {},\n        otherConsts   = parserConfig.otherConsts || {},\n\n        types = parserConfig.types || {},\n        visibilityModifiers = parserConfig.visibilityModifiers || {},\n        templateMatch = parserConfig.templateMatch || {},\n        multiLineStrings = parserConfig.multiLineStrings,\n        indentStatements = parserConfig.indentStatements !== false;\n    var isOperatorChar = /[+\\-*&@=<>!\\/]/;\n    var curPunc;\n\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n\n      if (ch == '\"' || ch == \"'\") {\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      }\n      if (/[\\[\\]{}\\(\\),;\\\\:\\?\\.]/.test(ch)) {\n        curPunc = ch;\n        return \"punctuation\";\n      }\n      if (ch == \"#\"){\n        stream.skipToEnd();\n        return \"atom preprocessor\";\n      }\n      if (ch == \"%\"){\n        stream.eatWhile(/\\b/);\n        return \"atom ttcn3Macros\";\n      }\n      if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\w\\.]/);\n        return \"number\";\n      }\n      if (ch == \"/\") {\n        if (stream.eat(\"*\")) {\n          state.tokenize = tokenComment;\n          return tokenComment(stream, state);\n        }\n        if (stream.eat(\"/\")) {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n      }\n      if (isOperatorChar.test(ch)) {\n        if(ch == \"@\"){\n          if(stream.match(\"try\") || stream.match(\"catch\")\n              || stream.match(\"lazy\")){\n            return \"keyword\";\n          }\n        }\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      }\n      stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n      var cur = stream.current();\n\n      if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n      if (builtin.propertyIsEnumerable(cur)) return \"builtin\";\n\n      if (timerOps.propertyIsEnumerable(cur)) return \"def timerOps\";\n      if (configOps.propertyIsEnumerable(cur)) return \"def configOps\";\n      if (verdictOps.propertyIsEnumerable(cur)) return \"def verdictOps\";\n      if (portOps.propertyIsEnumerable(cur)) return \"def portOps\";\n      if (sutOps.propertyIsEnumerable(cur)) return \"def sutOps\";\n      if (functionOps.propertyIsEnumerable(cur)) return \"def functionOps\";\n\n      if (verdictConsts.propertyIsEnumerable(cur)) return \"string verdictConsts\";\n      if (booleanConsts.propertyIsEnumerable(cur)) return \"string booleanConsts\";\n      if (otherConsts.propertyIsEnumerable(cur)) return \"string otherConsts\";\n\n      if (types.propertyIsEnumerable(cur)) return \"builtin types\";\n      if (visibilityModifiers.propertyIsEnumerable(cur))\n        return \"builtin visibilityModifiers\";\n      if (templateMatch.propertyIsEnumerable(cur)) return \"atom templateMatch\";\n\n      return \"variable\";\n    }\n\n    function tokenString(quote) {\n      return function(stream, state) {\n        var escaped = false, next, end = false;\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped){\n            var afterQuote = stream.peek();\n            //look if the character after the quote is like the B in '10100010'B\n            if (afterQuote){\n              afterQuote = afterQuote.toLowerCase();\n              if(afterQuote == \"b\" || afterQuote == \"h\" || afterQuote == \"o\")\n                stream.next();\n            }\n            end = true; break;\n          }\n          escaped = !escaped && next == \"\\\\\";\n        }\n        if (end || !(escaped || multiLineStrings))\n          state.tokenize = null;\n        return \"string\";\n      };\n    }\n\n    function tokenComment(stream, state) {\n      var maybeEnd = false, ch;\n      while (ch = stream.next()) {\n        if (ch == \"/\" && maybeEnd) {\n          state.tokenize = null;\n          break;\n        }\n        maybeEnd = (ch == \"*\");\n      }\n      return \"comment\";\n    }\n\n    function Context(indented, column, type, align, prev) {\n      this.indented = indented;\n      this.column = column;\n      this.type = type;\n      this.align = align;\n      this.prev = prev;\n    }\n\n    function pushContext(state, col, type) {\n      var indent = state.indented;\n      if (state.context && state.context.type == \"statement\")\n        indent = state.context.indented;\n      return state.context = new Context(indent, col, type, null, state.context);\n    }\n\n    function popContext(state) {\n      var t = state.context.type;\n      if (t == \")\" || t == \"]\" || t == \"}\")\n        state.indented = state.context.indented;\n      return state.context = state.context.prev;\n    }\n\n    //Interface\n    return {\n      startState: function(basecolumn) {\n        return {\n          tokenize: null,\n          context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", false),\n          indented: 0,\n          startOfLine: true\n        };\n      },\n\n      token: function(stream, state) {\n        var ctx = state.context;\n        if (stream.sol()) {\n          if (ctx.align == null) ctx.align = false;\n          state.indented = stream.indentation();\n          state.startOfLine = true;\n        }\n        if (stream.eatSpace()) return null;\n        curPunc = null;\n        var style = (state.tokenize || tokenBase)(stream, state);\n        if (style == \"comment\") return style;\n        if (ctx.align == null) ctx.align = true;\n\n        if ((curPunc == \";\" || curPunc == \":\" || curPunc == \",\")\n            && ctx.type == \"statement\"){\n          popContext(state);\n        }\n        else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\n        else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\n        else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\n        else if (curPunc == \"}\") {\n          while (ctx.type == \"statement\") ctx = popContext(state);\n          if (ctx.type == \"}\") ctx = popContext(state);\n          while (ctx.type == \"statement\") ctx = popContext(state);\n        }\n        else if (curPunc == ctx.type) popContext(state);\n        else if (indentStatements &&\n            (((ctx.type == \"}\" || ctx.type == \"top\") && curPunc != ';') ||\n            (ctx.type == \"statement\" && curPunc == \"newstatement\")))\n          pushContext(state, stream.column(), \"statement\");\n\n        state.startOfLine = false;\n\n        return style;\n      },\n\n      electricChars: \"{}\",\n      blockCommentStart: \"/*\",\n      blockCommentEnd: \"*/\",\n      lineComment: \"//\",\n      fold: \"brace\"\n    };\n  });\n\n  function words(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n\n  function def(mimes, mode) {\n    if (typeof mimes == \"string\") mimes = [mimes];\n    var words = [];\n    function add(obj) {\n      if (obj) for (var prop in obj) if (obj.hasOwnProperty(prop))\n        words.push(prop);\n    }\n\n    add(mode.keywords);\n    add(mode.builtin);\n    add(mode.timerOps);\n    add(mode.portOps);\n\n    if (words.length) {\n      mode.helperType = mimes[0];\n      CodeMirror.registerHelper(\"hintWords\", mimes[0], words);\n    }\n\n    for (var i = 0; i < mimes.length; ++i)\n      CodeMirror.defineMIME(mimes[i], mode);\n  }\n\n  def([\"text/x-ttcn\", \"text/x-ttcn3\", \"text/x-ttcnpp\"], {\n    name: \"ttcn\",\n    keywords: words(\"activate address alive all alt altstep and and4b any\" +\n    \" break case component const continue control deactivate\" +\n    \" display do else encode enumerated except exception\" +\n    \" execute extends extension external for from function\" +\n    \" goto group if import in infinity inout interleave\" +\n    \" label language length log match message mixed mod\" +\n    \" modifies module modulepar mtc noblock not not4b nowait\" +\n    \" of on optional or or4b out override param pattern port\" +\n    \" procedure record recursive rem repeat return runs select\" +\n    \" self sender set signature system template testcase to\" +\n    \" type union value valueof var variant while with xor xor4b\"),\n    builtin: words(\"bit2hex bit2int bit2oct bit2str char2int char2oct encvalue\" +\n    \" decomp decvalue float2int float2str hex2bit hex2int\" +\n    \" hex2oct hex2str int2bit int2char int2float int2hex\" +\n    \" int2oct int2str int2unichar isbound ischosen ispresent\" +\n    \" isvalue lengthof log2str oct2bit oct2char oct2hex oct2int\" +\n    \" oct2str regexp replace rnd sizeof str2bit str2float\" +\n    \" str2hex str2int str2oct substr unichar2int unichar2char\" +\n    \" enum2int\"),\n    types: words(\"anytype bitstring boolean char charstring default float\" +\n    \" hexstring integer objid octetstring universal verdicttype timer\"),\n    timerOps: words(\"read running start stop timeout\"),\n    portOps: words(\"call catch check clear getcall getreply halt raise receive\" +\n    \" reply send trigger\"),\n    configOps: words(\"create connect disconnect done kill killed map unmap\"),\n    verdictOps: words(\"getverdict setverdict\"),\n    sutOps: words(\"action\"),\n    functionOps: words(\"apply derefers refers\"),\n\n    verdictConsts: words(\"error fail inconc none pass\"),\n    booleanConsts: words(\"true false\"),\n    otherConsts: words(\"null NULL omit\"),\n\n    visibilityModifiers: words(\"private public friend\"),\n    templateMatch: words(\"complement ifpresent subset superset permutation\"),\n    multiLineStrings: true\n  });\n});\n"],
  "mappings": "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",
  "names": ["CodeMirror", "words"]
}
