{
  "version": 3,
  "sources": ["../../.pnpm/codemirror@5.65.16/node_modules/codemirror/mode/rpm/rpm.js"],
  "sourcesContent": ["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"rpm-changes\", function() {\n  var headerSeparator = /^-+$/;\n  var headerLine = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)  ?\\d{1,2} \\d{2}:\\d{2}(:\\d{2})? [A-Z]{3,4} \\d{4} - /;\n  var simpleEmail = /^[\\w+.-]+@[\\w.-]+/;\n\n  return {\n    token: function(stream) {\n      if (stream.sol()) {\n        if (stream.match(headerSeparator)) { return 'tag'; }\n        if (stream.match(headerLine)) { return 'tag'; }\n      }\n      if (stream.match(simpleEmail)) { return 'string'; }\n      stream.next();\n      return null;\n    }\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-rpm-changes\", \"rpm-changes\");\n\n// Quick and dirty spec file highlighting\n\nCodeMirror.defineMode(\"rpm-spec\", function() {\n  var arch = /^(i386|i586|i686|x86_64|ppc64le|ppc64|ppc|ia64|s390x|s390|sparc64|sparcv9|sparc|noarch|alphaev6|alpha|hppa|mipsel)/;\n\n  var preamble = /^[a-zA-Z0-9()]+:/;\n  var section = /^%(debug_package|package|description|prep|build|install|files|clean|changelog|preinstall|preun|postinstall|postun|pretrans|posttrans|pre|post|triggerin|triggerun|verifyscript|check|triggerpostun|triggerprein|trigger)/;\n  var control_flow_complex = /^%(ifnarch|ifarch|if)/; // rpm control flow macros\n  var control_flow_simple = /^%(else|endif)/; // rpm control flow macros\n  var operators = /^(\\!|\\?|\\<\\=|\\<|\\>\\=|\\>|\\=\\=|\\&\\&|\\|\\|)/; // operators in control flow macros\n\n  return {\n    startState: function () {\n        return {\n          controlFlow: false,\n          macroParameters: false,\n          section: false\n        };\n    },\n    token: function (stream, state) {\n      var ch = stream.peek();\n      if (ch == \"#\") { stream.skipToEnd(); return \"comment\"; }\n\n      if (stream.sol()) {\n        if (stream.match(preamble)) { return \"header\"; }\n        if (stream.match(section)) { return \"atom\"; }\n      }\n\n      if (stream.match(/^\\$\\w+/)) { return \"def\"; } // Variables like '$RPM_BUILD_ROOT'\n      if (stream.match(/^\\$\\{\\w+\\}/)) { return \"def\"; } // Variables like '${RPM_BUILD_ROOT}'\n\n      if (stream.match(control_flow_simple)) { return \"keyword\"; }\n      if (stream.match(control_flow_complex)) {\n        state.controlFlow = true;\n        return \"keyword\";\n      }\n      if (state.controlFlow) {\n        if (stream.match(operators)) { return \"operator\"; }\n        if (stream.match(/^(\\d+)/)) { return \"number\"; }\n        if (stream.eol()) { state.controlFlow = false; }\n      }\n\n      if (stream.match(arch)) {\n        if (stream.eol()) { state.controlFlow = false; }\n        return \"number\";\n      }\n\n      // Macros like '%make_install' or '%attr(0775,root,root)'\n      if (stream.match(/^%[\\w]+/)) {\n        if (stream.match('(')) { state.macroParameters = true; }\n        return \"keyword\";\n      }\n      if (state.macroParameters) {\n        if (stream.match(/^\\d+/)) { return \"number\";}\n        if (stream.match(')')) {\n          state.macroParameters = false;\n          return \"keyword\";\n        }\n      }\n\n      // Macros like '%{defined fedora}'\n      if (stream.match(/^%\\{\\??[\\w \\-\\:\\!]+\\}/)) {\n        if (stream.eol()) { state.controlFlow = false; }\n        return \"def\";\n      }\n\n      //TODO: Include bash script sub-parser (CodeMirror supports that)\n      stream.next();\n      return null;\n    }\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-rpm-spec\", \"rpm-spec\");\n\n});\n"],
  "mappings": "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",
  "names": ["CodeMirror"]
}
