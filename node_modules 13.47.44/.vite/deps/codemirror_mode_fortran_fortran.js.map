{
  "version": 3,
  "sources": ["../../.pnpm/codemirror@5.65.16/node_modules/codemirror/mode/fortran/fortran.js"],
  "sourcesContent": ["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"fortran\", function() {\n  function words(array) {\n    var keys = {};\n    for (var i = 0; i < array.length; ++i) {\n      keys[array[i]] = true;\n    }\n    return keys;\n  }\n\n  var keywords = words([\n                  \"abstract\", \"accept\", \"allocatable\", \"allocate\",\n                  \"array\", \"assign\", \"asynchronous\", \"backspace\",\n                  \"bind\", \"block\", \"byte\", \"call\", \"case\",\n                  \"class\", \"close\", \"common\", \"contains\",\n                  \"continue\", \"cycle\", \"data\", \"deallocate\",\n                  \"decode\", \"deferred\", \"dimension\", \"do\",\n                  \"elemental\", \"else\", \"encode\", \"end\",\n                  \"endif\", \"entry\", \"enumerator\", \"equivalence\",\n                  \"exit\", \"external\", \"extrinsic\", \"final\",\n                  \"forall\", \"format\", \"function\", \"generic\",\n                  \"go\", \"goto\", \"if\", \"implicit\", \"import\", \"include\",\n                  \"inquire\", \"intent\", \"interface\", \"intrinsic\",\n                  \"module\", \"namelist\", \"non_intrinsic\",\n                  \"non_overridable\", \"none\", \"nopass\",\n                  \"nullify\", \"open\", \"optional\", \"options\",\n                  \"parameter\", \"pass\", \"pause\", \"pointer\",\n                  \"print\", \"private\", \"program\", \"protected\",\n                  \"public\", \"pure\", \"read\", \"recursive\", \"result\",\n                  \"return\", \"rewind\", \"save\", \"select\", \"sequence\",\n                  \"stop\", \"subroutine\", \"target\", \"then\", \"to\", \"type\",\n                  \"use\", \"value\", \"volatile\", \"where\", \"while\",\n                  \"write\"]);\n  var builtins = words([\"abort\", \"abs\", \"access\", \"achar\", \"acos\",\n                          \"adjustl\", \"adjustr\", \"aimag\", \"aint\", \"alarm\",\n                          \"all\", \"allocated\", \"alog\", \"amax\", \"amin\",\n                          \"amod\", \"and\", \"anint\", \"any\", \"asin\",\n                          \"associated\", \"atan\", \"besj\", \"besjn\", \"besy\",\n                          \"besyn\", \"bit_size\", \"btest\", \"cabs\", \"ccos\",\n                          \"ceiling\", \"cexp\", \"char\", \"chdir\", \"chmod\",\n                          \"clog\", \"cmplx\", \"command_argument_count\",\n                          \"complex\", \"conjg\", \"cos\", \"cosh\", \"count\",\n                          \"cpu_time\", \"cshift\", \"csin\", \"csqrt\", \"ctime\",\n                          \"c_funloc\", \"c_loc\", \"c_associated\", \"c_null_ptr\",\n                          \"c_null_funptr\", \"c_f_pointer\", \"c_null_char\",\n                          \"c_alert\", \"c_backspace\", \"c_form_feed\",\n                          \"c_new_line\", \"c_carriage_return\",\n                          \"c_horizontal_tab\", \"c_vertical_tab\", \"dabs\",\n                          \"dacos\", \"dasin\", \"datan\", \"date_and_time\",\n                          \"dbesj\", \"dbesj\", \"dbesjn\", \"dbesy\", \"dbesy\",\n                          \"dbesyn\", \"dble\", \"dcos\", \"dcosh\", \"ddim\", \"derf\",\n                          \"derfc\", \"dexp\", \"digits\", \"dim\", \"dint\", \"dlog\",\n                          \"dlog\", \"dmax\", \"dmin\", \"dmod\", \"dnint\",\n                          \"dot_product\", \"dprod\", \"dsign\", \"dsinh\",\n                          \"dsin\", \"dsqrt\", \"dtanh\", \"dtan\", \"dtime\",\n                          \"eoshift\", \"epsilon\", \"erf\", \"erfc\", \"etime\",\n                          \"exit\", \"exp\", \"exponent\", \"extends_type_of\",\n                          \"fdate\", \"fget\", \"fgetc\", \"float\", \"floor\",\n                          \"flush\", \"fnum\", \"fputc\", \"fput\", \"fraction\",\n                          \"fseek\", \"fstat\", \"ftell\", \"gerror\", \"getarg\",\n                          \"get_command\", \"get_command_argument\",\n                          \"get_environment_variable\", \"getcwd\",\n                          \"getenv\", \"getgid\", \"getlog\", \"getpid\",\n                          \"getuid\", \"gmtime\", \"hostnm\", \"huge\", \"iabs\",\n                          \"iachar\", \"iand\", \"iargc\", \"ibclr\", \"ibits\",\n                          \"ibset\", \"ichar\", \"idate\", \"idim\", \"idint\",\n                          \"idnint\", \"ieor\", \"ierrno\", \"ifix\", \"imag\",\n                          \"imagpart\", \"index\", \"int\", \"ior\", \"irand\",\n                          \"isatty\", \"ishft\", \"ishftc\", \"isign\",\n                          \"iso_c_binding\", \"is_iostat_end\", \"is_iostat_eor\",\n                          \"itime\", \"kill\", \"kind\", \"lbound\", \"len\", \"len_trim\",\n                          \"lge\", \"lgt\", \"link\", \"lle\", \"llt\", \"lnblnk\", \"loc\",\n                          \"log\", \"logical\", \"long\", \"lshift\", \"lstat\", \"ltime\",\n                          \"matmul\", \"max\", \"maxexponent\", \"maxloc\", \"maxval\",\n                          \"mclock\", \"merge\", \"move_alloc\", \"min\", \"minexponent\",\n                          \"minloc\", \"minval\", \"mod\", \"modulo\", \"mvbits\",\n                          \"nearest\", \"new_line\", \"nint\", \"not\", \"or\", \"pack\",\n                          \"perror\", \"precision\", \"present\", \"product\", \"radix\",\n                          \"rand\", \"random_number\", \"random_seed\", \"range\",\n                          \"real\", \"realpart\", \"rename\", \"repeat\", \"reshape\",\n                          \"rrspacing\", \"rshift\", \"same_type_as\", \"scale\",\n                          \"scan\", \"second\", \"selected_int_kind\",\n                          \"selected_real_kind\", \"set_exponent\", \"shape\",\n                          \"short\", \"sign\", \"signal\", \"sinh\", \"sin\", \"sleep\",\n                          \"sngl\", \"spacing\", \"spread\", \"sqrt\", \"srand\", \"stat\",\n                          \"sum\", \"symlnk\", \"system\", \"system_clock\", \"tan\",\n                          \"tanh\", \"time\", \"tiny\", \"transfer\", \"transpose\",\n                          \"trim\", \"ttynam\", \"ubound\", \"umask\", \"unlink\",\n                          \"unpack\", \"verify\", \"xor\", \"zabs\", \"zcos\", \"zexp\",\n                          \"zlog\", \"zsin\", \"zsqrt\"]);\n\n    var dataTypes =  words([\"c_bool\", \"c_char\", \"c_double\", \"c_double_complex\",\n                     \"c_float\", \"c_float_complex\", \"c_funptr\", \"c_int\",\n                     \"c_int16_t\", \"c_int32_t\", \"c_int64_t\", \"c_int8_t\",\n                     \"c_int_fast16_t\", \"c_int_fast32_t\", \"c_int_fast64_t\",\n                     \"c_int_fast8_t\", \"c_int_least16_t\", \"c_int_least32_t\",\n                     \"c_int_least64_t\", \"c_int_least8_t\", \"c_intmax_t\",\n                     \"c_intptr_t\", \"c_long\", \"c_long_double\",\n                     \"c_long_double_complex\", \"c_long_long\", \"c_ptr\",\n                     \"c_short\", \"c_signed_char\", \"c_size_t\", \"character\",\n                     \"complex\", \"double\", \"integer\", \"logical\", \"real\"]);\n  var isOperatorChar = /[+\\-*&=<>\\/\\:]/;\n  var litOperator = /^\\.(and|or|eq|lt|le|gt|ge|ne|not|eqv|neqv)\\./i;\n\n  function tokenBase(stream, state) {\n\n    if (stream.match(litOperator)){\n        return 'operator';\n    }\n\n    var ch = stream.next();\n    if (ch == \"!\") {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n    if (ch == '\"' || ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    }\n    if (/[\\[\\]\\(\\),]/.test(ch)) {\n      return null;\n    }\n    if (/\\d/.test(ch)) {\n      stream.eatWhile(/[\\w\\.]/);\n      return \"number\";\n    }\n    if (isOperatorChar.test(ch)) {\n      stream.eatWhile(isOperatorChar);\n      return \"operator\";\n    }\n    stream.eatWhile(/[\\w\\$_]/);\n    var word = stream.current().toLowerCase();\n\n    if (keywords.hasOwnProperty(word)){\n            return 'keyword';\n    }\n    if (builtins.hasOwnProperty(word) || dataTypes.hasOwnProperty(word)) {\n            return 'builtin';\n    }\n    return \"variable\";\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {\n            end = true;\n            break;\n        }\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end || !escaped) state.tokenize = null;\n      return \"string\";\n    };\n  }\n\n  // Interface\n\n  return {\n    startState: function() {\n      return {tokenize: null};\n    },\n\n    token: function(stream, state) {\n      if (stream.eatSpace()) return null;\n      var style = (state.tokenize || tokenBase)(stream, state);\n      if (style == \"comment\" || style == \"meta\") return style;\n      return style;\n    }\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-fortran\", \"fortran\");\n\n});\n"],
  "mappings": "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",
  "names": ["CodeMirror"]
}
