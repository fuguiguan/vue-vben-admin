{
  "version": 3,
  "sources": ["../../.pnpm/codemirror@5.65.16/node_modules/codemirror/mode/oz/oz.js"],
  "sourcesContent": ["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"oz\", function (conf) {\n\n  function wordRegexp(words) {\n    return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n  }\n\n  var singleOperators = /[\\^@!\\|<>#~\\.\\*\\-\\+\\\\/,=]/;\n  var doubleOperators = /(<-)|(:=)|(=<)|(>=)|(<=)|(<:)|(>:)|(=:)|(\\\\=)|(\\\\=:)|(!!)|(==)|(::)/;\n  var tripleOperators = /(:::)|(\\.\\.\\.)|(=<:)|(>=:)/;\n\n  var middle = [\"in\", \"then\", \"else\", \"of\", \"elseof\", \"elsecase\", \"elseif\", \"catch\",\n    \"finally\", \"with\", \"require\", \"prepare\", \"import\", \"export\", \"define\", \"do\"];\n  var end = [\"end\"];\n\n  var atoms = wordRegexp([\"true\", \"false\", \"nil\", \"unit\"]);\n  var commonKeywords = wordRegexp([\"andthen\", \"at\", \"attr\", \"declare\", \"feat\", \"from\", \"lex\",\n    \"mod\", \"div\", \"mode\", \"orelse\", \"parser\", \"prod\", \"prop\", \"scanner\", \"self\", \"syn\", \"token\"]);\n  var openingKeywords = wordRegexp([\"local\", \"proc\", \"fun\", \"case\", \"class\", \"if\", \"cond\", \"or\", \"dis\",\n    \"choice\", \"not\", \"thread\", \"try\", \"raise\", \"lock\", \"for\", \"suchthat\", \"meth\", \"functor\"]);\n  var middleKeywords = wordRegexp(middle);\n  var endKeywords = wordRegexp(end);\n\n  // Tokenizers\n  function tokenBase(stream, state) {\n    if (stream.eatSpace()) {\n      return null;\n    }\n\n    // Brackets\n    if(stream.match(/[{}]/)) {\n      return \"bracket\";\n    }\n\n    // Special [] keyword\n    if (stream.match('[]')) {\n        return \"keyword\"\n    }\n\n    // Operators\n    if (stream.match(tripleOperators) || stream.match(doubleOperators)) {\n      return \"operator\";\n    }\n\n    // Atoms\n    if(stream.match(atoms)) {\n      return 'atom';\n    }\n\n    // Opening keywords\n    var matched = stream.match(openingKeywords);\n    if (matched) {\n      if (!state.doInCurrentLine)\n        state.currentIndent++;\n      else\n        state.doInCurrentLine = false;\n\n      // Special matching for signatures\n      if(matched[0] == \"proc\" || matched[0] == \"fun\")\n        state.tokenize = tokenFunProc;\n      else if(matched[0] == \"class\")\n        state.tokenize = tokenClass;\n      else if(matched[0] == \"meth\")\n        state.tokenize = tokenMeth;\n\n      return 'keyword';\n    }\n\n    // Middle and other keywords\n    if (stream.match(middleKeywords) || stream.match(commonKeywords)) {\n      return \"keyword\"\n    }\n\n    // End keywords\n    if (stream.match(endKeywords)) {\n      state.currentIndent--;\n      return 'keyword';\n    }\n\n    // Eat the next char for next comparisons\n    var ch = stream.next();\n\n    // Strings\n    if (ch == '\"' || ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    }\n\n    // Numbers\n    if (/[~\\d]/.test(ch)) {\n      if (ch == \"~\") {\n        if(! /^[0-9]/.test(stream.peek()))\n          return null;\n        else if (( stream.next() == \"0\" && stream.match(/^[xX][0-9a-fA-F]+/)) || stream.match(/^[0-9]*(\\.[0-9]+)?([eE][~+]?[0-9]+)?/))\n          return \"number\";\n      }\n\n      if ((ch == \"0\" && stream.match(/^[xX][0-9a-fA-F]+/)) || stream.match(/^[0-9]*(\\.[0-9]+)?([eE][~+]?[0-9]+)?/))\n        return \"number\";\n\n      return null;\n    }\n\n    // Comments\n    if (ch == \"%\") {\n      stream.skipToEnd();\n      return 'comment';\n    }\n    else if (ch == \"/\") {\n      if (stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      }\n    }\n\n    // Single operators\n    if(singleOperators.test(ch)) {\n      return \"operator\";\n    }\n\n    // If nothing match, we skip the entire alphanumeric block\n    stream.eatWhile(/\\w/);\n\n    return \"variable\";\n  }\n\n  function tokenClass(stream, state) {\n    if (stream.eatSpace()) {\n      return null;\n    }\n    stream.match(/([A-Z][A-Za-z0-9_]*)|(`.+`)/);\n    state.tokenize = tokenBase;\n    return \"variable-3\"\n  }\n\n  function tokenMeth(stream, state) {\n    if (stream.eatSpace()) {\n      return null;\n    }\n    stream.match(/([a-zA-Z][A-Za-z0-9_]*)|(`.+`)/);\n    state.tokenize = tokenBase;\n    return \"def\"\n  }\n\n  function tokenFunProc(stream, state) {\n    if (stream.eatSpace()) {\n      return null;\n    }\n\n    if(!state.hasPassedFirstStage && stream.eat(\"{\")) {\n      state.hasPassedFirstStage = true;\n      return \"bracket\";\n    }\n    else if(state.hasPassedFirstStage) {\n      stream.match(/([A-Z][A-Za-z0-9_]*)|(`.+`)|\\$/);\n      state.hasPassedFirstStage = false;\n      state.tokenize = tokenBase;\n      return \"def\"\n    }\n    else {\n      state.tokenize = tokenBase;\n      return null;\n    }\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n\n  function tokenString(quote) {\n    return function (stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {\n          end = true;\n          break;\n        }\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end || !escaped)\n        state.tokenize = tokenBase;\n      return \"string\";\n    };\n  }\n\n  function buildElectricInputRegEx() {\n    // Reindentation should occur on [] or on a match of any of\n    // the block closing keywords, at the end of a line.\n    var allClosings = middle.concat(end);\n    return new RegExp(\"[\\\\[\\\\]]|(\" + allClosings.join(\"|\") + \")$\");\n  }\n\n  return {\n\n    startState: function () {\n      return {\n        tokenize: tokenBase,\n        currentIndent: 0,\n        doInCurrentLine: false,\n        hasPassedFirstStage: false\n      };\n    },\n\n    token: function (stream, state) {\n      if (stream.sol())\n        state.doInCurrentLine = 0;\n\n      return state.tokenize(stream, state);\n    },\n\n    indent: function (state, textAfter) {\n      var trueText = textAfter.replace(/^\\s+|\\s+$/g, '');\n\n      if (trueText.match(endKeywords) || trueText.match(middleKeywords) || trueText.match(/(\\[])/))\n        return conf.indentUnit * (state.currentIndent - 1);\n\n      if (state.currentIndent < 0)\n        return 0;\n\n      return state.currentIndent * conf.indentUnit;\n    },\n    fold: \"indent\",\n    electricInput: buildElectricInputRegEx(),\n    lineComment: \"%\",\n    blockCommentStart: \"/*\",\n    blockCommentEnd: \"*/\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-oz\", \"oz\");\n\n});\n"],
  "mappings": "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",
  "names": ["CodeMirror", "end"]
}
