{
  "version": 3,
  "sources": ["../../.pnpm/codemirror@5.65.16/node_modules/codemirror/mode/mumps/mumps.js"],
  "sourcesContent": ["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n/*\n  This MUMPS Language script was constructed using vbscript.js as a template.\n*/\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"mumps\", function() {\n    function wordRegexp(words) {\n      return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\", \"i\");\n    }\n\n    var singleOperators = new RegExp(\"^[\\\\+\\\\-\\\\*/&#!_?\\\\\\\\<>=\\\\'\\\\[\\\\]]\");\n    var doubleOperators = new RegExp(\"^(('=)|(<=)|(>=)|('>)|('<)|([[)|(]])|(^$))\");\n    var singleDelimiters = new RegExp(\"^[\\\\.,:]\");\n    var brackets = new RegExp(\"[()]\");\n    var identifiers = new RegExp(\"^[%A-Za-z][A-Za-z0-9]*\");\n    var commandKeywords = [\"break\",\"close\",\"do\",\"else\",\"for\",\"goto\", \"halt\", \"hang\", \"if\", \"job\",\"kill\",\"lock\",\"merge\",\"new\",\"open\", \"quit\", \"read\", \"set\", \"tcommit\", \"trollback\", \"tstart\", \"use\", \"view\", \"write\", \"xecute\", \"b\",\"c\",\"d\",\"e\",\"f\",\"g\", \"h\", \"i\", \"j\",\"k\",\"l\",\"m\",\"n\",\"o\", \"q\", \"r\", \"s\", \"tc\", \"tro\", \"ts\", \"u\", \"v\", \"w\", \"x\"];\n    // The following list includes intrinsic functions _and_ special variables\n    var intrinsicFuncsWords = [\"\\\\$ascii\", \"\\\\$char\", \"\\\\$data\", \"\\\\$ecode\", \"\\\\$estack\", \"\\\\$etrap\", \"\\\\$extract\", \"\\\\$find\", \"\\\\$fnumber\", \"\\\\$get\", \"\\\\$horolog\", \"\\\\$io\", \"\\\\$increment\", \"\\\\$job\", \"\\\\$justify\", \"\\\\$length\", \"\\\\$name\", \"\\\\$next\", \"\\\\$order\", \"\\\\$piece\", \"\\\\$qlength\", \"\\\\$qsubscript\", \"\\\\$query\", \"\\\\$quit\", \"\\\\$random\", \"\\\\$reverse\", \"\\\\$select\", \"\\\\$stack\", \"\\\\$test\", \"\\\\$text\", \"\\\\$translate\", \"\\\\$view\", \"\\\\$x\", \"\\\\$y\", \"\\\\$a\", \"\\\\$c\", \"\\\\$d\", \"\\\\$e\", \"\\\\$ec\", \"\\\\$es\", \"\\\\$et\", \"\\\\$f\", \"\\\\$fn\", \"\\\\$g\", \"\\\\$h\", \"\\\\$i\", \"\\\\$j\", \"\\\\$l\", \"\\\\$n\", \"\\\\$na\", \"\\\\$o\", \"\\\\$p\", \"\\\\$q\", \"\\\\$ql\", \"\\\\$qs\", \"\\\\$r\", \"\\\\$re\", \"\\\\$s\", \"\\\\$st\", \"\\\\$t\", \"\\\\$tr\", \"\\\\$v\", \"\\\\$z\"];\n    var intrinsicFuncs = wordRegexp(intrinsicFuncsWords);\n    var command = wordRegexp(commandKeywords);\n\n    function tokenBase(stream, state) {\n      if (stream.sol()) {\n        state.label = true;\n        state.commandMode = 0;\n      }\n\n      // The <space> character has meaning in MUMPS. Ignoring consecutive\n      // spaces would interfere with interpreting whether the next non-space\n      // character belongs to the command or argument context.\n\n      // Examine each character and update a mode variable whose interpretation is:\n      //   >0 => command    0 => argument    <0 => command post-conditional\n      var ch = stream.peek();\n\n      if (ch == \" \" || ch == \"\\t\") { // Pre-process <space>\n        state.label = false;\n        if (state.commandMode == 0)\n          state.commandMode = 1;\n        else if ((state.commandMode < 0) || (state.commandMode == 2))\n          state.commandMode = 0;\n      } else if ((ch != \".\") && (state.commandMode > 0)) {\n        if (ch == \":\")\n          state.commandMode = -1;   // SIS - Command post-conditional\n        else\n          state.commandMode = 2;\n      }\n\n      // Do not color parameter list as line tag\n      if ((ch === \"(\") || (ch === \"\\u0009\"))\n        state.label = false;\n\n      // MUMPS comment starts with \";\"\n      if (ch === \";\") {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n\n      // Number Literals // SIS/RLM - MUMPS permits canonic number followed by concatenate operator\n      if (stream.match(/^[-+]?\\d+(\\.\\d+)?([eE][-+]?\\d+)?/))\n        return \"number\";\n\n      // Handle Strings\n      if (ch == '\"') {\n        if (stream.skipTo('\"')) {\n          stream.next();\n          return \"string\";\n        } else {\n          stream.skipToEnd();\n          return \"error\";\n        }\n      }\n\n      // Handle operators and Delimiters\n      if (stream.match(doubleOperators) || stream.match(singleOperators))\n        return \"operator\";\n\n      // Prevents leading \".\" in DO block from falling through to error\n      if (stream.match(singleDelimiters))\n        return null;\n\n      if (brackets.test(ch)) {\n        stream.next();\n        return \"bracket\";\n      }\n\n      if (state.commandMode > 0 && stream.match(command))\n        return \"variable-2\";\n\n      if (stream.match(intrinsicFuncs))\n        return \"builtin\";\n\n      if (stream.match(identifiers))\n        return \"variable\";\n\n      // Detect dollar-sign when not a documented intrinsic function\n      // \"^\" may introduce a GVN or SSVN - Color same as function\n      if (ch === \"$\" || ch === \"^\") {\n        stream.next();\n        return \"builtin\";\n      }\n\n      // MUMPS Indirection\n      if (ch === \"@\") {\n        stream.next();\n        return \"string-2\";\n      }\n\n      if (/[\\w%]/.test(ch)) {\n        stream.eatWhile(/[\\w%]/);\n        return \"variable\";\n      }\n\n      // Handle non-detected items\n      stream.next();\n      return \"error\";\n    }\n\n    return {\n      startState: function() {\n        return {\n          label: false,\n          commandMode: 0\n        };\n      },\n\n      token: function(stream, state) {\n        var style = tokenBase(stream, state);\n        if (state.label) return \"tag\";\n        return style;\n      }\n    };\n  });\n\n  CodeMirror.defineMIME(\"text/x-mumps\", \"mumps\");\n});\n"],
  "mappings": "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",
  "names": ["CodeMirror"]
}
