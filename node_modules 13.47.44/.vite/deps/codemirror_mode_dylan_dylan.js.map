{
  "version": 3,
  "sources": ["../../.pnpm/codemirror@5.65.16/node_modules/codemirror/mode/dylan/dylan.js"],
  "sourcesContent": ["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nfunction forEach(arr, f) {\n  for (var i = 0; i < arr.length; i++) f(arr[i], i)\n}\nfunction some(arr, f) {\n  for (var i = 0; i < arr.length; i++) if (f(arr[i], i)) return true\n  return false\n}\n\nCodeMirror.defineMode(\"dylan\", function(_config) {\n  // Words\n  var words = {\n    // Words that introduce unnamed definitions like \"define interface\"\n    unnamedDefinition: [\"interface\"],\n\n    // Words that introduce simple named definitions like \"define library\"\n    namedDefinition: [\"module\", \"library\", \"macro\",\n                      \"C-struct\", \"C-union\",\n                      \"C-function\", \"C-callable-wrapper\"\n                     ],\n\n    // Words that introduce type definitions like \"define class\".\n    // These are also parameterized like \"define method\" and are\n    // appended to otherParameterizedDefinitionWords\n    typeParameterizedDefinition: [\"class\", \"C-subtype\", \"C-mapped-subtype\"],\n\n    // Words that introduce trickier definitions like \"define method\".\n    // These require special definitions to be added to startExpressions\n    otherParameterizedDefinition: [\"method\", \"function\",\n                                   \"C-variable\", \"C-address\"\n                                  ],\n\n    // Words that introduce module constant definitions.\n    // These must also be simple definitions and are\n    // appended to otherSimpleDefinitionWords\n    constantSimpleDefinition: [\"constant\"],\n\n    // Words that introduce module variable definitions.\n    // These must also be simple definitions and are\n    // appended to otherSimpleDefinitionWords\n    variableSimpleDefinition: [\"variable\"],\n\n    // Other words that introduce simple definitions\n    // (without implicit bodies).\n    otherSimpleDefinition: [\"generic\", \"domain\",\n                            \"C-pointer-type\",\n                            \"table\"\n                           ],\n\n    // Words that begin statements with implicit bodies.\n    statement: [\"if\", \"block\", \"begin\", \"method\", \"case\",\n                \"for\", \"select\", \"when\", \"unless\", \"until\",\n                \"while\", \"iterate\", \"profiling\", \"dynamic-bind\"\n               ],\n\n    // Patterns that act as separators in compound statements.\n    // This may include any general pattern that must be indented\n    // specially.\n    separator: [\"finally\", \"exception\", \"cleanup\", \"else\",\n                \"elseif\", \"afterwards\"\n               ],\n\n    // Keywords that do not require special indentation handling,\n    // but which should be highlighted\n    other: [\"above\", \"below\", \"by\", \"from\", \"handler\", \"in\",\n            \"instance\", \"let\", \"local\", \"otherwise\", \"slot\",\n            \"subclass\", \"then\", \"to\", \"keyed-by\", \"virtual\"\n           ],\n\n    // Condition signaling function calls\n    signalingCalls: [\"signal\", \"error\", \"cerror\",\n                     \"break\", \"check-type\", \"abort\"\n                    ]\n  };\n\n  words[\"otherDefinition\"] =\n    words[\"unnamedDefinition\"]\n    .concat(words[\"namedDefinition\"])\n    .concat(words[\"otherParameterizedDefinition\"]);\n\n  words[\"definition\"] =\n    words[\"typeParameterizedDefinition\"]\n    .concat(words[\"otherDefinition\"]);\n\n  words[\"parameterizedDefinition\"] =\n    words[\"typeParameterizedDefinition\"]\n    .concat(words[\"otherParameterizedDefinition\"]);\n\n  words[\"simpleDefinition\"] =\n    words[\"constantSimpleDefinition\"]\n    .concat(words[\"variableSimpleDefinition\"])\n    .concat(words[\"otherSimpleDefinition\"]);\n\n  words[\"keyword\"] =\n    words[\"statement\"]\n    .concat(words[\"separator\"])\n    .concat(words[\"other\"]);\n\n  // Patterns\n  var symbolPattern = \"[-_a-zA-Z?!*@<>$%]+\";\n  var symbol = new RegExp(\"^\" + symbolPattern);\n  var patterns = {\n    // Symbols with special syntax\n    symbolKeyword: symbolPattern + \":\",\n    symbolClass: \"<\" + symbolPattern + \">\",\n    symbolGlobal: \"\\\\*\" + symbolPattern + \"\\\\*\",\n    symbolConstant: \"\\\\$\" + symbolPattern\n  };\n  var patternStyles = {\n    symbolKeyword: \"atom\",\n    symbolClass: \"tag\",\n    symbolGlobal: \"variable-2\",\n    symbolConstant: \"variable-3\"\n  };\n\n  // Compile all patterns to regular expressions\n  for (var patternName in patterns)\n    if (patterns.hasOwnProperty(patternName))\n      patterns[patternName] = new RegExp(\"^\" + patterns[patternName]);\n\n  // Names beginning \"with-\" and \"without-\" are commonly\n  // used as statement macro\n  patterns[\"keyword\"] = [/^with(?:out)?-[-_a-zA-Z?!*@<>$%]+/];\n\n  var styles = {};\n  styles[\"keyword\"] = \"keyword\";\n  styles[\"definition\"] = \"def\";\n  styles[\"simpleDefinition\"] = \"def\";\n  styles[\"signalingCalls\"] = \"builtin\";\n\n  // protected words lookup table\n  var wordLookup = {};\n  var styleLookup = {};\n\n  forEach([\n    \"keyword\",\n    \"definition\",\n    \"simpleDefinition\",\n    \"signalingCalls\"\n  ], function(type) {\n    forEach(words[type], function(word) {\n      wordLookup[word] = type;\n      styleLookup[word] = styles[type];\n    });\n  });\n\n\n  function chain(stream, state, f) {\n    state.tokenize = f;\n    return f(stream, state);\n  }\n\n  function tokenBase(stream, state) {\n    // String\n    var ch = stream.peek();\n    if (ch == \"'\" || ch == '\"') {\n      stream.next();\n      return chain(stream, state, tokenString(ch, \"string\"));\n    }\n    // Comment\n    else if (ch == \"/\") {\n      stream.next();\n      if (stream.eat(\"*\")) {\n        return chain(stream, state, tokenComment);\n      } else if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n      stream.backUp(1);\n    }\n    // Decimal\n    else if (/[+\\-\\d\\.]/.test(ch)) {\n      if (stream.match(/^[+-]?[0-9]*\\.[0-9]*([esdx][+-]?[0-9]+)?/i) ||\n          stream.match(/^[+-]?[0-9]+([esdx][+-]?[0-9]+)/i) ||\n          stream.match(/^[+-]?\\d+/)) {\n        return \"number\";\n      }\n    }\n    // Hash\n    else if (ch == \"#\") {\n      stream.next();\n      // Symbol with string syntax\n      ch = stream.peek();\n      if (ch == '\"') {\n        stream.next();\n        return chain(stream, state, tokenString('\"', \"string\"));\n      }\n      // Binary number\n      else if (ch == \"b\") {\n        stream.next();\n        stream.eatWhile(/[01]/);\n        return \"number\";\n      }\n      // Hex number\n      else if (ch == \"x\") {\n        stream.next();\n        stream.eatWhile(/[\\da-f]/i);\n        return \"number\";\n      }\n      // Octal number\n      else if (ch == \"o\") {\n        stream.next();\n        stream.eatWhile(/[0-7]/);\n        return \"number\";\n      }\n      // Token concatenation in macros\n      else if (ch == '#') {\n        stream.next();\n        return \"punctuation\";\n      }\n      // Sequence literals\n      else if ((ch == '[') || (ch == '(')) {\n        stream.next();\n        return \"bracket\";\n      // Hash symbol\n      } else if (stream.match(/f|t|all-keys|include|key|next|rest/i)) {\n        return \"atom\";\n      } else {\n        stream.eatWhile(/[-a-zA-Z]/);\n        return \"error\";\n      }\n    } else if (ch == \"~\") {\n      stream.next();\n      ch = stream.peek();\n      if (ch == \"=\") {\n        stream.next();\n        ch = stream.peek();\n        if (ch == \"=\") {\n          stream.next();\n          return \"operator\";\n        }\n        return \"operator\";\n      }\n      return \"operator\";\n    } else if (ch == \":\") {\n      stream.next();\n      ch = stream.peek();\n      if (ch == \"=\") {\n        stream.next();\n        return \"operator\";\n      } else if (ch == \":\") {\n        stream.next();\n        return \"punctuation\";\n      }\n    } else if (\"[](){}\".indexOf(ch) != -1) {\n      stream.next();\n      return \"bracket\";\n    } else if (\".,\".indexOf(ch) != -1) {\n      stream.next();\n      return \"punctuation\";\n    } else if (stream.match(\"end\")) {\n      return \"keyword\";\n    }\n    for (var name in patterns) {\n      if (patterns.hasOwnProperty(name)) {\n        var pattern = patterns[name];\n        if ((pattern instanceof Array && some(pattern, function(p) {\n          return stream.match(p);\n        })) || stream.match(pattern))\n          return patternStyles[name];\n      }\n    }\n    if (/[+\\-*\\/^=<>&|]/.test(ch)) {\n      stream.next();\n      return \"operator\";\n    }\n    if (stream.match(\"define\")) {\n      return \"def\";\n    } else {\n      stream.eatWhile(/[\\w\\-]/);\n      // Keyword\n      if (wordLookup.hasOwnProperty(stream.current())) {\n        return styleLookup[stream.current()];\n      } else if (stream.current().match(symbol)) {\n        return \"variable\";\n      } else {\n        stream.next();\n        return \"variable-2\";\n      }\n    }\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, maybeNested = false, nestedCount = 0, ch;\n    while ((ch = stream.next())) {\n      if (ch == \"/\" && maybeEnd) {\n        if (nestedCount > 0) {\n          nestedCount--;\n        } else {\n          state.tokenize = tokenBase;\n          break;\n        }\n      } else if (ch == \"*\" && maybeNested) {\n        nestedCount++;\n      }\n      maybeEnd = (ch == \"*\");\n      maybeNested = (ch == \"/\");\n    }\n    return \"comment\";\n  }\n\n  function tokenString(quote, style) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {\n          end = true;\n          break;\n        }\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end || !escaped) {\n        state.tokenize = tokenBase;\n      }\n      return style;\n    };\n  }\n\n  // Interface\n  return {\n    startState: function() {\n      return {\n        tokenize: tokenBase,\n        currentIndent: 0\n      };\n    },\n    token: function(stream, state) {\n      if (stream.eatSpace())\n        return null;\n      var style = state.tokenize(stream, state);\n      return style;\n    },\n    blockCommentStart: \"/*\",\n    blockCommentEnd: \"*/\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-dylan\", \"dylan\");\n\n});\n"],
  "mappings": "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",
  "names": ["CodeMirror"]
}
