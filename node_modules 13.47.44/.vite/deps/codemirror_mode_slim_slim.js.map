{
  "version": 3,
  "sources": ["../../.pnpm/codemirror@5.65.16/node_modules/codemirror/mode/slim/slim.js"],
  "sourcesContent": ["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n// Slim Highlighting for CodeMirror copyright (c) HicknHack Software Gmbh\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../htmlmixed/htmlmixed\"), require(\"../ruby/ruby\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../htmlmixed/htmlmixed\", \"../ruby/ruby\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\n  CodeMirror.defineMode(\"slim\", function(config) {\n    var htmlMode = CodeMirror.getMode(config, {name: \"htmlmixed\"});\n    var rubyMode = CodeMirror.getMode(config, \"ruby\");\n    var modes = { html: htmlMode, ruby: rubyMode };\n    var embedded = {\n      ruby: \"ruby\",\n      javascript: \"javascript\",\n      css: \"text/css\",\n      sass: \"text/x-sass\",\n      scss: \"text/x-scss\",\n      less: \"text/x-less\",\n      styl: \"text/x-styl\", // no highlighting so far\n      coffee: \"coffeescript\",\n      asciidoc: \"text/x-asciidoc\",\n      markdown: \"text/x-markdown\",\n      textile: \"text/x-textile\", // no highlighting so far\n      creole: \"text/x-creole\", // no highlighting so far\n      wiki: \"text/x-wiki\", // no highlighting so far\n      mediawiki: \"text/x-mediawiki\", // no highlighting so far\n      rdoc: \"text/x-rdoc\", // no highlighting so far\n      builder: \"text/x-builder\", // no highlighting so far\n      nokogiri: \"text/x-nokogiri\", // no highlighting so far\n      erb: \"application/x-erb\"\n    };\n    var embeddedRegexp = function(map){\n      var arr = [];\n      for(var key in map) arr.push(key);\n      return new RegExp(\"^(\"+arr.join('|')+\"):\");\n    }(embedded);\n\n    var styleMap = {\n      \"commentLine\": \"comment\",\n      \"slimSwitch\": \"operator special\",\n      \"slimTag\": \"tag\",\n      \"slimId\": \"attribute def\",\n      \"slimClass\": \"attribute qualifier\",\n      \"slimAttribute\": \"attribute\",\n      \"slimSubmode\": \"keyword special\",\n      \"closeAttributeTag\": null,\n      \"slimDoctype\": null,\n      \"lineContinuation\": null\n    };\n    var closing = {\n      \"{\": \"}\",\n      \"[\": \"]\",\n      \"(\": \")\"\n    };\n\n    var nameStartChar = \"_a-zA-Z\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\";\n    var nameChar = nameStartChar + \"\\\\-0-9\\xB7\\u0300-\\u036F\\u203F-\\u2040\";\n    var nameRegexp = new RegExp(\"^[:\"+nameStartChar+\"](?::[\"+nameChar+\"]|[\"+nameChar+\"]*)\");\n    var attributeNameRegexp = new RegExp(\"^[:\"+nameStartChar+\"][:\\\\.\"+nameChar+\"]*(?=\\\\s*=)\");\n    var wrappedAttributeNameRegexp = new RegExp(\"^[:\"+nameStartChar+\"][:\\\\.\"+nameChar+\"]*\");\n    var classNameRegexp = /^\\.-?[_a-zA-Z]+[\\w\\-]*/;\n    var classIdRegexp = /^#[_a-zA-Z]+[\\w\\-]*/;\n\n    function backup(pos, tokenize, style) {\n      var restore = function(stream, state) {\n        state.tokenize = tokenize;\n        if (stream.pos < pos) {\n          stream.pos = pos;\n          return style;\n        }\n        return state.tokenize(stream, state);\n      };\n      return function(stream, state) {\n        state.tokenize = restore;\n        return tokenize(stream, state);\n      };\n    }\n\n    function maybeBackup(stream, state, pat, offset, style) {\n      var cur = stream.current();\n      var idx = cur.search(pat);\n      if (idx > -1) {\n        state.tokenize = backup(stream.pos, state.tokenize, style);\n        stream.backUp(cur.length - idx - offset);\n      }\n      return style;\n    }\n\n    function continueLine(state, column) {\n      state.stack = {\n        parent: state.stack,\n        style: \"continuation\",\n        indented: column,\n        tokenize: state.line\n      };\n      state.line = state.tokenize;\n    }\n    function finishContinue(state) {\n      if (state.line == state.tokenize) {\n        state.line = state.stack.tokenize;\n        state.stack = state.stack.parent;\n      }\n    }\n\n    function lineContinuable(column, tokenize) {\n      return function(stream, state) {\n        finishContinue(state);\n        if (stream.match(/^\\\\$/)) {\n          continueLine(state, column);\n          return \"lineContinuation\";\n        }\n        var style = tokenize(stream, state);\n        if (stream.eol() && stream.current().match(/(?:^|[^\\\\])(?:\\\\\\\\)*\\\\$/)) {\n          stream.backUp(1);\n        }\n        return style;\n      };\n    }\n    function commaContinuable(column, tokenize) {\n      return function(stream, state) {\n        finishContinue(state);\n        var style = tokenize(stream, state);\n        if (stream.eol() && stream.current().match(/,$/)) {\n          continueLine(state, column);\n        }\n        return style;\n      };\n    }\n\n    function rubyInQuote(endQuote, tokenize) {\n      // TODO: add multi line support\n      return function(stream, state) {\n        var ch = stream.peek();\n        if (ch == endQuote && state.rubyState.tokenize.length == 1) {\n          // step out of ruby context as it seems to complete processing all the braces\n          stream.next();\n          state.tokenize = tokenize;\n          return \"closeAttributeTag\";\n        } else {\n          return ruby(stream, state);\n        }\n      };\n    }\n    function startRubySplat(tokenize) {\n      var rubyState;\n      var runSplat = function(stream, state) {\n        if (state.rubyState.tokenize.length == 1 && !state.rubyState.context.prev) {\n          stream.backUp(1);\n          if (stream.eatSpace()) {\n            state.rubyState = rubyState;\n            state.tokenize = tokenize;\n            return tokenize(stream, state);\n          }\n          stream.next();\n        }\n        return ruby(stream, state);\n      };\n      return function(stream, state) {\n        rubyState = state.rubyState;\n        state.rubyState = CodeMirror.startState(rubyMode);\n        state.tokenize = runSplat;\n        return ruby(stream, state);\n      };\n    }\n\n    function ruby(stream, state) {\n      return rubyMode.token(stream, state.rubyState);\n    }\n\n    function htmlLine(stream, state) {\n      if (stream.match(/^\\\\$/)) {\n        return \"lineContinuation\";\n      }\n      return html(stream, state);\n    }\n    function html(stream, state) {\n      if (stream.match(/^#\\{/)) {\n        state.tokenize = rubyInQuote(\"}\", state.tokenize);\n        return null;\n      }\n      return maybeBackup(stream, state, /[^\\\\]#\\{/, 1, htmlMode.token(stream, state.htmlState));\n    }\n\n    function startHtmlLine(lastTokenize) {\n      return function(stream, state) {\n        var style = htmlLine(stream, state);\n        if (stream.eol()) state.tokenize = lastTokenize;\n        return style;\n      };\n    }\n\n    function startHtmlMode(stream, state, offset) {\n      state.stack = {\n        parent: state.stack,\n        style: \"html\",\n        indented: stream.column() + offset, // pipe + space\n        tokenize: state.line\n      };\n      state.line = state.tokenize = html;\n      return null;\n    }\n\n    function comment(stream, state) {\n      stream.skipToEnd();\n      return state.stack.style;\n    }\n\n    function commentMode(stream, state) {\n      state.stack = {\n        parent: state.stack,\n        style: \"comment\",\n        indented: state.indented + 1,\n        tokenize: state.line\n      };\n      state.line = comment;\n      return comment(stream, state);\n    }\n\n    function attributeWrapper(stream, state) {\n      if (stream.eat(state.stack.endQuote)) {\n        state.line = state.stack.line;\n        state.tokenize = state.stack.tokenize;\n        state.stack = state.stack.parent;\n        return null;\n      }\n      if (stream.match(wrappedAttributeNameRegexp)) {\n        state.tokenize = attributeWrapperAssign;\n        return \"slimAttribute\";\n      }\n      stream.next();\n      return null;\n    }\n    function attributeWrapperAssign(stream, state) {\n      if (stream.match(/^==?/)) {\n        state.tokenize = attributeWrapperValue;\n        return null;\n      }\n      return attributeWrapper(stream, state);\n    }\n    function attributeWrapperValue(stream, state) {\n      var ch = stream.peek();\n      if (ch == '\"' || ch == \"\\'\") {\n        state.tokenize = readQuoted(ch, \"string\", true, false, attributeWrapper);\n        stream.next();\n        return state.tokenize(stream, state);\n      }\n      if (ch == '[') {\n        return startRubySplat(attributeWrapper)(stream, state);\n      }\n      if (stream.match(/^(true|false|nil)\\b/)) {\n        state.tokenize = attributeWrapper;\n        return \"keyword\";\n      }\n      return startRubySplat(attributeWrapper)(stream, state);\n    }\n\n    function startAttributeWrapperMode(state, endQuote, tokenize) {\n      state.stack = {\n        parent: state.stack,\n        style: \"wrapper\",\n        indented: state.indented + 1,\n        tokenize: tokenize,\n        line: state.line,\n        endQuote: endQuote\n      };\n      state.line = state.tokenize = attributeWrapper;\n      return null;\n    }\n\n    function sub(stream, state) {\n      if (stream.match(/^#\\{/)) {\n        state.tokenize = rubyInQuote(\"}\", state.tokenize);\n        return null;\n      }\n      var subStream = new CodeMirror.StringStream(stream.string.slice(state.stack.indented), stream.tabSize);\n      subStream.pos = stream.pos - state.stack.indented;\n      subStream.start = stream.start - state.stack.indented;\n      subStream.lastColumnPos = stream.lastColumnPos - state.stack.indented;\n      subStream.lastColumnValue = stream.lastColumnValue - state.stack.indented;\n      var style = state.subMode.token(subStream, state.subState);\n      stream.pos = subStream.pos + state.stack.indented;\n      return style;\n    }\n    function firstSub(stream, state) {\n      state.stack.indented = stream.column();\n      state.line = state.tokenize = sub;\n      return state.tokenize(stream, state);\n    }\n\n    function createMode(mode) {\n      var query = embedded[mode];\n      var spec = CodeMirror.mimeModes[query];\n      if (spec) {\n        return CodeMirror.getMode(config, spec);\n      }\n      var factory = CodeMirror.modes[query];\n      if (factory) {\n        return factory(config, {name: query});\n      }\n      return CodeMirror.getMode(config, \"null\");\n    }\n\n    function getMode(mode) {\n      if (!modes.hasOwnProperty(mode)) {\n        return modes[mode] = createMode(mode);\n      }\n      return modes[mode];\n    }\n\n    function startSubMode(mode, state) {\n      var subMode = getMode(mode);\n      var subState = CodeMirror.startState(subMode);\n\n      state.subMode = subMode;\n      state.subState = subState;\n\n      state.stack = {\n        parent: state.stack,\n        style: \"sub\",\n        indented: state.indented + 1,\n        tokenize: state.line\n      };\n      state.line = state.tokenize = firstSub;\n      return \"slimSubmode\";\n    }\n\n    function doctypeLine(stream, _state) {\n      stream.skipToEnd();\n      return \"slimDoctype\";\n    }\n\n    function startLine(stream, state) {\n      var ch = stream.peek();\n      if (ch == '<') {\n        return (state.tokenize = startHtmlLine(state.tokenize))(stream, state);\n      }\n      if (stream.match(/^[|']/)) {\n        return startHtmlMode(stream, state, 1);\n      }\n      if (stream.match(/^\\/(!|\\[\\w+])?/)) {\n        return commentMode(stream, state);\n      }\n      if (stream.match(/^(-|==?[<>]?)/)) {\n        state.tokenize = lineContinuable(stream.column(), commaContinuable(stream.column(), ruby));\n        return \"slimSwitch\";\n      }\n      if (stream.match(/^doctype\\b/)) {\n        state.tokenize = doctypeLine;\n        return \"keyword\";\n      }\n\n      var m = stream.match(embeddedRegexp);\n      if (m) {\n        return startSubMode(m[1], state);\n      }\n\n      return slimTag(stream, state);\n    }\n\n    function slim(stream, state) {\n      if (state.startOfLine) {\n        return startLine(stream, state);\n      }\n      return slimTag(stream, state);\n    }\n\n    function slimTag(stream, state) {\n      if (stream.eat('*')) {\n        state.tokenize = startRubySplat(slimTagExtras);\n        return null;\n      }\n      if (stream.match(nameRegexp)) {\n        state.tokenize = slimTagExtras;\n        return \"slimTag\";\n      }\n      return slimClass(stream, state);\n    }\n    function slimTagExtras(stream, state) {\n      if (stream.match(/^(<>?|><?)/)) {\n        state.tokenize = slimClass;\n        return null;\n      }\n      return slimClass(stream, state);\n    }\n    function slimClass(stream, state) {\n      if (stream.match(classIdRegexp)) {\n        state.tokenize = slimClass;\n        return \"slimId\";\n      }\n      if (stream.match(classNameRegexp)) {\n        state.tokenize = slimClass;\n        return \"slimClass\";\n      }\n      return slimAttribute(stream, state);\n    }\n    function slimAttribute(stream, state) {\n      if (stream.match(/^([\\[\\{\\(])/)) {\n        return startAttributeWrapperMode(state, closing[RegExp.$1], slimAttribute);\n      }\n      if (stream.match(attributeNameRegexp)) {\n        state.tokenize = slimAttributeAssign;\n        return \"slimAttribute\";\n      }\n      if (stream.peek() == '*') {\n        stream.next();\n        state.tokenize = startRubySplat(slimContent);\n        return null;\n      }\n      return slimContent(stream, state);\n    }\n    function slimAttributeAssign(stream, state) {\n      if (stream.match(/^==?/)) {\n        state.tokenize = slimAttributeValue;\n        return null;\n      }\n      // should never happen, because of forward lookup\n      return slimAttribute(stream, state);\n    }\n\n    function slimAttributeValue(stream, state) {\n      var ch = stream.peek();\n      if (ch == '\"' || ch == \"\\'\") {\n        state.tokenize = readQuoted(ch, \"string\", true, false, slimAttribute);\n        stream.next();\n        return state.tokenize(stream, state);\n      }\n      if (ch == '[') {\n        return startRubySplat(slimAttribute)(stream, state);\n      }\n      if (ch == ':') {\n        return startRubySplat(slimAttributeSymbols)(stream, state);\n      }\n      if (stream.match(/^(true|false|nil)\\b/)) {\n        state.tokenize = slimAttribute;\n        return \"keyword\";\n      }\n      return startRubySplat(slimAttribute)(stream, state);\n    }\n    function slimAttributeSymbols(stream, state) {\n      stream.backUp(1);\n      if (stream.match(/^[^\\s],(?=:)/)) {\n        state.tokenize = startRubySplat(slimAttributeSymbols);\n        return null;\n      }\n      stream.next();\n      return slimAttribute(stream, state);\n    }\n    function readQuoted(quote, style, embed, unescaped, nextTokenize) {\n      return function(stream, state) {\n        finishContinue(state);\n        var fresh = stream.current().length == 0;\n        if (stream.match(/^\\\\$/, fresh)) {\n          if (!fresh) return style;\n          continueLine(state, state.indented);\n          return \"lineContinuation\";\n        }\n        if (stream.match(/^#\\{/, fresh)) {\n          if (!fresh) return style;\n          state.tokenize = rubyInQuote(\"}\", state.tokenize);\n          return null;\n        }\n        var escaped = false, ch;\n        while ((ch = stream.next()) != null) {\n          if (ch == quote && (unescaped || !escaped)) {\n            state.tokenize = nextTokenize;\n            break;\n          }\n          if (embed && ch == \"#\" && !escaped) {\n            if (stream.eat(\"{\")) {\n              stream.backUp(2);\n              break;\n            }\n          }\n          escaped = !escaped && ch == \"\\\\\";\n        }\n        if (stream.eol() && escaped) {\n          stream.backUp(1);\n        }\n        return style;\n      };\n    }\n    function slimContent(stream, state) {\n      if (stream.match(/^==?/)) {\n        state.tokenize = ruby;\n        return \"slimSwitch\";\n      }\n      if (stream.match(/^\\/$/)) { // tag close hint\n        state.tokenize = slim;\n        return null;\n      }\n      if (stream.match(/^:/)) { // inline tag\n        state.tokenize = slimTag;\n        return \"slimSwitch\";\n      }\n      startHtmlMode(stream, state, 0);\n      return state.tokenize(stream, state);\n    }\n\n    var mode = {\n      // default to html mode\n      startState: function() {\n        var htmlState = CodeMirror.startState(htmlMode);\n        var rubyState = CodeMirror.startState(rubyMode);\n        return {\n          htmlState: htmlState,\n          rubyState: rubyState,\n          stack: null,\n          last: null,\n          tokenize: slim,\n          line: slim,\n          indented: 0\n        };\n      },\n\n      copyState: function(state) {\n        return {\n          htmlState : CodeMirror.copyState(htmlMode, state.htmlState),\n          rubyState: CodeMirror.copyState(rubyMode, state.rubyState),\n          subMode: state.subMode,\n          subState: state.subMode && CodeMirror.copyState(state.subMode, state.subState),\n          stack: state.stack,\n          last: state.last,\n          tokenize: state.tokenize,\n          line: state.line\n        };\n      },\n\n      token: function(stream, state) {\n        if (stream.sol()) {\n          state.indented = stream.indentation();\n          state.startOfLine = true;\n          state.tokenize = state.line;\n          while (state.stack && state.stack.indented > state.indented && state.last != \"slimSubmode\") {\n            state.line = state.tokenize = state.stack.tokenize;\n            state.stack = state.stack.parent;\n            state.subMode = null;\n            state.subState = null;\n          }\n        }\n        if (stream.eatSpace()) return null;\n        var style = state.tokenize(stream, state);\n        state.startOfLine = false;\n        if (style) state.last = style;\n        return styleMap.hasOwnProperty(style) ? styleMap[style] : style;\n      },\n\n      blankLine: function(state) {\n        if (state.subMode && state.subMode.blankLine) {\n          return state.subMode.blankLine(state.subState);\n        }\n      },\n\n      innerMode: function(state) {\n        if (state.subMode) return {state: state.subState, mode: state.subMode};\n        return {state: state, mode: mode};\n      }\n\n      //indent: function(state) {\n      //  return state.indented;\n      //}\n    };\n    return mode;\n  }, \"htmlmixed\", \"ruby\");\n\n  CodeMirror.defineMIME(\"text/x-slim\", \"slim\");\n  CodeMirror.defineMIME(\"application/x-slim\", \"slim\");\n});\n"],
  "mappings": "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",
  "names": ["CodeMirror", "mode"]
}
