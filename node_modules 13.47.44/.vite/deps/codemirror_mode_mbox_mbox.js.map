{
  "version": 3,
  "sources": ["../../.pnpm/codemirror@5.65.16/node_modules/codemirror/mode/mbox/mbox.js"],
  "sourcesContent": ["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nvar rfc2822 = [\n  \"From\", \"Sender\", \"Reply-To\", \"To\", \"Cc\", \"Bcc\", \"Message-ID\",\n  \"In-Reply-To\", \"References\", \"Resent-From\", \"Resent-Sender\", \"Resent-To\",\n  \"Resent-Cc\", \"Resent-Bcc\", \"Resent-Message-ID\", \"Return-Path\", \"Received\"\n];\nvar rfc2822NoEmail = [\n  \"Date\", \"Subject\", \"Comments\", \"Keywords\", \"Resent-Date\"\n];\n\nCodeMirror.registerHelper(\"hintWords\", \"mbox\", rfc2822.concat(rfc2822NoEmail));\n\nvar whitespace = /^[ \\t]/;\nvar separator = /^From /; // See RFC 4155\nvar rfc2822Header = new RegExp(\"^(\" + rfc2822.join(\"|\") + \"): \");\nvar rfc2822HeaderNoEmail = new RegExp(\"^(\" + rfc2822NoEmail.join(\"|\") + \"): \");\nvar header = /^[^:]+:/; // Optional fields defined in RFC 2822\nvar email = /^[^ ]+@[^ ]+/;\nvar untilEmail = /^.*?(?=[^ ]+?@[^ ]+)/;\nvar bracketedEmail = /^<.*?>/;\nvar untilBracketedEmail = /^.*?(?=<.*>)/;\n\nfunction styleForHeader(header) {\n  if (header === \"Subject\") return \"header\";\n  return \"string\";\n}\n\nfunction readToken(stream, state) {\n  if (stream.sol()) {\n    // From last line\n    state.inSeparator = false;\n    if (state.inHeader && stream.match(whitespace)) {\n      // Header folding\n      return null;\n    } else {\n      state.inHeader = false;\n      state.header = null;\n    }\n\n    if (stream.match(separator)) {\n      state.inHeaders = true;\n      state.inSeparator = true;\n      return \"atom\";\n    }\n\n    var match;\n    var emailPermitted = false;\n    if ((match = stream.match(rfc2822HeaderNoEmail)) ||\n        (emailPermitted = true) && (match = stream.match(rfc2822Header))) {\n      state.inHeaders = true;\n      state.inHeader = true;\n      state.emailPermitted = emailPermitted;\n      state.header = match[1];\n      return \"atom\";\n    }\n\n    // Use vim's heuristics: recognize custom headers only if the line is in a\n    // block of legitimate headers.\n    if (state.inHeaders && (match = stream.match(header))) {\n      state.inHeader = true;\n      state.emailPermitted = true;\n      state.header = match[1];\n      return \"atom\";\n    }\n\n    state.inHeaders = false;\n    stream.skipToEnd();\n    return null;\n  }\n\n  if (state.inSeparator) {\n    if (stream.match(email)) return \"link\";\n    if (stream.match(untilEmail)) return \"atom\";\n    stream.skipToEnd();\n    return \"atom\";\n  }\n\n  if (state.inHeader) {\n    var style = styleForHeader(state.header);\n\n    if (state.emailPermitted) {\n      if (stream.match(bracketedEmail)) return style + \" link\";\n      if (stream.match(untilBracketedEmail)) return style;\n    }\n    stream.skipToEnd();\n    return style;\n  }\n\n  stream.skipToEnd();\n  return null;\n};\n\nCodeMirror.defineMode(\"mbox\", function() {\n  return {\n    startState: function() {\n      return {\n        // Is in a mbox separator\n        inSeparator: false,\n        // Is in a mail header\n        inHeader: false,\n        // If bracketed email is permitted. Only applicable when inHeader\n        emailPermitted: false,\n        // Name of current header\n        header: null,\n        // Is in a region of mail headers\n        inHeaders: false\n      };\n    },\n    token: readToken,\n    blankLine: function(state) {\n      state.inHeaders = state.inSeparator = state.inHeader = false;\n    }\n  };\n});\n\nCodeMirror.defineMIME(\"application/mbox\", \"mbox\");\n});\n"],
  "mappings": "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",
  "names": ["CodeMirror", "header"]
}
