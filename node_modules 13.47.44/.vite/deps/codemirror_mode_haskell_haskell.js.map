{
  "version": 3,
  "sources": ["../../.pnpm/codemirror@5.65.16/node_modules/codemirror/mode/haskell/haskell.js"],
  "sourcesContent": ["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"haskell\", function(_config, modeConfig) {\n\n  function switchState(source, setState, f) {\n    setState(f);\n    return f(source, setState);\n  }\n\n  // These should all be Unicode extended, as per the Haskell 2010 report\n  var smallRE = /[a-z_]/;\n  var largeRE = /[A-Z]/;\n  var digitRE = /\\d/;\n  var hexitRE = /[0-9A-Fa-f]/;\n  var octitRE = /[0-7]/;\n  var idRE = /[a-z_A-Z0-9'\\xa1-\\uffff]/;\n  var symbolRE = /[-!#$%&*+.\\/<=>?@\\\\^|~:]/;\n  var specialRE = /[(),;[\\]`{}]/;\n  var whiteCharRE = /[ \\t\\v\\f]/; // newlines are handled in tokenizer\n\n  function normal(source, setState) {\n    if (source.eatWhile(whiteCharRE)) {\n      return null;\n    }\n\n    var ch = source.next();\n    if (specialRE.test(ch)) {\n      if (ch == '{' && source.eat('-')) {\n        var t = \"comment\";\n        if (source.eat('#')) {\n          t = \"meta\";\n        }\n        return switchState(source, setState, ncomment(t, 1));\n      }\n      return null;\n    }\n\n    if (ch == '\\'') {\n      if (source.eat('\\\\')) {\n        source.next();  // should handle other escapes here\n      }\n      else {\n        source.next();\n      }\n      if (source.eat('\\'')) {\n        return \"string\";\n      }\n      return \"string error\";\n    }\n\n    if (ch == '\"') {\n      return switchState(source, setState, stringLiteral);\n    }\n\n    if (largeRE.test(ch)) {\n      source.eatWhile(idRE);\n      if (source.eat('.')) {\n        return \"qualifier\";\n      }\n      return \"variable-2\";\n    }\n\n    if (smallRE.test(ch)) {\n      source.eatWhile(idRE);\n      return \"variable\";\n    }\n\n    if (digitRE.test(ch)) {\n      if (ch == '0') {\n        if (source.eat(/[xX]/)) {\n          source.eatWhile(hexitRE); // should require at least 1\n          return \"integer\";\n        }\n        if (source.eat(/[oO]/)) {\n          source.eatWhile(octitRE); // should require at least 1\n          return \"number\";\n        }\n      }\n      source.eatWhile(digitRE);\n      var t = \"number\";\n      if (source.match(/^\\.\\d+/)) {\n        t = \"number\";\n      }\n      if (source.eat(/[eE]/)) {\n        t = \"number\";\n        source.eat(/[-+]/);\n        source.eatWhile(digitRE); // should require at least 1\n      }\n      return t;\n    }\n\n    if (ch == \".\" && source.eat(\".\"))\n      return \"keyword\";\n\n    if (symbolRE.test(ch)) {\n      if (ch == '-' && source.eat(/-/)) {\n        source.eatWhile(/-/);\n        if (!source.eat(symbolRE)) {\n          source.skipToEnd();\n          return \"comment\";\n        }\n      }\n      var t = \"variable\";\n      if (ch == ':') {\n        t = \"variable-2\";\n      }\n      source.eatWhile(symbolRE);\n      return t;\n    }\n\n    return \"error\";\n  }\n\n  function ncomment(type, nest) {\n    if (nest == 0) {\n      return normal;\n    }\n    return function(source, setState) {\n      var currNest = nest;\n      while (!source.eol()) {\n        var ch = source.next();\n        if (ch == '{' && source.eat('-')) {\n          ++currNest;\n        }\n        else if (ch == '-' && source.eat('}')) {\n          --currNest;\n          if (currNest == 0) {\n            setState(normal);\n            return type;\n          }\n        }\n      }\n      setState(ncomment(type, currNest));\n      return type;\n    };\n  }\n\n  function stringLiteral(source, setState) {\n    while (!source.eol()) {\n      var ch = source.next();\n      if (ch == '\"') {\n        setState(normal);\n        return \"string\";\n      }\n      if (ch == '\\\\') {\n        if (source.eol() || source.eat(whiteCharRE)) {\n          setState(stringGap);\n          return \"string\";\n        }\n        if (source.eat('&')) {\n        }\n        else {\n          source.next(); // should handle other escapes here\n        }\n      }\n    }\n    setState(normal);\n    return \"string error\";\n  }\n\n  function stringGap(source, setState) {\n    if (source.eat('\\\\')) {\n      return switchState(source, setState, stringLiteral);\n    }\n    source.next();\n    setState(normal);\n    return \"error\";\n  }\n\n\n  var wellKnownWords = (function() {\n    var wkw = {};\n    function setType(t) {\n      return function () {\n        for (var i = 0; i < arguments.length; i++)\n          wkw[arguments[i]] = t;\n      };\n    }\n\n    setType(\"keyword\")(\n      \"case\", \"class\", \"data\", \"default\", \"deriving\", \"do\", \"else\", \"foreign\",\n      \"if\", \"import\", \"in\", \"infix\", \"infixl\", \"infixr\", \"instance\", \"let\",\n      \"module\", \"newtype\", \"of\", \"then\", \"type\", \"where\", \"_\");\n\n    setType(\"keyword\")(\n      \"\\.\\.\", \":\", \"::\", \"=\", \"\\\\\", \"<-\", \"->\", \"@\", \"~\", \"=>\");\n\n    setType(\"builtin\")(\n      \"!!\", \"$!\", \"$\", \"&&\", \"+\", \"++\", \"-\", \".\", \"/\", \"/=\", \"<\", \"<*\", \"<=\",\n      \"<$>\", \"<*>\", \"=<<\", \"==\", \">\", \">=\", \">>\", \">>=\", \"^\", \"^^\", \"||\", \"*\",\n      \"*>\", \"**\");\n\n    setType(\"builtin\")(\n      \"Applicative\", \"Bool\", \"Bounded\", \"Char\", \"Double\", \"EQ\", \"Either\", \"Enum\",\n      \"Eq\", \"False\", \"FilePath\", \"Float\", \"Floating\", \"Fractional\", \"Functor\",\n      \"GT\", \"IO\", \"IOError\", \"Int\", \"Integer\", \"Integral\", \"Just\", \"LT\", \"Left\",\n      \"Maybe\", \"Monad\", \"Nothing\", \"Num\", \"Ord\", \"Ordering\", \"Rational\", \"Read\",\n      \"ReadS\", \"Real\", \"RealFloat\", \"RealFrac\", \"Right\", \"Show\", \"ShowS\",\n      \"String\", \"True\");\n\n    setType(\"builtin\")(\n      \"abs\", \"acos\", \"acosh\", \"all\", \"and\", \"any\", \"appendFile\", \"asTypeOf\",\n      \"asin\", \"asinh\", \"atan\", \"atan2\", \"atanh\", \"break\", \"catch\", \"ceiling\",\n      \"compare\", \"concat\", \"concatMap\", \"const\", \"cos\", \"cosh\", \"curry\",\n      \"cycle\", \"decodeFloat\", \"div\", \"divMod\", \"drop\", \"dropWhile\", \"either\",\n      \"elem\", \"encodeFloat\", \"enumFrom\", \"enumFromThen\", \"enumFromThenTo\",\n      \"enumFromTo\", \"error\", \"even\", \"exp\", \"exponent\", \"fail\", \"filter\",\n      \"flip\", \"floatDigits\", \"floatRadix\", \"floatRange\", \"floor\", \"fmap\",\n      \"foldl\", \"foldl1\", \"foldr\", \"foldr1\", \"fromEnum\", \"fromInteger\",\n      \"fromIntegral\", \"fromRational\", \"fst\", \"gcd\", \"getChar\", \"getContents\",\n      \"getLine\", \"head\", \"id\", \"init\", \"interact\", \"ioError\", \"isDenormalized\",\n      \"isIEEE\", \"isInfinite\", \"isNaN\", \"isNegativeZero\", \"iterate\", \"last\",\n      \"lcm\", \"length\", \"lex\", \"lines\", \"log\", \"logBase\", \"lookup\", \"map\",\n      \"mapM\", \"mapM_\", \"max\", \"maxBound\", \"maximum\", \"maybe\", \"min\", \"minBound\",\n      \"minimum\", \"mod\", \"negate\", \"not\", \"notElem\", \"null\", \"odd\", \"or\",\n      \"otherwise\", \"pi\", \"pred\", \"print\", \"product\", \"properFraction\", \"pure\",\n      \"putChar\", \"putStr\", \"putStrLn\", \"quot\", \"quotRem\", \"read\", \"readFile\",\n      \"readIO\", \"readList\", \"readLn\", \"readParen\", \"reads\", \"readsPrec\",\n      \"realToFrac\", \"recip\", \"rem\", \"repeat\", \"replicate\", \"return\", \"reverse\",\n      \"round\", \"scaleFloat\", \"scanl\", \"scanl1\", \"scanr\", \"scanr1\", \"seq\",\n      \"sequence\", \"sequence_\", \"show\", \"showChar\", \"showList\", \"showParen\",\n      \"showString\", \"shows\", \"showsPrec\", \"significand\", \"signum\", \"sin\",\n      \"sinh\", \"snd\", \"span\", \"splitAt\", \"sqrt\", \"subtract\", \"succ\", \"sum\",\n      \"tail\", \"take\", \"takeWhile\", \"tan\", \"tanh\", \"toEnum\", \"toInteger\",\n      \"toRational\", \"truncate\", \"uncurry\", \"undefined\", \"unlines\", \"until\",\n      \"unwords\", \"unzip\", \"unzip3\", \"userError\", \"words\", \"writeFile\", \"zip\",\n      \"zip3\", \"zipWith\", \"zipWith3\");\n\n    var override = modeConfig.overrideKeywords;\n    if (override) for (var word in override) if (override.hasOwnProperty(word))\n      wkw[word] = override[word];\n\n    return wkw;\n  })();\n\n\n\n  return {\n    startState: function ()  { return { f: normal }; },\n    copyState:  function (s) { return { f: s.f }; },\n\n    token: function(stream, state) {\n      var t = state.f(stream, function(s) { state.f = s; });\n      var w = stream.current();\n      return wellKnownWords.hasOwnProperty(w) ? wellKnownWords[w] : t;\n    },\n\n    blockCommentStart: \"{-\",\n    blockCommentEnd: \"-}\",\n    lineComment: \"--\"\n  };\n\n});\n\nCodeMirror.defineMIME(\"text/x-haskell\", \"haskell\");\n\n});\n"],
  "mappings": "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",
  "names": ["CodeMirror"]
}
