{
  "version": 3,
  "sources": ["../../.pnpm/codemirror@5.65.16/node_modules/codemirror/mode/fcl/fcl.js"],
  "sourcesContent": ["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"fcl\", function(config) {\n  var indentUnit = config.indentUnit;\n\n  var keywords = {\n      \"term\": true,\n      \"method\": true, \"accu\": true,\n      \"rule\": true, \"then\": true, \"is\": true, \"and\": true, \"or\": true,\n      \"if\": true, \"default\": true\n  };\n\n  var start_blocks = {\n      \"var_input\": true,\n      \"var_output\": true,\n      \"fuzzify\": true,\n      \"defuzzify\": true,\n      \"function_block\": true,\n      \"ruleblock\": true\n  };\n\n  var end_blocks = {\n      \"end_ruleblock\": true,\n      \"end_defuzzify\": true,\n      \"end_function_block\": true,\n      \"end_fuzzify\": true,\n      \"end_var\": true\n  };\n\n  var atoms = {\n      \"true\": true, \"false\": true, \"nan\": true,\n      \"real\": true, \"min\": true, \"max\": true, \"cog\": true, \"cogs\": true\n  };\n\n  var isOperatorChar = /[+\\-*&^%:=<>!|\\/]/;\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n\n    if (/[\\d\\.]/.test(ch)) {\n      if (ch == \".\") {\n        stream.match(/^[0-9]+([eE][\\-+]?[0-9]+)?/);\n      } else if (ch == \"0\") {\n        stream.match(/^[xX][0-9a-fA-F]+/) || stream.match(/^0[0-7]+/);\n      } else {\n        stream.match(/^[0-9]*\\.?[0-9]*([eE][\\-+]?[0-9]+)?/);\n      }\n      return \"number\";\n    }\n\n    if (ch == \"/\" || ch == \"(\") {\n      if (stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      }\n      if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n    }\n    if (isOperatorChar.test(ch)) {\n      stream.eatWhile(isOperatorChar);\n      return \"operator\";\n    }\n    stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n\n    var cur = stream.current().toLowerCase();\n    if (keywords.propertyIsEnumerable(cur) ||\n        start_blocks.propertyIsEnumerable(cur) ||\n        end_blocks.propertyIsEnumerable(cur)) {\n      return \"keyword\";\n    }\n    if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n    return \"variable\";\n  }\n\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if ((ch == \"/\" || ch == \")\") && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n\n  function Context(indented, column, type, align, prev) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.align = align;\n    this.prev = prev;\n  }\n\n  function pushContext(state, col, type) {\n    return state.context = new Context(state.indented, col, type, null, state.context);\n  }\n\n  function popContext(state) {\n    if (!state.context.prev) return;\n    var t = state.context.type;\n    if (t == \"end_block\")\n      state.indented = state.context.indented;\n    return state.context = state.context.prev;\n  }\n\n  // Interface\n\n  return {\n    startState: function(basecolumn) {\n      return {\n        tokenize: null,\n        context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", false),\n        indented: 0,\n        startOfLine: true\n      };\n    },\n\n    token: function(stream, state) {\n        var ctx = state.context;\n        if (stream.sol()) {\n            if (ctx.align == null) ctx.align = false;\n            state.indented = stream.indentation();\n            state.startOfLine = true;\n        }\n        if (stream.eatSpace()) return null;\n\n        var style = (state.tokenize || tokenBase)(stream, state);\n        if (style == \"comment\") return style;\n        if (ctx.align == null) ctx.align = true;\n\n        var cur = stream.current().toLowerCase();\n\n        if (start_blocks.propertyIsEnumerable(cur)) pushContext(state, stream.column(), \"end_block\");\n        else if (end_blocks.propertyIsEnumerable(cur))  popContext(state);\n\n        state.startOfLine = false;\n        return style;\n    },\n\n    indent: function(state, textAfter) {\n      if (state.tokenize != tokenBase && state.tokenize != null) return 0;\n      var ctx = state.context;\n\n      var closing = end_blocks.propertyIsEnumerable(textAfter);\n      if (ctx.align) return ctx.column + (closing ? 0 : 1);\n      else return ctx.indented + (closing ? 0 : indentUnit);\n    },\n\n    electricChars: \"ryk\",\n    fold: \"brace\",\n    blockCommentStart: \"(*\",\n    blockCommentEnd: \"*)\",\n    lineComment: \"//\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-fcl\", \"fcl\");\n});\n"],
  "mappings": "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",
  "names": ["CodeMirror"]
}
